<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL的数据目录</title>
    <url>/2018/11/09/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="MySQL的数据目录"><a href="#MySQL的数据目录" class="headerlink" title="MySQL的数据目录"></a>MySQL的数据目录</h1><h2 id="1-MySQL-8-的主要目录结构"><a href="#1-MySQL-8-的主要目录结构" class="headerlink" title="1. MySQL 8 的主要目录结构"></a>1. MySQL 8 的主要目录结构</h2><h5 id="安装好MySQL-8-之后，我们查看如下的目录结构："><a href="#安装好MySQL-8-之后，我们查看如下的目录结构：" class="headerlink" title="安装好MySQL 8 之后，我们查看如下的目录结构："></a>安装好MySQL 8 之后，我们查看如下的目录结构：</h5><h2 id="1-1-数据库文件的存放路径"><a href="#1-1-数据库文件的存放路径" class="headerlink" title="1. 1 数据库文件的存放路径"></a>1. 1 数据库文件的存放路径</h2><h5 id="MySQL数据库文件的存放路径：-x2F-var-x2F-lib-x2F-mysql-x2F"><a href="#MySQL数据库文件的存放路径：-x2F-var-x2F-lib-x2F-mysql-x2F" class="headerlink" title="MySQL数据库文件的存放路径：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;"></a>MySQL数据库文件的存放路径：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;</h5><h5 id="从结果中可以看出，在我的计算机上MySQL的数据目录就是-x2F-var-x2F-lib-x2F-mysql-x2F-。"><a href="#从结果中可以看出，在我的计算机上MySQL的数据目录就是-x2F-var-x2F-lib-x2F-mysql-x2F-。" class="headerlink" title="从结果中可以看出，在我的计算机上MySQL的数据目录就是&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;。"></a>从结果中可以看出，在我的计算机上MySQL的数据目录就是&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;。</h5><h2 id="1-2-相关命令目录"><a href="#1-2-相关命令目录" class="headerlink" title="1. 2 相关命令目录"></a>1. 2 相关命令目录</h2><h5 id="相关命令目录：-x2F-usr-x2F-bin（mysqladmin、mysqlbinlog、mysqldump等命令）和-x2F-usr-x2F-sbin。"><a href="#相关命令目录：-x2F-usr-x2F-bin（mysqladmin、mysqlbinlog、mysqldump等命令）和-x2F-usr-x2F-sbin。" class="headerlink" title="相关命令目录：&#x2F;usr&#x2F;bin（mysqladmin、mysqlbinlog、mysqldump等命令）和&#x2F;usr&#x2F;sbin。"></a>相关命令目录：&#x2F;usr&#x2F;bin（mysqladmin、mysqlbinlog、mysqldump等命令）和&#x2F;usr&#x2F;sbin。</h5><h2 id="1-3-配置文件目录"><a href="#1-3-配置文件目录" class="headerlink" title="1. 3 配置文件目录"></a>1. 3 配置文件目录</h2><h5 id="配置文件目录：-x2F-usr-x2F-share-x2F-mysql-8-0（命令及配置文件），-x2F-etc-x2F-mysql（如my-cnf）"><a href="#配置文件目录：-x2F-usr-x2F-share-x2F-mysql-8-0（命令及配置文件），-x2F-etc-x2F-mysql（如my-cnf）" class="headerlink" title="配置文件目录：&#x2F;usr&#x2F;share&#x2F;mysql-8.0（命令及配置文件），&#x2F;etc&#x2F;mysql（如my.cnf）"></a>配置文件目录：&#x2F;usr&#x2F;share&#x2F;mysql-8.0（命令及配置文件），&#x2F;etc&#x2F;mysql（如my.cnf）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@atguigu01 ~]# find / -name mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;datadir&#x27;;</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">| datadir | /var/lib/mysql/ |</span><br><span class="line">+---------------+-----------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure>

<h2 id="2-数据库和文件系统的关系"><a href="#2-数据库和文件系统的关系" class="headerlink" title="2. 数据库和文件系统的关系"></a>2. 数据库和文件系统的关系</h2><h3 id="2-1-查看默认数据库"><a href="#2-1-查看默认数据库" class="headerlink" title="2. 1 查看默认数据库"></a>2. 1 查看默认数据库</h3><h5 id="查看一下在我的计算机上当前有哪些数据库："><a href="#查看一下在我的计算机上当前有哪些数据库：" class="headerlink" title="查看一下在我的计算机上当前有哪些数据库："></a>查看一下在我的计算机上当前有哪些数据库：</h5><h5 id="可以看到有-4-个数据库是属于MySQL自带的系统数据库。"><a href="#可以看到有-4-个数据库是属于MySQL自带的系统数据库。" class="headerlink" title="可以看到有 4 个数据库是属于MySQL自带的系统数据库。"></a>可以看到有 4 个数据库是属于MySQL自带的系统数据库。</h5><h6 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h6><h5 id="MySQL-系统自带的核心数据库，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定"><a href="#MySQL-系统自带的核心数据库，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定" class="headerlink" title="MySQL 系统自带的核心数据库，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定"></a>MySQL 系统自带的核心数据库，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定</h5><h5 id="义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。"><a href="#义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。" class="headerlink" title="义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。"></a>义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</h5><h6 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h6><h5 id="MySQL-系统自带的数据库，这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有"><a href="#MySQL-系统自带的数据库，这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有" class="headerlink" title="MySQL 系统自带的数据库，这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有"></a>MySQL 系统自带的数据库，这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有</h5><h5 id="哪些表、哪些视图、哪些触发器、哪些列、哪些索引。这些信息并不是真实的用户数据，而是一些"><a href="#哪些表、哪些视图、哪些触发器、哪些列、哪些索引。这些信息并不是真实的用户数据，而是一些" class="headerlink" title="哪些表、哪些视图、哪些触发器、哪些列、哪些索引。这些信息并不是真实的用户数据，而是一些"></a>哪些表、哪些视图、哪些触发器、哪些列、哪些索引。这些信息并不是真实的用户数据，而是一些</h5><h5 id="描述性信息，有时候也称之为元数据。在系统数据库information-schema中提供了一些以"><a href="#描述性信息，有时候也称之为元数据。在系统数据库information-schema中提供了一些以" class="headerlink" title="描述性信息，有时候也称之为元数据。在系统数据库information_schema中提供了一些以"></a>描述性信息，有时候也称之为元数据。在系统数据库information_schema中提供了一些以</h5><h5 id="innodb-sys开头的表，用于表示内部系统表。"><a href="#innodb-sys开头的表，用于表示内部系统表。" class="headerlink" title="innodb_sys开头的表，用于表示内部系统表。"></a>innodb_sys开头的表，用于表示内部系统表。</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE information_schema;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES LIKE &#x27;innodb_sys%&#x27;;</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">| Tables_in_information_schema (innodb_sys%) |</span><br></pre></td></tr></table></figure>

<h6 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h6><h5 id="MySQL-系统自带的数据库，这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，可以"><a href="#MySQL-系统自带的数据库，这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，可以" class="headerlink" title="MySQL 系统自带的数据库，这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，可以"></a>MySQL 系统自带的数据库，这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，可以</h5><h5 id="用来监控-MySQL-服务的各类性能指标。包括统计最近执行了哪些语句，在执行过程的每个阶段都"><a href="#用来监控-MySQL-服务的各类性能指标。包括统计最近执行了哪些语句，在执行过程的每个阶段都" class="headerlink" title="用来监控 MySQL 服务的各类性能指标。包括统计最近执行了哪些语句，在执行过程的每个阶段都"></a>用来监控 MySQL 服务的各类性能指标。包括统计最近执行了哪些语句，在执行过程的每个阶段都</h5><h5 id="花费了多长时间，内存的使用情况等信息。"><a href="#花费了多长时间，内存的使用情况等信息。" class="headerlink" title="花费了多长时间，内存的使用情况等信息。"></a>花费了多长时间，内存的使用情况等信息。</h5><h6 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h6><h5 id="MySQL-系统自带的数据库，这个数据库主要是通过视图的形式把information-schema和"><a href="#MySQL-系统自带的数据库，这个数据库主要是通过视图的形式把information-schema和" class="headerlink" title="MySQL 系统自带的数据库，这个数据库主要是通过视图的形式把information_schema和"></a>MySQL 系统自带的数据库，这个数据库主要是通过视图的形式把information_schema和</h5><h5 id="performance-schema结合起来，帮助系统管理员和开发人员监控-MySQL-的技术性能。"><a href="#performance-schema结合起来，帮助系统管理员和开发人员监控-MySQL-的技术性能。" class="headerlink" title="performance_schema结合起来，帮助系统管理员和开发人员监控 MySQL 的技术性能。"></a>performance_schema结合起来，帮助系统管理员和开发人员监控 MySQL 的技术性能。</h5><h3 id="2-2-数据库在文件系统中的表示"><a href="#2-2-数据库在文件系统中的表示" class="headerlink" title="2. 2 数据库在文件系统中的表示"></a>2. 2 数据库在文件系统中的表示</h3><h5 id="看一下我的计算机上的数据目录下的内容："><a href="#看一下我的计算机上的数据目录下的内容：" class="headerlink" title="看一下我的计算机上的数据目录下的内容："></a>看一下我的计算机上的数据目录下的内容：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------------------------------+</span><br><span class="line">| INNODB_SYS_DATAFILES |</span><br><span class="line">| INNODB_SYS_VIRTUAL |</span><br><span class="line">| INNODB_SYS_INDEXES |</span><br><span class="line">| INNODB_SYS_TABLES |</span><br><span class="line">| INNODB_SYS_FIELDS |</span><br><span class="line">| INNODB_SYS_TABLESPACES |</span><br><span class="line">| INNODB_SYS_FOREIGN_COLS |</span><br><span class="line">| INNODB_SYS_COLUMNS |</span><br><span class="line">| INNODB_SYS_FOREIGN |</span><br><span class="line">| INNODB_SYS_TABLESTATS |</span><br><span class="line">+--------------------------------------------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@atguigu01 mysql]# cd /var/lib/mysql</span><br><span class="line">[root@atguigu01 mysql]# ll</span><br><span class="line">总用量 189980</span><br><span class="line">-rw-r-----. 1 mysql mysql 56 7 月  28 00 :27 auto.cnf</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 7 月  28 00 :27 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 820 7 月  28 01 :00 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 7 月  29 14 :08 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 582 7 月  29 16 :47 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 7 月  29 16 :51 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 7 月  29 16 :56 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 7 月  29 17 :37 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 24555 7 月  30 00 :28 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 8 月 1 11 :57 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 156 8 月 1 23 :21 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 156 8 月 2 09 :25 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 1469 8 月 4 01 :40 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 156 8 月 6 00 :24 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 179 8 月 6 08 :43 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 156 8 月 6 10 :56 binlog.</span><br><span class="line">-rw-r-----. 1 mysql mysql 240 8 月 6 10 :56 binlog.index</span><br><span class="line">-rw-------. 1 mysql mysql 1676 7 月  28 00 :27 ca-key.pem</span><br><span class="line">-rw-r--r--. 1 mysql mysql 1112 7 月  28 00 :27 ca.pem</span><br><span class="line">-rw-r--r--. 1 mysql mysql 1112 7 月  28 00 :27 client-cert.pem</span><br><span class="line">-rw-------. 1 mysql mysql 1676 7 月  28 00 :27 client-key.pem</span><br><span class="line">drwxr-x---. 2 mysql mysql 4096 7 月  29 16 :34 dbtest</span><br><span class="line">-rw-r-----. 1 mysql mysql 196608 8 月 6 10 :58 #ib_16384_0.dblwr</span><br><span class="line">-rw-r-----. 1 mysql mysql 8585216 7 月  28 00 :27 #ib_16384_1.dblwr</span><br><span class="line">-rw-r-----. 1 mysql mysql 3486 8 月 6 08 :43 ib_buffer_pool</span><br><span class="line">-rw-r-----. 1 mysql mysql 12582912 8 月 6 10 :56 ibdata</span><br><span class="line">-rw-r-----. 1 mysql mysql 50331648 8 月 6 10 :58 ib_logfile</span><br></pre></td></tr></table></figure>

<h5 id="这个数据目录下的文件和子目录比较多，除了information-schema这个系统数据库外，其他的数据库"><a href="#这个数据目录下的文件和子目录比较多，除了information-schema这个系统数据库外，其他的数据库" class="headerlink" title="这个数据目录下的文件和子目录比较多，除了information_schema这个系统数据库外，其他的数据库"></a>这个数据目录下的文件和子目录比较多，除了information_schema这个系统数据库外，其他的数据库</h5><h5 id="在数据目录下都有对应的子目录。"><a href="#在数据目录下都有对应的子目录。" class="headerlink" title="在数据目录下都有对应的子目录。"></a>在数据目录下都有对应的子目录。</h5><h5 id="以我的temp数据库为例，在MySQL-5-7-中打开："><a href="#以我的temp数据库为例，在MySQL-5-7-中打开：" class="headerlink" title="以我的temp数据库为例，在MySQL 5. 7 中打开："></a>以我的temp数据库为例，在MySQL 5. 7 中打开：</h5><h5 id="在MySQL-8-0-中打开："><a href="#在MySQL-8-0-中打开：" class="headerlink" title="在MySQL 8. 0 中打开："></a>在MySQL 8. 0 中打开：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-rw-r-----. 1 mysql mysql 50331648 7 月  28 00 :27 ib_logfile</span><br><span class="line">-rw-r-----. 1 mysql mysql 12582912 8 月 6 10 :56 ibtmp</span><br><span class="line">drwxr-x---. 2 mysql mysql 4096 8 月 6 10 :56 #innodb_temp</span><br><span class="line">drwxr-x---. 2 mysql mysql 4096 7 月  28 00 :27 mysql</span><br><span class="line">-rw-r-----. 1 mysql mysql 26214400 8 月 6 10 :56 mysql.ibd</span><br><span class="line">srwxrwxrwx. 1 mysql mysql 0 8 月 6 10 :56 mysql.sock</span><br><span class="line">-rw-------. 1 mysql mysql 5 8 月 6 10 :56 mysql.sock.lock</span><br><span class="line">drwxr-x---. 2 mysql mysql 4096 7 月  28 00 :27 performance_schema</span><br><span class="line">-rw-------. 1 mysql mysql 1680 7 月  28 00 :27 private_key.pem</span><br><span class="line">-rw-r--r--. 1 mysql mysql 452 7 月  28 00 :27 public_key.pem</span><br><span class="line">-rw-r--r--. 1 mysql mysql 1112 7 月  28 00 :27 server-cert.pem</span><br><span class="line">-rw-------. 1 mysql mysql 1680 7 月  28 00 :27 server-key.pem</span><br><span class="line">drwxr-x---. 2 mysql mysql 4096 7 月  28 00 :27 sys</span><br><span class="line">drwxr-x---. 2 mysql mysql 4096 7 月  29 23 :10 temp</span><br><span class="line">-rw-r-----. 1 mysql mysql 16777216 8 月 6 10 :58 undo_</span><br><span class="line">-rw-r-----. 1 mysql mysql 16777216 8 月 6 10 :58 undo_</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@atguigu02 mysql]# cd ./temp</span><br><span class="line">[root@atguigu02 temp]# ll</span><br><span class="line">总用量 1144</span><br><span class="line">-rw-r-----. 1 mysql mysql 8658 8 月  18 11 :32 countries.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 114688 8 月  18 11 :32 countries.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 61 8 月  18 11 :32 db.opt</span><br><span class="line">-rw-r-----. 1 mysql mysql 8716 8 月  18 11 :32 departments.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 147456 8 月  18 11 :32 departments.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 3017 8 月  18 11 :32 emp_details_view.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 8982 8 月  18 11 :32 employees.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 180224 8 月  18 11 :32 employees.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 8660 8 月  18 11 :32 job_grades.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 98304 8 月  18 11 :32 job_grades.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 8736 8 月  18 11 :32 job_history.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 147456 8 月  18 11 :32 job_history.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 8688 8 月  18 11 :32 jobs.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 114688 8 月  18 11 :32 jobs.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 8790 8 月  18 11 :32 locations.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 131072 8 月  18 11 :32 locations.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 8614 8 月  18 11 :32 regions.frm</span><br><span class="line">-rw-r-----. 1 mysql mysql 114688 8 月  18 11 :32 regions.ibd</span><br></pre></td></tr></table></figure>

<h3 id="2-3-表在文件系统中的表示"><a href="#2-3-表在文件系统中的表示" class="headerlink" title="2. 3 表在文件系统中的表示"></a>2. 3 表在文件系统中的表示</h3><h4 id="2-3-1-InnoDB存储引擎模式"><a href="#2-3-1-InnoDB存储引擎模式" class="headerlink" title="2. 3. 1 InnoDB存储引擎模式"></a>2. 3. 1 InnoDB存储引擎模式</h4><h5 id="1-表结构"><a href="#1-表结构" class="headerlink" title="1. 表结构"></a>1. 表结构</h5><h5 id="为了保存表结构，InnoDB在数据目录下对应的数据库子目录下创建了一个专门用于描述表结构的文"><a href="#为了保存表结构，InnoDB在数据目录下对应的数据库子目录下创建了一个专门用于描述表结构的文" class="headerlink" title="为了保存表结构，InnoDB在数据目录下对应的数据库子目录下创建了一个专门用于描述表结构的文"></a>为了保存表结构，InnoDB在数据目录下对应的数据库子目录下创建了一个专门用于描述表结构的文</h5><h5 id="件，文件名是这样："><a href="#件，文件名是这样：" class="headerlink" title="件，文件名是这样："></a>件，文件名是这样：</h5><h5 id="比方说我们在atguigu数据库下创建一个名为test的表："><a href="#比方说我们在atguigu数据库下创建一个名为test的表：" class="headerlink" title="比方说我们在atguigu数据库下创建一个名为test的表："></a>比方说我们在atguigu数据库下创建一个名为test的表：</h5><h5 id="那在数据库atguigu对应的子目录下就会创建一个名为test-frm的用于描述表结构的文件。-frm文件"><a href="#那在数据库atguigu对应的子目录下就会创建一个名为test-frm的用于描述表结构的文件。-frm文件" class="headerlink" title="那在数据库atguigu对应的子目录下就会创建一个名为test.frm的用于描述表结构的文件。.frm文件"></a>那在数据库atguigu对应的子目录下就会创建一个名为test.frm的用于描述表结构的文件。.frm文件</h5><h5 id="的格式在不同的平台上都是相同的。这个后缀名为-frm是以二进制格式存储的，我们直接打开是乱码"><a href="#的格式在不同的平台上都是相同的。这个后缀名为-frm是以二进制格式存储的，我们直接打开是乱码" class="headerlink" title="的格式在不同的平台上都是相同的。这个后缀名为.frm是以二进制格式存储的，我们直接打开是乱码"></a>的格式在不同的平台上都是相同的。这个后缀名为.frm是以二进制格式存储的，我们直接打开是乱码</h5><h5 id="的。"><a href="#的。" class="headerlink" title="的。"></a>的。</h5><h5 id="2-表中数据和索引"><a href="#2-表中数据和索引" class="headerlink" title="2. 表中数据和索引"></a>2. 表中数据和索引</h5><h5 id="①-系统表空间（system-tablespace）"><a href="#①-系统表空间（system-tablespace）" class="headerlink" title="① 系统表空间（system tablespace）"></a>① 系统表空间（system tablespace）</h5><h5 id="默认情况下，InnoDB会在数据目录下创建一个名为ibdata1、大小为12M的文件，这个文件就是对应"><a href="#默认情况下，InnoDB会在数据目录下创建一个名为ibdata1、大小为12M的文件，这个文件就是对应" class="headerlink" title="默认情况下，InnoDB会在数据目录下创建一个名为ibdata1、大小为12M的文件，这个文件就是对应"></a>默认情况下，InnoDB会在数据目录下创建一个名为ibdata1、大小为12M的文件，这个文件就是对应</h5><h5 id="的系统表空间在文件系统上的表示。怎么才-12-M？注意这个文件是自扩展文件，当不够用的时候它会自"><a href="#的系统表空间在文件系统上的表示。怎么才-12-M？注意这个文件是自扩展文件，当不够用的时候它会自" class="headerlink" title="的系统表空间在文件系统上的表示。怎么才 12 M？注意这个文件是自扩展文件，当不够用的时候它会自"></a>的系统表空间在文件系统上的表示。怎么才 12 M？注意这个文件是自扩展文件，当不够用的时候它会自</h5><h5 id="己增加文件大小。"><a href="#己增加文件大小。" class="headerlink" title="己增加文件大小。"></a>己增加文件大小。</h5><h5 id="当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的ibdata1这个文件名"><a href="#当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的ibdata1这个文件名" class="headerlink" title="当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的ibdata1这个文件名"></a>当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的ibdata1这个文件名</h5><h5 id="难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下my-cnf-配置"><a href="#难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下my-cnf-配置" class="headerlink" title="难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下my.cnf 配置"></a>难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下my.cnf 配置</h5><h5 id="文件："><a href="#文件：" class="headerlink" title="文件："></a>文件：</h5><h5 id="②-独立表空间-file-per-table-tablespace"><a href="#②-独立表空间-file-per-table-tablespace" class="headerlink" title="② 独立表空间(file-per-table tablespace)"></a>② 独立表空间(file-per-table tablespace)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@atguigu01 mysql]# cd ./temp</span><br><span class="line">[root@atguigu01 temp]# ll</span><br><span class="line">总用量 1080</span><br><span class="line">-rw-r-----. 1 mysql mysql 131072 7 月  29 23 :10 countries.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 163840 7 月  29 23 :10 departments.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 196608 7 月  29 23 :10 employees.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 114688 7 月  29 23 :10 job_grades.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 163840 7 月  29 23 :10 job_history.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 131072 7 月  29 23 :10 jobs.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 147456 7 月  29 23 :10 locations.ibd</span><br><span class="line">-rw-r-----. 1 mysql mysql 131072 7 月  29 23 :10 regions.ibd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表名.frm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; USE atguigu;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE test (</span><br><span class="line">-&gt; c1 INT</span><br><span class="line">-&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_data_file_path=data1:512M;data2:512M:autoextend</span><br></pre></td></tr></table></figure>

<h5 id="在MySQL5-6-6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为每"><a href="#在MySQL5-6-6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为每" class="headerlink" title="在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为每"></a>在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为每</h5><h5 id="一个表建立一个独立表空间，也就是说我们创建了多少个表，就有多少个独立表空间。使用独立表空间来"><a href="#一个表建立一个独立表空间，也就是说我们创建了多少个表，就有多少个独立表空间。使用独立表空间来" class="headerlink" title="一个表建立一个独立表空间，也就是说我们创建了多少个表，就有多少个独立表空间。使用独立表空间来"></a>一个表建立一个独立表空间，也就是说我们创建了多少个表，就有多少个独立表空间。使用独立表空间来</h5><h5 id="存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表"><a href="#存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表" class="headerlink" title="存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表"></a>存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表</h5><h5 id="名相同，只不过添加了一个-ibd的扩展名而已，所以完整的文件名称长这样："><a href="#名相同，只不过添加了一个-ibd的扩展名而已，所以完整的文件名称长这样：" class="headerlink" title="名相同，只不过添加了一个.ibd的扩展名而已，所以完整的文件名称长这样："></a>名相同，只不过添加了一个.ibd的扩展名而已，所以完整的文件名称长这样：</h5><h5 id="比如：我们使用了独立表空间去存储atguigu数据库下的test表的话，那么在该表所在数据库对应"><a href="#比如：我们使用了独立表空间去存储atguigu数据库下的test表的话，那么在该表所在数据库对应" class="headerlink" title="比如：我们使用了独立表空间去存储atguigu数据库下的test表的话，那么在该表所在数据库对应"></a>比如：我们使用了独立表空间去存储atguigu数据库下的test表的话，那么在该表所在数据库对应</h5><h5 id="的atguigu目录下会为test表创建这两个文件："><a href="#的atguigu目录下会为test表创建这两个文件：" class="headerlink" title="的atguigu目录下会为test表创建这两个文件："></a>的atguigu目录下会为test表创建这两个文件：</h5><h5 id="其中test-ibd文件就用来存储test表中的数据和索引。"><a href="#其中test-ibd文件就用来存储test表中的数据和索引。" class="headerlink" title="其中test.ibd文件就用来存储test表中的数据和索引。"></a>其中test.ibd文件就用来存储test表中的数据和索引。</h5><h5 id="③-系统表空间与独立表空间的设置"><a href="#③-系统表空间与独立表空间的设置" class="headerlink" title="③ 系统表空间与独立表空间的设置"></a>③ 系统表空间与独立表空间的设置</h5><h5 id="我们可以自己指定使用系统表空间还是独立表空间来存储数据，这个功能由启动参数"><a href="#我们可以自己指定使用系统表空间还是独立表空间来存储数据，这个功能由启动参数" class="headerlink" title="我们可以自己指定使用系统表空间还是独立表空间来存储数据，这个功能由启动参数"></a>我们可以自己指定使用系统表空间还是独立表空间来存储数据，这个功能由启动参数</h5><h5 id="innodb-file-per-table控制，比如说我们想刻意将表数据都存储到系统表空间时，可以在启动"><a href="#innodb-file-per-table控制，比如说我们想刻意将表数据都存储到系统表空间时，可以在启动" class="headerlink" title="innodb_file_per_table控制，比如说我们想刻意将表数据都存储到系统表空间时，可以在启动"></a>innodb_file_per_table控制，比如说我们想刻意将表数据都存储到系统表空间时，可以在启动</h5><h5 id="MySQL服务器的时候这样配置："><a href="#MySQL服务器的时候这样配置：" class="headerlink" title="MySQL服务器的时候这样配置："></a>MySQL服务器的时候这样配置：</h5><h5 id="默认情况："><a href="#默认情况：" class="headerlink" title="默认情况："></a>默认情况：</h5><h5 id="④-其他类型的表空间"><a href="#④-其他类型的表空间" class="headerlink" title="④ 其他类型的表空间"></a>④ 其他类型的表空间</h5><h5 id="随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用"><a href="#随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用" class="headerlink" title="随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用"></a>随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用</h5><h5 id="表空间（general-tablespace）、临时表空间（temporary-tablespace）等。"><a href="#表空间（general-tablespace）、临时表空间（temporary-tablespace）等。" class="headerlink" title="表空间（general tablespace）、临时表空间（temporary tablespace）等。"></a>表空间（general tablespace）、临时表空间（temporary tablespace）等。</h5><h4 id="2-3-2-MyISAM存储引擎模式"><a href="#2-3-2-MyISAM存储引擎模式" class="headerlink" title="2. 3. 2 MyISAM存储引擎模式"></a>2. 3. 2 MyISAM存储引擎模式</h4><h5 id="1-表结构-1"><a href="#1-表结构-1" class="headerlink" title="1. 表结构"></a>1. 表结构</h5><h5 id="在存储表结构方面，MyISAM和InnoDB一样，也是在数据目录下对应的数据库子目录下创建了一个专"><a href="#在存储表结构方面，MyISAM和InnoDB一样，也是在数据目录下对应的数据库子目录下创建了一个专" class="headerlink" title="在存储表结构方面，MyISAM和InnoDB一样，也是在数据目录下对应的数据库子目录下创建了一个专"></a>在存储表结构方面，MyISAM和InnoDB一样，也是在数据目录下对应的数据库子目录下创建了一个专</h5><h5 id="门用于描述表结构的文件："><a href="#门用于描述表结构的文件：" class="headerlink" title="门用于描述表结构的文件："></a>门用于描述表结构的文件：</h5><h5 id="2-表中数据和索引-1"><a href="#2-表中数据和索引-1" class="headerlink" title="2. 表中数据和索引"></a>2. 表中数据和索引</h5><h5 id="在MyISAM中的索引全部都是二级索引，该存储引擎的数据和索引是分开存放的。所以在文件系统中也是"><a href="#在MyISAM中的索引全部都是二级索引，该存储引擎的数据和索引是分开存放的。所以在文件系统中也是" class="headerlink" title="在MyISAM中的索引全部都是二级索引，该存储引擎的数据和索引是分开存放的。所以在文件系统中也是"></a>在MyISAM中的索引全部都是二级索引，该存储引擎的数据和索引是分开存放的。所以在文件系统中也是</h5><h5 id="使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如test"><a href="#使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如test" class="headerlink" title="使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如test"></a>使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如test</h5><h5 id="表使用MyISAM存储引擎的话，那么在它所在数据库对应的atguigu目录下会为test表创建这三个文"><a href="#表使用MyISAM存储引擎的话，那么在它所在数据库对应的atguigu目录下会为test表创建这三个文" class="headerlink" title="表使用MyISAM存储引擎的话，那么在它所在数据库对应的atguigu目录下会为test表创建这三个文"></a>表使用MyISAM存储引擎的话，那么在它所在数据库对应的atguigu目录下会为test表创建这三个文</h5><h5 id="件："><a href="#件：" class="headerlink" title="件："></a>件：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表名.ibd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.frm</span><br><span class="line">test.ibd</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_file_per_table=0 # 0：代表使用系统表空间； 1 ：代表使用独立表空间</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;innodb_file_per_table&#x27;;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| innodb_file_per_table | ON |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表名.frm</span><br></pre></td></tr></table></figure>

<h5 id="举例：创建一个MyISAM-表，使用ENGINE-选项显式指定引擎。因为InnoDB是默认引擎。"><a href="#举例：创建一个MyISAM-表，使用ENGINE-选项显式指定引擎。因为InnoDB是默认引擎。" class="headerlink" title="举例：创建一个MyISAM 表，使用ENGINE 选项显式指定引擎。因为InnoDB是默认引擎。"></a>举例：创建一个MyISAM 表，使用ENGINE 选项显式指定引擎。因为InnoDB是默认引擎。</h5><h3 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2. 4 小结"></a>2. 4 小结</h3><h5 id="举例：数据库a，表b。"><a href="#举例：数据库a，表b。" class="headerlink" title="举例：数据库a，表b。"></a>举例：数据库a，表b。</h5><h5 id="1-、如果表b采用InnoDB，data-a中会产生-1-个或者-2-个文件："><a href="#1-、如果表b采用InnoDB，data-a中会产生-1-个或者-2-个文件：" class="headerlink" title="1 、如果表b采用InnoDB，data\a中会产生 1 个或者 2 个文件："></a>1 、如果表b采用InnoDB，data\a中会产生 1 个或者 2 个文件：</h5><h5 id="b-frm-：描述表结构文件，字段长度等"><a href="#b-frm-：描述表结构文件，字段长度等" class="headerlink" title="b.frm ：描述表结构文件，字段长度等"></a>b.frm ：描述表结构文件，字段长度等</h5><h5 id="如果采用系统表空间模式的，数据信息和索引信息都存储在ibdata1中"><a href="#如果采用系统表空间模式的，数据信息和索引信息都存储在ibdata1中" class="headerlink" title="如果采用系统表空间模式的，数据信息和索引信息都存储在ibdata1中"></a>如果采用系统表空间模式的，数据信息和索引信息都存储在ibdata1中</h5><h5 id="如果采用独立表空间存储模式，data-a中还会产生b-ibd文件（存储数据信息和索引信息）"><a href="#如果采用独立表空间存储模式，data-a中还会产生b-ibd文件（存储数据信息和索引信息）" class="headerlink" title="如果采用独立表空间存储模式，data\a中还会产生b.ibd文件（存储数据信息和索引信息）"></a>如果采用独立表空间存储模式，data\a中还会产生b.ibd文件（存储数据信息和索引信息）</h5><h5 id="此外："><a href="#此外：" class="headerlink" title="此外："></a>此外：</h5><h5 id="①-MySQL5-7-中会在data-x2F-a的目录下生成db-opt文件用于保存数据库的相关配置。比如：字符集、比较"><a href="#①-MySQL5-7-中会在data-x2F-a的目录下生成db-opt文件用于保存数据库的相关配置。比如：字符集、比较" class="headerlink" title="① MySQL5.7 中会在data&#x2F;a的目录下生成db.opt文件用于保存数据库的相关配置。比如：字符集、比较"></a>① MySQL5.7 中会在data&#x2F;a的目录下生成db.opt文件用于保存数据库的相关配置。比如：字符集、比较</h5><h5 id="规则。而MySQL8-0不再提供db-opt文件。"><a href="#规则。而MySQL8-0不再提供db-opt文件。" class="headerlink" title="规则。而MySQL8.0不再提供db.opt文件。"></a>规则。而MySQL8.0不再提供db.opt文件。</h5><h5 id="②-MySQL8-0中不再单独提供b-frm，而是合并在b-ibd文件中。"><a href="#②-MySQL8-0中不再单独提供b-frm，而是合并在b-ibd文件中。" class="headerlink" title="② MySQL8.0中不再单独提供b.frm，而是合并在b.ibd文件中。"></a>② MySQL8.0中不再单独提供b.frm，而是合并在b.ibd文件中。</h5><h5 id="2-、如果表b采用MyISAM，data-a中会产生-3-个文件："><a href="#2-、如果表b采用MyISAM，data-a中会产生-3-个文件：" class="headerlink" title="2 、如果表b采用MyISAM，data\a中会产生 3 个文件："></a>2 、如果表b采用MyISAM，data\a中会产生 3 个文件：</h5><h5 id="MySQL5-7-中：b-frm：描述表结构文件，字段长度等。"><a href="#MySQL5-7-中：b-frm：描述表结构文件，字段长度等。" class="headerlink" title="MySQL5.7 中：b.frm：描述表结构文件，字段长度等。"></a>MySQL5.7 中：b.frm：描述表结构文件，字段长度等。</h5><h5 id="MySQL8-0-中-b-xxx-sdi：描述表结构文件，字段长度等"><a href="#MySQL8-0-中-b-xxx-sdi：描述表结构文件，字段长度等" class="headerlink" title="MySQL8.0 中 b.xxx.sdi：描述表结构文件，字段长度等"></a>MySQL8.0 中 b.xxx.sdi：描述表结构文件，字段长度等</h5><h5 id="b-MYD-MYData-：数据信息文件，存储数据信息-如果采用独立表存储模式"><a href="#b-MYD-MYData-：数据信息文件，存储数据信息-如果采用独立表存储模式" class="headerlink" title="b.MYD(MYData)：数据信息文件，存储数据信息(如果采用独立表存储模式)"></a>b.MYD(MYData)：数据信息文件，存储数据信息(如果采用独立表存储模式)</h5><h5 id="b-MYI-MYIndex-：存放索引信息文件"><a href="#b-MYI-MYIndex-：存放索引信息文件" class="headerlink" title="b.MYI(MYIndex)：存放索引信息文件"></a>b.MYI(MYIndex)：存放索引信息文件</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test.frm 存储表结构</span><br><span class="line">test.MYD 存储数据 (MYData)</span><br><span class="line">test.MYI 存储索引 (MYIndex)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `student_myisam` (</span><br><span class="line">`id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` varchar( 64 ) DEFAULT NULL,</span><br><span class="line">`age` int DEFAULT NULL,</span><br><span class="line">`sex` varchar( 2 ) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=MYISAM AUTO_INCREMENT= 0 DEFAULT CHARSET=utf8mb3;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下MySQL的安装与使用</title>
    <url>/2018/11/09/%E6%95%B0%E6%8D%AE%E5%BA%93/Linux%E4%B8%8BMySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Linux下MySQL的安装与使用"><a href="#Linux下MySQL的安装与使用" class="headerlink" title="Linux下MySQL的安装与使用"></a>Linux下MySQL的安装与使用</h1><h2 id="1-安装前说明"><a href="#1-安装前说明" class="headerlink" title="1. 安装前说明"></a>1. 安装前说明</h2><h2 id="1-1-Linux系统及工具的准备"><a href="#1-1-Linux系统及工具的准备" class="headerlink" title="1. 1 Linux系统及工具的准备"></a>1. 1 Linux系统及工具的准备</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装并启动好两台虚拟机：CentOS 7</span><br><span class="line">掌握克隆虚拟机的操作</span><br><span class="line">mac地址</span><br><span class="line">主机名</span><br><span class="line">ip地址</span><br><span class="line">UUID</span><br><span class="line">安装有Xshell 和Xftp等访问CentOS系统的工具</span><br><span class="line">CentOS6和CentOS7在MySQL的使用中的区别</span><br></pre></td></tr></table></figure>

<h2 id="1-2-查看是否安装过MySQL"><a href="#1-2-查看是否安装过MySQL" class="headerlink" title="1. 2 查看是否安装过MySQL"></a>1. 2 查看是否安装过MySQL</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果你是用rpm安装, 检查一下RPM PACKAGE：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">检查mysql service：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果存在mysql-libs的旧版本包，显示如下：</span><br></pre></td></tr></table></figure>

<ol>
<li>防火墙： 6 是iptables， 7 是firewalld</li>
<li>启动服务的命令： 6 是service， 7 是systemctl</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql  # -i 忽略大小写</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果不存在mysql-lib的版本，显示如下：</span><br></pre></td></tr></table></figure>

<h3 id="1-3-MySQL的卸载"><a href="#1-3-MySQL的卸载" class="headerlink" title="1. 3 MySQL的卸载"></a>1. 3 MySQL的卸载</h3><p><strong>1. 关闭 mysql 服务</strong></p>
<p><strong>2. 查看当前 mysql 安装状况</strong></p>
<h5 id="3-卸载上述命令查询出的已安装程序"><a href="#3-卸载上述命令查询出的已安装程序" class="headerlink" title="3. 卸载上述命令查询出的已安装程序"></a>3. 卸载上述命令查询出的已安装程序</h5><p>务必卸载干净，反复执行rpm -qa | grep -i mysql确认是否有卸载残留</p>
<p><strong>4. 删除 mysql 相关文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找相关文件</span><br></pre></td></tr></table></figure>

<h5 id="删除上述命令查找出的相关文件"><a href="#删除上述命令查找出的相关文件" class="headerlink" title="删除上述命令查找出的相关文件"></a>删除上述命令查找出的相关文件</h5><p><strong>5 .删除 my.cnf</strong></p>
<h2 id="2-MySQL的Linux版安装"><a href="#2-MySQL的Linux版安装" class="headerlink" title="2. MySQL的Linux版安装"></a>2. MySQL的Linux版安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 或</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list installed | grep mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove mysql-xxx mysql-xxx mysql-xxx mysqk-xxxx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf xxx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure>

<h3 id="2-1-MySQL的-4-大版本"><a href="#2-1-MySQL的-4-大版本" class="headerlink" title="2. 1 MySQL的 4 大版本"></a>2. 1 MySQL的 4 大版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL Community Server 社区版本 ，开源免费，自由下载，但不提供官方技术支持，适用于</span><br><span class="line">大多数普通用户。</span><br><span class="line">MySQL Enterprise Edition 企业版本 ，需付费，不能在线下载，可以试用 30 天。提供了更多的</span><br><span class="line">功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户。</span><br><span class="line">MySQL Cluster 集群版 ，开源免费。用于架设集群服务器，可将几个MySQL Server封装成一个</span><br><span class="line">Server。需要在社区版或企业版的基础上使用。</span><br><span class="line">MySQL Cluster CGE 高级集群版 ，需付费。</span><br></pre></td></tr></table></figure>

<p>此外，官方还提供了MySQL Workbench（GUITOOL）一款专为MySQL设计的ER&#x2F;数据库建模工具。它是<br>著名的数据库设计工具DBDesigner4的继任者。MySQLWorkbench又分为两个版本，分别是社区版<br>（MySQL Workbench OSS）、商用版（MySQL WorkbenchSE）。</p>
<h3 id="2-2-下载MySQL指定版本"><a href="#2-2-下载MySQL指定版本" class="headerlink" title="2. 2 下载MySQL指定版本"></a>2. 2 下载MySQL指定版本</h3><h5 id="1-下载地址"><a href="#1-下载地址" class="headerlink" title="1. 下载地址"></a>1. 下载地址</h5><p>官网： <strong><a href="https://www.mysql.com/">https://www.mysql.com</a></strong></p>
<p><strong>2. 打开官网，点击DOWNLOADS</strong></p>
<p>然后，点击MySQL Community(GPL) Downloads</p>
<p><strong>3. 点击 MySQL Community Server</strong></p>
<p><strong>4. 在General Availability(GA) Releases中选择适合的版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果安装Windows 系统下MySQL ，推荐下载MSI安装程序；点击Go to Download Page进行下载</span><br><span class="line">即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows下的MySQL安装有两种安装程序</span><br><span class="line">mysql-installer-web-community-8.0.25.0.msi 下载程序大小： 2. 4 M；安装时需要联网安</span><br><span class="line">装组件。</span><br><span class="line">mysql-installer-community-8.0.25.0.msi 下载程序大小： 435. 7 M；安装时离线安装即</span><br><span class="line">可。 推荐。</span><br></pre></td></tr></table></figure>

<p><strong>5. Linux系统下安装MySQL的几种方式</strong></p>
<p><strong>5.1 Linux系统下安装软件的常用三种方式：</strong></p>
<p><strong>方式 1 ：rpm命令</strong></p>
<p>使用rpm命令安装扩展名为”.rpm”的软件包。</p>
<h5 id="安装方式-特点"><a href="#安装方式-特点" class="headerlink" title="安装方式 特点"></a>安装方式 特点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm 安装简单，灵活性差，无法灵活选择版本、升级</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm repository 安装包极小，版本安装简单灵活，升级方便，需要联网安装</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通用二进制包 安装比较复杂，灵活性高，平台通用性好</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">源码包 安装最复杂，时间长，参数设置灵活，性能好</span><br></pre></td></tr></table></figure>

<p>.rpm包的一般格式：</p>
<p><strong>方式 2 ：yum命令</strong></p>
<p>需联网，从互联网获取的yum源，直接使用yum命令安装。</p>
<p><strong>方式 3 ：编译安装源码包</strong></p>
<p>针对tar.gz这样的压缩格式，要用tar命令来解压；如果是其它压缩格式，就使用其它命令。</p>
<p><strong>5. 2 Linux系统下安装MySQL，官方给出多种安装方式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里不能直接选择CentOS 7系统的版本，所以选择与之对应的Red Hat Enterprise Linux</span><br><span class="line">https://downloads.mysql.com/archives/community/直接点Download下载RPM Bundle全量</span><br><span class="line">包。包括了所有下面的组件。不需要一个一个下载了。</span><br></pre></td></tr></table></figure>

<p><strong>6. 下载的tar包，用压缩工具打开</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解压后rpm安装包 （红框为抽取出来的安装包）</span><br></pre></td></tr></table></figure>

<h3 id="2-3-CentOS7下检查MySQL依赖"><a href="#2-3-CentOS7下检查MySQL依赖" class="headerlink" title="2.3 CentOS7下检查MySQL依赖"></a>2.3 CentOS7下检查MySQL依赖</h3><h4 id="1-检查-x2F-tmp临时目录权限（必不可少）"><a href="#1-检查-x2F-tmp临时目录权限（必不可少）" class="headerlink" title="1. 检查&#x2F;tmp临时目录权限（必不可少）"></a>1. 检查&#x2F;tmp临时目录权限（必不可少）</h4><p>由于mysql安装过程中，会通过mysql用户在&#x2F;tmp目录下新建tmp_db文件，所以请给&#x2F;tmp较大的权限。执<br>行 ：</p>
<h4 id="2-安装前，检查依赖"><a href="#2-安装前，检查依赖" class="headerlink" title="2. 安装前，检查依赖"></a>2. 安装前，检查依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果存在libaio包如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果存在net-tools包如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果不存在需要到centos安装盘里进行rpm安装。安装linux如果带图形化界面，这些都是安装好</span><br><span class="line">的。</span><br></pre></td></tr></table></figure>

<h3 id="2-4-CentOS7下MySQL安装过程"><a href="#2-4-CentOS7下MySQL安装过程" class="headerlink" title="2.4 CentOS7下MySQL安装过程"></a>2.4 CentOS7下MySQL安装过程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /tmp</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep libaio</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep net-tools</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep net-tools</span><br></pre></td></tr></table></figure>

<h4 id="1-将安装程序拷贝到-x2F-opt目录下"><a href="#1-将安装程序拷贝到-x2F-opt目录下" class="headerlink" title="1. 将安装程序拷贝到&#x2F;opt目录下"></a>1. 将安装程序拷贝到&#x2F;opt目录下</h4><p>在mysql的安装文件目录下执行：（必须按照顺序执行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意: 如在检查工作时，没有检查mysql依赖环境在安装mysql-community-server会报错</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm 是Redhat Package Manage缩写，通过RPM的管理，用户可以把源代码包装成以rpm为扩展名的</span><br><span class="line">文件形式，易于安装。</span><br></pre></td></tr></table></figure>

<ul>
<li>i, –install 安装软件包</li>
<li>v, –verbose 提供更多的详细信息输出</li>
<li>h, –hash 软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条</li>
</ul>
<h4 id="2-安装过程截图"><a href="#2-安装过程截图" class="headerlink" title="2. 安装过程截图"></a>2. 安装过程截图</h4><h5 id="安装过程中可能的报错信息："><a href="#安装过程中可能的报错信息：" class="headerlink" title="安装过程中可能的报错信息："></a>安装过程中可能的报错信息：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个命令： yum remove mysql-libs 解决，清除之前安装过的依赖即可</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-libs-8.0.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-client-8.0.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-server-8.0.25-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h4 id="3-查看MySQL版本"><a href="#3-查看MySQL版本" class="headerlink" title="3. 查看MySQL版本"></a>3. 查看MySQL版本</h4><p>执行如下命令，如果成功表示安装mysql成功。类似java -version如果打出版本等信息</p>
<p>执行如下命令，查看是否安装成功。需要增加 -i 不用去区分大小写，否则搜索不到。</p>
<h4 id="4-服务的初始化"><a href="#4-服务的初始化" class="headerlink" title="4. 服务的初始化"></a>4. 服务的初始化</h4><p>为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执<br>行下面的命令初始化：</p>
<p>说明： –initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将该密码标记为过<br>期，登录后你需要设置一个新的密码。生成的临时密码会往日志中记录一份。</p>
<p>查看密码：</p>
<p>root@localhost: 后面就是初始化的密码</p>
<h4 id="5-启动MySQL，查看状态"><a href="#5-启动MySQL，查看状态" class="headerlink" title="5. 启动MySQL，查看状态"></a>5. 启动MySQL，查看状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">#或</span><br><span class="line">mysqladmin --version</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --user=mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#加不加.service后缀都可以</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动：systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关闭：systemctl stop mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">重启：systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看状态：systemctl status mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld这个可执行文件就代表着MySQL服务器程序，运行这个可执行文件就可以直接启动一个</span><br><span class="line">服务器进程。</span><br></pre></td></tr></table></figure>

<h5 id="查看进程："><a href="#查看进程：" class="headerlink" title="查看进程："></a>查看进程：</h5><h4 id="6-查看MySQL服务是否自启动"><a href="#6-查看MySQL服务是否自启动" class="headerlink" title="6. 查看MySQL服务是否自启动"></a>6. 查看MySQL服务是否自启动</h4><p>默认是enabled。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如不是enabled可以运行如下命令设置自启动</span><br></pre></td></tr></table></figure>

<h5 id="如果希望不进行自启动，运行如下命令设置"><a href="#如果希望不进行自启动，运行如下命令设置" class="headerlink" title="如果希望不进行自启动，运行如下命令设置"></a>如果希望不进行自启动，运行如下命令设置</h5><h2 id="3-MySQL登录"><a href="#3-MySQL登录" class="headerlink" title="3. MySQL登录"></a>3. MySQL登录</h2><h3 id="3-1-首次登录"><a href="#3-1-首次登录" class="headerlink" title="3. 1 首次登录"></a>3. 1 首次登录</h3><p>通过 mysql -hlocalhost -P3306 -uroot -p进行登录，在Enter password：录入初始化密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -i mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files|grep mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl disable mysqld.service</span><br></pre></td></tr></table></figure>

<h3 id="3-2-修改密码"><a href="#3-2-修改密码" class="headerlink" title="3. 2 修改密码"></a>3. 2 修改密码</h3><h5 id="因为初始化密码默认是过期的，所以查看数据库会报错"><a href="#因为初始化密码默认是过期的，所以查看数据库会报错" class="headerlink" title="因为初始化密码默认是过期的，所以查看数据库会报错"></a>因为初始化密码默认是过期的，所以查看数据库会报错</h5><h5 id="修改密码："><a href="#修改密码：" class="headerlink" title="修改密码："></a>修改密码：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5.7版本之后（不含5.7），mysql加入了全新的密码安全机制。设置新密码太简单会报错。</span><br></pre></td></tr></table></figure>

<h5 id="改为更复杂的密码规则之后，设置成功，可以正常使用数据库了"><a href="#改为更复杂的密码规则之后，设置成功，可以正常使用数据库了" class="headerlink" title="改为更复杂的密码规则之后，设置成功，可以正常使用数据库了"></a>改为更复杂的密码规则之后，设置成功，可以正常使用数据库了</h5><h3 id="3-3-设置远程登录"><a href="#3-3-设置远程登录" class="headerlink" title="3. 3 设置远程登录"></a>3. 3 设置远程登录</h3><h4 id="1-当前问题"><a href="#1-当前问题" class="headerlink" title="1. 当前问题"></a>1. 当前问题</h4><p>在用SQLyog或Navicat中配置远程连接Mysql数据库时遇到如下报错信息，这是由于Mysql配置了不支持远<br>程连接引起的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="2-确认网络"><a href="#2-确认网络" class="headerlink" title="2. 确认网络"></a>2. 确认网络</h4><p>1.在远程机器上使用ping ip地址保证网络畅通</p>
<p>2.在远程机器上使用telnet命令保证端口号开放访问</p>
<p>拓展：telnet命令开启:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip地址 端口号</span><br></pre></td></tr></table></figure>

<h4 id="3-关闭防火墙或开放端口"><a href="#3-关闭防火墙或开放端口" class="headerlink" title="3. 关闭防火墙或开放端口"></a>3. 关闭防火墙或开放端口</h4><h5 id="方式一：关闭防火墙"><a href="#方式一：关闭防火墙" class="headerlink" title="方式一：关闭防火墙"></a>方式一：关闭防火墙</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CentOS6 ：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CentOS7：</span><br></pre></td></tr></table></figure>

<h5 id="方式二：开放端口"><a href="#方式二：开放端口" class="headerlink" title="方式二：开放端口"></a>方式二：开放端口</h5><h5 id="查看开放的端口号"><a href="#查看开放的端口号" class="headerlink" title="查看开放的端口号"></a>查看开放的端口号</h5><h5 id="设置开放的端口号"><a href="#设置开放的端口号" class="headerlink" title="设置开放的端口号"></a>设置开放的端口号</h5><h5 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置开机启用防火墙</span><br><span class="line">systemctl enable firewalld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置开机禁用防火墙</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=http --permanent</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port= 3306 /tcp --permanent</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="4-Linux下修改配置"><a href="#4-Linux下修改配置" class="headerlink" title="4. Linux下修改配置"></a>4. Linux下修改配置</h4><p>在Linux系统MySQL下测试：</p>
<p>可以看到root用户的当前主机配置信息为localhost。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改Host为通配符%</span><br></pre></td></tr></table></figure>

<p>Host列指定了允许用户登录所使用的IP，比如user&#x3D;root Host&#x3D;192.168.1.1。这里的意思就是说root用户只<br>能通过192.168.1.1的客户端去访问。 user&#x3D;root Host&#x3D;localhost，表示只能通过本机客户端去访问。而%<br>是个通配符，如果Host&#x3D;192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连<br>接。如果Host&#x3D;%，表示所有IP都有连接权限。</p>
<p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产<br>环境的IP进行设置。</p>
<p>Host设置了“%”后便可以允许远程访问。</p>
<p>Host修改完成后记得执行flush privileges使配置立即生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select Host,User from user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果是 MySQL5.7 版本，接下来就可以使用SQLyog或者Navicat成功连接至MySQL了。</span><br><span class="line">如果是 MySQL8 版本，连接时还会出现如下问题：</span><br></pre></td></tr></table></figure>

<p>配置新连接报错：错误号码 2058 ，分析是 mysql 密码加密方法变了。</p>
<p><strong>解决方法：</strong> Linux下 mysql -u root -p 登录你的 mysql 数据库，然后 执行这条SQL：</p>
<p>然后在重新配置SQLyog的连接，则可连接成功了，OK。</p>
<h2 id="4-MySQL-8-的密码强度评估（了解）"><a href="#4-MySQL-8-的密码强度评估（了解）" class="headerlink" title="4. MySQL 8 的密码强度评估（了解）"></a>4. MySQL 8 的密码强度评估（了解）</h2><h3 id="4-1-MySQL不同版本设置密码-可能出现"><a href="#4-1-MySQL不同版本设置密码-可能出现" class="headerlink" title="4. 1 MySQL不同版本设置密码(可能出现)"></a>4. 1 MySQL不同版本设置密码(可能出现)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL5.7中：成功</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL8.0中：失败</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;abc123&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27; identified by &#x27;abcd1234&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27; identified by &#x27;abcd1234&#x27;; # HelloWorld_</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br></pre></td></tr></table></figure>

<h3 id="4-2-MySQL-8-之前的安全策略"><a href="#4-2-MySQL-8-之前的安全策略" class="headerlink" title="4. 2 MySQL 8 之前的安全策略"></a>4. 2 MySQL 8 之前的安全策略</h3><p>在MySQL 8.0之前，MySQL使用的是validate_password插件检测、验证账号密码强度，保障账号的安全<br>性。</p>
<p><strong>安装&#x2F;启用插件方式 1 ：在参数文件my.cnf中添加参数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">说明 1 ： plugin library中的validate_password文件名的后缀名根据平台不同有所差异。 对于Unix和</span><br><span class="line">Unix-like系统而言，它的文件后缀名是.so，对于Windows系统而言，它的文件后缀名是.dll。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">说明 2 ： 修改参数后必须重启MySQL服务才能生效。</span><br><span class="line">说明 3 ： 参数FORCE_PLUS_PERMANENT是为了防止插件在MySQL运行时的时候被卸载。当你卸载插</span><br><span class="line">件时就会报错。如下所示。</span><br></pre></td></tr></table></figure>

<h5 id="安装-x2F-启用插件方式-2-：运行时命令安装-（推荐）"><a href="#安装-x2F-启用插件方式-2-：运行时命令安装-（推荐）" class="headerlink" title="安装&#x2F;启用插件方式 2 ：运行时命令安装 （推荐）"></a>安装&#x2F;启用插件方式 2 ：运行时命令安装 （推荐）</h5><p>此方法也会注册到元数据，也就是mysql.plugin表中，所以不用担心MySQL重启后插件会失效。</p>
<h3 id="4-3-MySQL-8-的安全策略"><a href="#4-3-MySQL-8-的安全策略" class="headerlink" title="4. 3 MySQL 8 的安全策略"></a>4. 3 MySQL 8 的安全策略</h3><p><strong>1. validate_password说明</strong></p>
<p>MySQL 8.0，引入了服务器组件（Components）这个特性，validate_password插件已用服务器组件重新实<br>现。8.0.25版本的数据库中，默认自动安装validate_password组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未安装插件前，执行如下两个指令，执行效果：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin-load-add=validate_password.so</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\#ON/OFF/FORCE/FORCE_PLUS_PERMANENT: 是否使用该插件(及强制/永久强制使用)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate-password=FORCE_PLUS_PERMANENT</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT PLUGIN_NAME, PLUGIN_LIBRARY, PLUGIN_STATUS, LOAD_OPTION</span><br><span class="line">-&gt; FROM INFORMATION_SCHEMA.PLUGINS</span><br><span class="line">-&gt; WHERE PLUGIN_NAME = &#x27;validate_password&#x27;;</span><br><span class="line">+-------------------+----------------------+---------------+----------------------+</span><br><span class="line">| PLUGIN_NAME | PLUGIN_LIBRARY | PLUGIN_STATUS | LOAD_OPTION |</span><br><span class="line">+-------------------+----------------------+---------------+----------------------+</span><br><span class="line">| validate_password | validate_password.so | ACTIVE | FORCE_PLUS_PERMANENT |</span><br><span class="line">+-------------------+----------------------+---------------+----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;  UNINSTALL PLUGIN validate_password;</span><br><span class="line">ERROR 1702 (HY000): Plugin &#x27;validate_password&#x27; is force_plus_permanent and can not be</span><br><span class="line">unloaded</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSTALL PLUGIN validate_password SONAME &#x27;validate_password.so&#x27;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.11 sec)</span><br></pre></td></tr></table></figure>

<h5 id="安装插件后，执行如下两个指令，执行效果："><a href="#安装插件后，执行如下两个指令，执行效果：" class="headerlink" title="安装插件后，执行如下两个指令，执行效果："></a>安装插件后，执行如下两个指令，执行效果：</h5><p>关于validate_password组件对应的系统变量说明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;validate_password%&#x27;;</span><br><span class="line">Empty set (0.04 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM mysql.component;</span><br><span class="line">ERROR 1146 ( 42 S02): Table &#x27;mysql.component&#x27; doesn&#x27;t exist</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM mysql.component;</span><br><span class="line">+--------------+--------------------+------------------------------------+</span><br><span class="line">| component_id | component_group_id | component_urn |</span><br><span class="line">+--------------+--------------------+------------------------------------+</span><br><span class="line">| 1 | 1 | file://component_validate_password |</span><br><span class="line">+--------------+--------------------+------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;validate_password%&#x27;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password.check_user_name | ON |</span><br><span class="line">| validate_password.dictionary_file | |</span><br><span class="line">| validate_password.length | 8 |</span><br><span class="line">| validate_password.mixed_case_count | 1 |</span><br><span class="line">| validate_password.number_count | 1 |</span><br><span class="line">| validate_password.policy | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 1 |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="选项-默认值-参数描述"><a href="#选项-默认值-参数描述" class="headerlink" title="选项 默认值 参数描述"></a>选项 默认值 参数描述</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_check_user_name ON 设置为ON的时候表示能将密码设置成当前</span><br><span class="line">用户名。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_dictionary_file</span><br></pre></td></tr></table></figure>

<h5 id="用于检查密码的字典文件的路径名，默认为"><a href="#用于检查密码的字典文件的路径名，默认为" class="headerlink" title="用于检查密码的字典文件的路径名，默认为"></a>用于检查密码的字典文件的路径名，默认为</h5><h5 id="空"><a href="#空" class="headerlink" title="空"></a>空</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_length 8</span><br></pre></td></tr></table></figure>

<h5 id="密码的最小长度，也就是说密码长度必须大"><a href="#密码的最小长度，也就是说密码长度必须大" class="headerlink" title="密码的最小长度，也就是说密码长度必须大"></a>密码的最小长度，也就是说密码长度必须大</h5><h5 id="于或等于-8"><a href="#于或等于-8" class="headerlink" title="于或等于 8"></a>于或等于 8</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_mixed_case_count 1</span><br></pre></td></tr></table></figure>

<h5 id="如果密码策略是中等或更强的，"><a href="#如果密码策略是中等或更强的，" class="headerlink" title="如果密码策略是中等或更强的，"></a>如果密码策略是中等或更强的，</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password要求密码具有的小写和大</span><br><span class="line">写字符的最小数量。对于给定的这个值密码</span><br><span class="line">必须有那么多小写字符和那么多大写字符。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_number_count 1 密码必须包含的数字个数</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_policy MEDIUM</span><br></pre></td></tr></table></figure>

<h5 id="密码强度检验等级，可以使用数值-0-、-1-、-2"><a href="#密码强度检验等级，可以使用数值-0-、-1-、-2" class="headerlink" title="密码强度检验等级，可以使用数值 0 、 1 、 2"></a>密码强度检验等级，可以使用数值 0 、 1 、 2</h5><h5 id="或相应的符号值LOW、MEDIUM、STRONG来"><a href="#或相应的符号值LOW、MEDIUM、STRONG来" class="headerlink" title="或相应的符号值LOW、MEDIUM、STRONG来"></a>或相应的符号值LOW、MEDIUM、STRONG来</h5><h5 id="指定。0-x2F-LOW：只检查长度。"><a href="#指定。0-x2F-LOW：只检查长度。" class="headerlink" title="指定。0&#x2F;LOW：只检查长度。"></a>指定。0&#x2F;LOW：只检查长度。</h5><h5 id="1-x2F-MEDIUM：检查长度、数字、大小写、特"><a href="#1-x2F-MEDIUM：检查长度、数字、大小写、特" class="headerlink" title="1&#x2F;MEDIUM：检查长度、数字、大小写、特"></a>1&#x2F;MEDIUM：检查长度、数字、大小写、特</h5><h5 id="殊字符。2-x2F-STRONG：检查长度、数字、大"><a href="#殊字符。2-x2F-STRONG：检查长度、数字、大" class="headerlink" title="殊字符。2&#x2F;STRONG：检查长度、数字、大"></a>殊字符。2&#x2F;STRONG：检查长度、数字、大</h5><h5 id="小写、特殊字符、字典文件。"><a href="#小写、特殊字符、字典文件。" class="headerlink" title="小写、特殊字符、字典文件。"></a>小写、特殊字符、字典文件。</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">validate_password_special_char_count 1 密码必须包含的特殊字符个数</span><br></pre></td></tr></table></figure>

<h5 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">组件和插件的默认值可能有所不同。例如，MySQL 5.7. validate_password_check_user_name的默认</span><br><span class="line">值为OFF。</span><br></pre></td></tr></table></figure>

<p><strong>2. 修改安全策略</strong></p>
<p>修改密码验证安全强度</p>
<h5 id="此外，还可以修改密码中字符的长度"><a href="#此外，还可以修改密码中字符的长度" class="headerlink" title="此外，还可以修改密码中字符的长度"></a>此外，还可以修改密码中字符的长度</h5><h5 id="3-密码强度测试"><a href="#3-密码强度测试" class="headerlink" title="3. 密码强度测试"></a>3. 密码强度测试</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL validate_password_policy=LOW;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL validate_password_policy=MEDIUM;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL validate_password_policy=STRONG;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL validate_password_policy= 0 ;  # For LOW</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL validate_password_policy= 1 ;  # For MEDIUM</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL validate_password_policy= 2 ;  # For HIGH</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#注意，如果是插件的话,SQL为set global validate_password_policy=LOW</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global validate_password_length= 1 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Password Test Return Value</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Length &lt; 4 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Length ≥ 4 and &lt; validate_password.length 25</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Satisfies policy 1 (LOW) 50</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Satisfies policy 2 (MEDIUM) 75</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Satisfies policy 3 (STRONG) 100</span><br></pre></td></tr></table></figure>

<p>如果你创建密码是遇到“Your password does not satisfy the current policy requirements”，可以通过函数组<br>件去检测密码是否满足条件： 0-100。当评估在 100 时就是说明使用上了最基本的规则：大写+小写+特殊<br>字符+数字组成的 8 位以上密码</p>
<p>注意：如果没有安装validate_password组件或插件的话，那么这个函数永远都返回 0 。 关于密码复杂度对<br>应的密码复杂度策略。如下表格所示：</p>
<h3 id="4-4-卸载插件、组件-了解"><a href="#4-4-卸载插件、组件-了解" class="headerlink" title="4. 4 卸载插件、组件(了解)"></a>4. 4 卸载插件、组件(了解)</h3><h5 id="卸载插件"><a href="#卸载插件" class="headerlink" title="卸载插件"></a>卸载插件</h5><h5 id="卸载组件"><a href="#卸载组件" class="headerlink" title="卸载组件"></a>卸载组件</h5><h2 id="5-字符集的相关操作"><a href="#5-字符集的相关操作" class="headerlink" title="5. 字符集的相关操作"></a>5. 字符集的相关操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;  SELECT VALIDATE_PASSWORD_STRENGTH(&#x27;medium&#x27;);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| VALIDATE_PASSWORD_STRENGTH(&#x27;medium&#x27;) |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| 25 |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT VALIDATE_PASSWORD_STRENGTH(&#x27;K354*45jKd5&#x27;);</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| VALIDATE_PASSWORD_STRENGTH(&#x27;K354*45jKd5&#x27;) |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">| 100 |</span><br><span class="line">+-------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UNINSTALL PLUGIN validate_password;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UNINSTALL COMPONENT &#x27;file://component_validate_password&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure>

<h3 id="5-1-修改MySQL-5-7-字符集"><a href="#5-1-修改MySQL-5-7-字符集" class="headerlink" title="5. 1 修改MySQL 5. 7 字符集"></a>5. 1 修改MySQL 5. 7 字符集</h3><h4 id="1-修改步骤"><a href="#1-修改步骤" class="headerlink" title="1. 修改步骤"></a>1. 修改步骤</h4><p>在MySQL 8. 0 版本之前，默认字符集为latin1，utf 8 字符集指向的是utf8mb3。网站开发人员在数据库<br>设计的时候往往会将编码修改为utf 8 字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL<br>8. 0 开始，数据库的默认编码将改为utf8mb4，从而避免上述乱码的问题。</p>
<p><strong>操作 1 ：查看默认使用的字符集</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL 8. 0 中执行：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL 5. 7 中执行：</span><br></pre></td></tr></table></figure>

<p>MySQL 5. 7 默认的客户端和服务器都用了latin1，不支持中文，保存中文会报错。MySQL 5. 7 截图如<br>下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 或者</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%char%&#x27;;</span><br></pre></td></tr></table></figure>

<p>在MySQL 5. 7 中添加中文数据时，报错：</p>
<p>因为默认情况下，创建表使用的是latin1。如下：</p>
<h5 id="操作-2-：修改字符集"><a href="#操作-2-：修改字符集" class="headerlink" title="操作 2 ：修改字符集"></a>操作 2 ：修改字符集</h5><p>在MySQL 5. 7 或之前的版本中，在文件最后加上中文字符集配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_server=utf</span><br></pre></td></tr></table></figure>

<p><strong>操作 3 ：重新启动MySQL服务</strong></p>
<h5 id="但是原库、原表的设定不会发生变化，参数修改只对新建的数据库生效。"><a href="#但是原库、原表的设定不会发生变化，参数修改只对新建的数据库生效。" class="headerlink" title="但是原库、原表的设定不会发生变化，参数修改只对新建的数据库生效。"></a>但是原库、原表的设定不会发生变化，参数修改只对新建的数据库生效。</h5><h4 id="2-已有库-amp-表字符集的变更"><a href="#2-已有库-amp-表字符集的变更" class="headerlink" title="2. 已有库&amp;表字符集的变更"></a>2. 已有库&amp;表字符集的变更</h4><p>MySQL 5. 7 版本中，以前创建的库，创建的表字符集还是latin 1 。</p>
<h5 id="修改已创建数据库的字符集"><a href="#修改已创建数据库的字符集" class="headerlink" title="修改已创建数据库的字符集"></a>修改已创建数据库的字符集</h5><h5 id="修改已创建数据表的字符集"><a href="#修改已创建数据表的字符集" class="headerlink" title="修改已创建数据表的字符集"></a>修改已创建数据表的字符集</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database dbtest1 character set &#x27;utf8&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table t_emp convert to character set &#x27;utf8&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：但是原有的数据如果是用非&#x27;utf 8 &#x27;编码的话，数据本身编码不会发生改变。已有数据需要导</span><br><span class="line">出或删除，然后重新插入。</span><br></pre></td></tr></table></figure>

<h3 id="5-2-各级别的字符集"><a href="#5-2-各级别的字符集" class="headerlink" title="5. 2 各级别的字符集"></a>5. 2 各级别的字符集</h3><p>MySQL有 4 个级别的字符集和比较规则，分别是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器级别</span><br><span class="line">数据库级别</span><br><span class="line">表级别</span><br><span class="line">列级别</span><br></pre></td></tr></table></figure>

<p>执行如下SQL语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_server：服务器级别的字符集</span><br><span class="line">character_set_database：当前数据库的字符集</span><br><span class="line">character_set_client：服务器解码请求时使用的字符集</span><br><span class="line">character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为</span><br><span class="line">character_set_connection</span><br><span class="line">character_set_results：服务器向客户端返回数据时使用的字符集</span><br></pre></td></tr></table></figure>

<h4 id="1-服务器级别"><a href="#1-服务器级别" class="headerlink" title="1. 服务器级别"></a>1. 服务器级别</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_server：服务器级别的字符集。</span><br></pre></td></tr></table></figure>

<p>我们可以在启动服务器程序时通过启动选项或者在服务器程序运行过程中使用SET语句修改这两个变量<br>的值。比如我们可以在配置文件中这样写：</p>
<h5 id="当服务器启动的时候读取这个配置文件后这两个系统变量的值便修改了。"><a href="#当服务器启动的时候读取这个配置文件后这两个系统变量的值便修改了。" class="headerlink" title="当服务器启动的时候读取这个配置文件后这两个系统变量的值便修改了。"></a>当服务器启动的时候读取这个配置文件后这两个系统变量的值便修改了。</h5><h4 id="2-数据库级别"><a href="#2-数据库级别" class="headerlink" title="2. 数据库级别"></a>2. 数据库级别</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_database：当前数据库的字符集</span><br></pre></td></tr></table></figure>

<p>我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则，具体语法如下：</p>
<h4 id="3-表级别"><a href="#3-表级别" class="headerlink" title="3. 表级别"></a>3. 表级别</h4><h5 id="我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下："><a href="#我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：" class="headerlink" title="我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下："></a>我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">character_set_server=gbk  # 默认字符集</span><br><span class="line">collation_server=gbk_chinese_ci  #对应的默认的比较规则</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名</span><br><span class="line">[[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class="line">[[DEFAULT] COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE 数据库名</span><br><span class="line">[[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class="line">[[DEFAULT] COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>

<h5 id="如果创建和修改表的语句中没有指明字符集和比较规则，将使用该表所在数据库的字符集和比较规则作"><a href="#如果创建和修改表的语句中没有指明字符集和比较规则，将使用该表所在数据库的字符集和比较规则作" class="headerlink" title="如果创建和修改表的语句中没有指明字符集和比较规则，将使用该表所在数据库的字符集和比较规则作"></a>如果创建和修改表的语句中没有指明字符集和比较规则，将使用该表所在数据库的字符集和比较规则作</h5><h5 id="为该表的字符集和比较规则。"><a href="#为该表的字符集和比较规则。" class="headerlink" title="为该表的字符集和比较规则。"></a>为该表的字符集和比较规则。</h5><h4 id="4-列级别"><a href="#4-列级别" class="headerlink" title="4. 列级别"></a>4. 列级别</h4><h5 id="对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列"><a href="#对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列" class="headerlink" title="对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列"></a>对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列</h5><h5 id="定义的时候可以指定该列的字符集和比较规则，语法如下："><a href="#定义的时候可以指定该列的字符集和比较规则，语法如下：" class="headerlink" title="定义的时候可以指定该列的字符集和比较规则，语法如下："></a>定义的时候可以指定该列的字符集和比较规则，语法如下：</h5><h5 id="对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集"><a href="#对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集" class="headerlink" title="对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集"></a>对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集</h5><h5 id="和比较规则作为该列的字符集和比较规则。"><a href="#和比较规则作为该列的字符集和比较规则。" class="headerlink" title="和比较规则作为该列的字符集和比较规则。"></a>和比较规则作为该列的字符集和比较规则。</h5><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><h5 id="在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示会发生"><a href="#在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示会发生" class="headerlink" title="在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示会发生"></a>在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示会发生</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误。比方说原先列使用的字符集是utf 8 ，列中存储了一些汉字，现在把列的字符集转换为ascii的</span><br><span class="line">话就会出错，因为ascii字符集并不能表示汉字字符。</span><br></pre></td></tr></table></figure>

<h4 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h4><h5 id="我们介绍的这-4-个级别字符集和比较规则的联系如下："><a href="#我们介绍的这-4-个级别字符集和比较规则的联系如下：" class="headerlink" title="我们介绍的这 4 个级别字符集和比较规则的联系如下："></a>我们介绍的这 4 个级别字符集和比较规则的联系如下：</h5><h5 id="如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则"><a href="#如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则" class="headerlink" title="如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则"></a>如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则</h5><h5 id="如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则"><a href="#如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则" class="headerlink" title="如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则"></a>如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则</h5><h5 id="如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规"><a href="#如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规" class="headerlink" title="如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规"></a>如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规</h5><h5 id="则"><a href="#则" class="headerlink" title="则"></a>则</h5><h5 id="知道了这些规则之后，对于给定的表，我们应该知道它的各个列的字符集和比较规则是什么，从而根据"><a href="#知道了这些规则之后，对于给定的表，我们应该知道它的各个列的字符集和比较规则是什么，从而根据" class="headerlink" title="知道了这些规则之后，对于给定的表，我们应该知道它的各个列的字符集和比较规则是什么，从而根据"></a>知道了这些规则之后，对于给定的表，我们应该知道它的各个列的字符集和比较规则是什么，从而根据</h5><p>这个列的类型来确定存储数据时每个列的实际数据占用的存储空间大小了。比方说我们向表t中插入一<br>条记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名 (列的信息)</span><br><span class="line">[[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class="line">[COLLATE 比较规则名称]]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">[[DEFAULT] CHARACTER SET 字符集名称]</span><br><span class="line">[COLLATE 比较规则名称]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],</span><br><span class="line">其他列...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t(col) VALUES(&#x27;我们&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM t;</span><br><span class="line">+--------+</span><br><span class="line">| s |</span><br><span class="line">+--------+</span><br><span class="line">| 我们 |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="后缀-英文释义-描述"><a href="#后缀-英文释义-描述" class="headerlink" title="后缀 英文释义 描述"></a>后缀 英文释义 描述</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_ai accent insensitive 不区分重音</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_as accent sensitive 区分重音</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_ci case insensitive 不区分大小写</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_cs case sensitive 区分大小写</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_bin binary 以二进制方式比较</span><br></pre></td></tr></table></figure>

<p>首先列col使用的字符集是gbk，一个字符’我’在gbk中的编码为0xCED2，占用两个字节，两个字<br>符的实际数据就占用 4 个字节。如果把该列的字符集修改为utf8的话，这两个字符就实际占用 6 个字节</p>
<h3 id="5-3-字符集与比较规则-了解"><a href="#5-3-字符集与比较规则-了解" class="headerlink" title="5. 3 字符集与比较规则(了解)"></a>5. 3 字符集与比较规则(了解)</h3><h4 id="1-utf-8-与-utf-8-mb-4"><a href="#1-utf-8-与-utf-8-mb-4" class="headerlink" title="1. utf 8 与 utf 8 mb 4"></a>1. utf 8 与 utf 8 mb 4</h4><p>utf8字符集表示一个字符需要使用 1 ～ 4 个字节，但是我们常用的一些字符使用 1 ～ 3 个字节就可以表示<br>了。而字符集表示一个字符所用的最大字节长度，在某些方面会影响系统的存储和性能，所以设计<br>MySQL的设计者偷偷的定义了两个概念：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">utf8mb3：阉割过的utf8字符集，只使用 1 ～ 3 个字节表示字符。</span><br><span class="line">utf8mb4：正宗的utf8字符集，使用 1 ～ 4 个字节表示字符。</span><br></pre></td></tr></table></figure>

<h4 id="2-比较规则"><a href="#2-比较规则" class="headerlink" title="2. 比较规则"></a>2. 比较规则</h4><p>上表中，MySQL版本一共支持 41 种字符集，其中的Default collation列表示这种字符集中一种默认<br>的比较规则，里面包含着该比较规则主要作用于哪种语言，比如utf8_polish_ci表示以波兰语的规则<br>比较，utf8_spanish_ci是以西班牙语的规则比较，utf8_general_ci是一种通用的比较规则。</p>
<p>后缀表示该比较规则是否区分语言中的重音、大小写。具体如下：</p>
<p>最后一列Maxlen，它代表该种字符集表示一个字符最多需要几个字节。</p>
<p><strong>常用操作 1 ：</strong></p>
<h5 id="常用操作-2-："><a href="#常用操作-2-：" class="headerlink" title="常用操作 2 ："></a>常用操作 2 ：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看GBK字符集的比较规则</span><br><span class="line">SHOW COLLATION LIKE &#x27;gbk%&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看UTF-8字符集的比较规则</span><br><span class="line">SHOW COLLATION LIKE &#x27;utf8%&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看服务器的字符集和比较规则</span><br><span class="line">SHOW VARIABLES LIKE &#x27;%_server&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看数据库的字符集和比较规则</span><br><span class="line">SHOW VARIABLES LIKE &#x27;%_database&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看具体数据库的字符集</span><br><span class="line">SHOW CREATE DATABASE dbtest1;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改具体数据库的字符集</span><br><span class="line">ALTER DATABASE dbtest1 DEFAULT CHARACTER SET &#x27;utf8&#x27; COLLATE &#x27;utf8_general_ci&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="系统变量-描述"><a href="#系统变量-描述" class="headerlink" title="系统变量 描述"></a>系统变量 描述</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_client 服务器解码请求时使用的字符集</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_connection</span><br></pre></td></tr></table></figure>

<h5 id="服务器处理请求时会把请求字符串从"><a href="#服务器处理请求时会把请求字符串从" class="headerlink" title="服务器处理请求时会把请求字符串从"></a>服务器处理请求时会把请求字符串从</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_client转为character_set_connection</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_results 服务器向客户端返回数据时使用的字符集</span><br></pre></td></tr></table></figure>

<h5 id="常用操作-3-："><a href="#常用操作-3-：" class="headerlink" title="常用操作 3 ："></a>常用操作 3 ：</h5><h3 id="5-4-请求到响应过程中字符集的变化"><a href="#5-4-请求到响应过程中字符集的变化" class="headerlink" title="5. 4 请求到响应过程中字符集的变化"></a>5. 4 请求到响应过程中字符集的变化</h3><h5 id="这几个系统变量在我的计算机上的默认值如下（不同操作系统的默认值可能不同）："><a href="#这几个系统变量在我的计算机上的默认值如下（不同操作系统的默认值可能不同）：" class="headerlink" title="这几个系统变量在我的计算机上的默认值如下（不同操作系统的默认值可能不同）："></a>这几个系统变量在我的计算机上的默认值如下（不同操作系统的默认值可能不同）：</h5><h5 id="为了体现出字符集在请求处理过程中的变化，我们这里特意修改一个系统变量的值："><a href="#为了体现出字符集在请求处理过程中的变化，我们这里特意修改一个系统变量的值：" class="headerlink" title="为了体现出字符集在请求处理过程中的变化，我们这里特意修改一个系统变量的值："></a>为了体现出字符集在请求处理过程中的变化，我们这里特意修改一个系统变量的值：</h5><h5 id="现在假设我们客户端发送的请求是下边这个字符串："><a href="#现在假设我们客户端发送的请求是下边这个字符串：" class="headerlink" title="现在假设我们客户端发送的请求是下边这个字符串："></a>现在假设我们客户端发送的请求是下边这个字符串：</h5><h5 id="为了方便大家理解这个过程，我们只分析字符’我’在这个过程中字符集的转换。"><a href="#为了方便大家理解这个过程，我们只分析字符’我’在这个过程中字符集的转换。" class="headerlink" title="为了方便大家理解这个过程，我们只分析字符’我’在这个过程中字符集的转换。"></a>为了方便大家理解这个过程，我们只分析字符’我’在这个过程中字符集的转换。</h5><h5 id="现在看一下在请求从发送到结果返回过程中字符集的变化："><a href="#现在看一下在请求从发送到结果返回过程中字符集的变化：" class="headerlink" title="现在看一下在请求从发送到结果返回过程中字符集的变化："></a>现在看一下在请求从发送到结果返回过程中字符集的变化：</h5><h5 id="1-客户端发送请求所使用的字符集"><a href="#1-客户端发送请求所使用的字符集" class="headerlink" title="1. 客户端发送请求所使用的字符集"></a>1. 客户端发送请求所使用的字符集</h5><h5 id="一般情况下客户端所使用的字符集和当前操作系统一致，不同操作系统使用的字符集可能不一"><a href="#一般情况下客户端所使用的字符集和当前操作系统一致，不同操作系统使用的字符集可能不一" class="headerlink" title="一般情况下客户端所使用的字符集和当前操作系统一致，不同操作系统使用的字符集可能不一"></a>一般情况下客户端所使用的字符集和当前操作系统一致，不同操作系统使用的字符集可能不一</h5><h5 id="样，如下："><a href="#样，如下：" class="headerlink" title="样，如下："></a>样，如下：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看表的字符集</span><br><span class="line">show create table employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看表的比较规则</span><br><span class="line">show table status from atguigudb like &#x27;employees&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改表的字符集和比较规则</span><br><span class="line">ALTER TABLE emp1 DEFAULT CHARACTER SET &#x27;utf8&#x27; COLLATE &#x27;utf8_general_ci&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set character_set_connection = gbk;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t WHERE s = &#x27;我&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类Unix系统使用的是utf8</span><br><span class="line">Windows使用的是gbk</span><br><span class="line">当客户端使用的是utf8字符集，字符&#x27;我&#x27;在发送给服务器的请求中的字节形式就是：</span><br><span class="line">0xE68891</span><br></pre></td></tr></table></figure>

<h5 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果你使用的是可视化工具，比如navicat之类的，这些工具可能会使用自定义的字符集来编</span><br><span class="line">码发送到服务器的字符串，而不采用操作系统默认的字符集（所以在学习的时候还是尽量用</span><br><span class="line">命令行窗口）。</span><br></pre></td></tr></table></figure>

<h5 id="2-服务器接收到客户端发送来的请求其实是一串二进制的字节，它会认为这串字节采用的字符集是"><a href="#2-服务器接收到客户端发送来的请求其实是一串二进制的字节，它会认为这串字节采用的字符集是" class="headerlink" title="2. 服务器接收到客户端发送来的请求其实是一串二进制的字节，它会认为这串字节采用的字符集是"></a>2. 服务器接收到客户端发送来的请求其实是一串二进制的字节，它会认为这串字节采用的字符集是</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_client，然后把这串字节转换为character_set_connection字符集编码的</span><br><span class="line">字符。</span><br><span class="line">由于我的计算机上character_set_client的值是utf8，首先会按照utf8字符集对字节串</span><br><span class="line">0xE68891进行解码，得到的字符串就是&#x27;我&#x27;，然后按照character_set_connection代表的</span><br><span class="line">字符集，也就是gbk进行编码，得到的结果就是字节串0xCED2。</span><br><span class="line">3. 因为表t的列col采用的是gbk字符集，与character_set_connection一致，所以直接到列</span><br><span class="line">中找字节值为0xCED2的记录，最后找到了一条记录。</span><br></pre></td></tr></table></figure>

<h5 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果某个列使用的字符集和character_set_connection代表的字符集不一致的话，还需要进行</span><br><span class="line">一次字符集转换。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4. 上一步骤找到的记录中的col列其实是一个字节串0xCED2，col列是采用gbk进行编码的，所</span><br><span class="line">以首先会将这个字节串使用gbk进行解码，得到字符串&#x27;我&#x27;，然后再把这个字符串使用</span><br><span class="line">character_set_results代表的字符集，也就是utf8进行编码，得到了新的字节串：</span><br><span class="line">0xE68891，然后发送给客户端。</span><br><span class="line">5. 由于客户端是用的字符集是utf8，所以可以顺利的将0xE68891解释成字符我，从而显示到我</span><br><span class="line">们的显示器上，所以我们人类也读懂了返回的结果。</span><br></pre></td></tr></table></figure>

<p>总结图示如下：</p>
<h2 id="6-SQL大小写规范"><a href="#6-SQL大小写规范" class="headerlink" title="6. SQL大小写规范"></a>6. SQL大小写规范</h2><h3 id="6-1-Windows和Linux平台区别"><a href="#6-1-Windows和Linux平台区别" class="headerlink" title="6. 1 Windows和Linux平台区别"></a>6. 1 Windows和Linux平台区别</h3><h5 id="在-SQL-中，关键字和函数名是不用区分字母大小写的，比如-SELECT、WHERE、ORDER、GROUP-BY-等关"><a href="#在-SQL-中，关键字和函数名是不用区分字母大小写的，比如-SELECT、WHERE、ORDER、GROUP-BY-等关" class="headerlink" title="在 SQL 中，关键字和函数名是不用区分字母大小写的，比如 SELECT、WHERE、ORDER、GROUP BY 等关"></a>在 SQL 中，关键字和函数名是不用区分字母大小写的，比如 SELECT、WHERE、ORDER、GROUP BY 等关</h5><h5 id="键字，以及-ABS、MOD、ROUND、MAX-等函数名。"><a href="#键字，以及-ABS、MOD、ROUND、MAX-等函数名。" class="headerlink" title="键字，以及 ABS、MOD、ROUND、MAX 等函数名。"></a>键字，以及 ABS、MOD、ROUND、MAX 等函数名。</h5><p>不过在 SQL 中，你还是要确定大小写的规范，因为在 Linux 和 Windows 环境下，你可能会遇到不同的大<br>小写问题。windows系统默认大小写不敏感，但是linux系统是大小写敏感的。</p>
<p>通过如下命令查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows系统下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux系统下：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lower_case_table_names参数值的设置：</span><br><span class="line">默认为 0 ，大小写敏感。</span><br><span class="line">设置 1 ，大小写不敏感。创建的表，数据库都是以小写形式存放在磁盘上，对于sql语句都是转</span><br><span class="line">换为小写对表和数据库进行查找。</span><br><span class="line">设置 2 ，创建的表和数据库依据语句上格式存放，凡是查找都是转换为小写进行。</span><br><span class="line">两个平台上SQL大小写的区别具体来说：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL在Linux下数据库名、表名、列名、别名大小写规则是这样的：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 、数据库名、表名、表的别名、变量名是严格区分大小写的；</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 、关键字、函数名称在 SQL 中不区分大小写；</span><br><span class="line">3 、列名（或字段名）与列的别名（或字段别名）在所有的情况下均是忽略大小写的；</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL在Windows的环境下全部不区分大小写</span><br></pre></td></tr></table></figure>

<h3 id="6-2-Linux下大小写规则设置"><a href="#6-2-Linux下大小写规则设置" class="headerlink" title="6. 2 Linux下大小写规则设置"></a>6. 2 Linux下大小写规则设置</h3><p>当想设置为大小写不敏感时，要在my.cnf这个配置文件 [mysqld] 中加入<br>lower_case_table_names&#x3D;1 ，然后重启服务器。<br>但是要在重启数据库实例之前就需要将原来的数据库和表转换为小写，否则将找不到数据库名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%lower_case_table_names%&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此参数适用于MySQL5.7。在MySQL 8下禁止在重新启动 MySQL 服务时将</span><br><span class="line">lower_case_table_names 设置成不同于初始化 MySQL 服务时设置的</span><br><span class="line">lower_case_table_names 值。如果非要将MySQL8设置为大小写不敏感，具体步骤为：</span><br></pre></td></tr></table></figure>

<h3 id="6-3-SQL编写建议"><a href="#6-3-SQL编写建议" class="headerlink" title="6.3 SQL编写建议"></a>6.3 SQL编写建议</h3><h5 id="如果你的变量名命名规范没有统一，就可能产生错误。这里有一个有关命名规范的建议："><a href="#如果你的变量名命名规范没有统一，就可能产生错误。这里有一个有关命名规范的建议：" class="headerlink" title="如果你的变量名命名规范没有统一，就可能产生错误。这里有一个有关命名规范的建议："></a>如果你的变量名命名规范没有统一，就可能产生错误。这里有一个有关命名规范的建议：</h5><h5 id="1-关键字和函数名称全部大写；"><a href="#1-关键字和函数名称全部大写；" class="headerlink" title="1. 关键字和函数名称全部大写；"></a>1. 关键字和函数名称全部大写；</h5><h5 id="2-数据库名、表名、表别名、字段名、字段别名等全部小写；"><a href="#2-数据库名、表名、表别名、字段名、字段别名等全部小写；" class="headerlink" title="2. 数据库名、表名、表别名、字段名、字段别名等全部小写；"></a>2. 数据库名、表名、表别名、字段名、字段别名等全部小写；</h5><h5 id="3-SQL-语句必须以分号结尾。"><a href="#3-SQL-语句必须以分号结尾。" class="headerlink" title="3. SQL 语句必须以分号结尾。"></a>3. SQL 语句必须以分号结尾。</h5><p>数据库名、表名和字段名在 Linux MySQL 环境下是区分大小写的，因此建议你统一这些字段的命名规<br>则，比如全部采用小写的方式。</p>
<p>虽然关键字和函数名称在 SQL 中不区分大小写，也就是如果小写的话同样可以执行。但是同时将关键词<br>和函数名称全部大写，以便于区分数据库名、表名、字段名。</p>
<h2 id="7-sql-mode的合理设置"><a href="#7-sql-mode的合理设置" class="headerlink" title="7. sql_mode的合理设置"></a>7. sql_mode的合理设置</h2><h3 id="7-1-宽松模式-vs-严格模式"><a href="#7-1-宽松模式-vs-严格模式" class="headerlink" title="7.1 宽松模式 vs 严格模式"></a>7.1 宽松模式 vs 严格模式</h3><h5 id="宽松模式："><a href="#宽松模式：" class="headerlink" title="宽松模式："></a>宽松模式：</h5><h5 id="如果设置的是宽松模式，那么我们在插入数据的时候，即便是给了一个错误的数据，也可能会被接受，"><a href="#如果设置的是宽松模式，那么我们在插入数据的时候，即便是给了一个错误的数据，也可能会被接受，" class="headerlink" title="如果设置的是宽松模式，那么我们在插入数据的时候，即便是给了一个错误的数据，也可能会被接受，"></a>如果设置的是宽松模式，那么我们在插入数据的时候，即便是给了一个错误的数据，也可能会被接受，</h5><h5 id="并且不报错。"><a href="#并且不报错。" class="headerlink" title="并且不报错。"></a>并且不报错。</h5><p>举例：我在创建一个表时，该表中有一个字段为name，给name设置的字段类型时char(10)，如果我<br>在插入数据的时候，其中name这个字段对应的有一条数据的长度超过了 10 ，例如’1234567890abc’，超<br>过了设定的字段长度 10 ，那么不会报错，并且取前 10 个字符存上，也就是说你这个数据被存为<br>了’1234567890’，而’abc’就没有了。但是，我们给的这条数据是错误的，因为超过了字段长度，但是并没<br>有报错，并且mysql自行处理并接受了，这就是宽松模式的效果。</p>
<p>应用场景：通过设置sql mode为宽松模式，来保证大多数sql符合标准的sql语法，这样应用在不同数据<br>库之间进行迁移时，则不需要对业务sql 进行较大的修改。</p>
<p><strong>严格模式：</strong></p>
<p>出现上面宽松模式的错误，应该报错才对，所以MySQL5.7版本就将sql_mode默认值改为了严格模式。所<br>以在生产等环境中，我们必须采用的是严格模式，进而开发、测试环境的数据库也必须要设置，这样在<br>开发测试阶段就可以发现问题。并且我们即便是用的MySQL5.6，也应该自行将其改为严格模式。</p>
<p>开发经验：MySQL等数据库总想把关于数据的所有操作都自己包揽下来，包括数据的校验，其实开发<br>中，我们应该在自己开发的项目程序级别将这些校验给做了，虽然写项目的时候麻烦了一些步骤，但是这<br>样做之后，我们在进行数据库迁移或者在项目的迁移时，就会方便很多。</p>
<p>改为严格模式后可能会存在的问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 、停止MySQL服务</span><br><span class="line">2 、删除数据目录，即删除 /var/lib/mysql 目录</span><br><span class="line">3 、在MySQL配置文件（ /etc/my.cnf ）中添加 lower_case_table_names=1</span><br><span class="line">4 、启动MySQL服务</span><br></pre></td></tr></table></figure>

<p>若设置模式中包含了NO_ZERO_DATE，那么MySQL数据库不允许插入零日期，插入零日期会抛出错误而<br>不是警告。例如，表中含字段TIMESTAMP列（如果未声明为NULL或显示DEFAULT子句）将自动分配<br>DEFAULT ‘0000-00-00 00:00:00’（零时间戳），这显然是不满足sql_mode中的NO_ZERO_DATE而报错。</p>
<h3 id="7-2-宽松模式再举例"><a href="#7-2-宽松模式再举例" class="headerlink" title="7. 2 宽松模式再举例"></a>7. 2 宽松模式再举例</h3><h5 id="宽松模式举例-1-："><a href="#宽松模式举例-1-：" class="headerlink" title="宽松模式举例 1 ："></a>宽松模式举例 1 ：</h5><h5 id="宽松模式举例-2-："><a href="#宽松模式举例-2-：" class="headerlink" title="宽松模式举例 2 ："></a>宽松模式举例 2 ：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from employees group by department_id limit 10 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set sql_mode = ONLY_FULL_GROUP_BY;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from employees group by department_id limit 10 ;</span><br></pre></td></tr></table></figure>

<p>设置 sql_mode 模式为 STRICT_TRANS_TABLES ，然后插入数据：</p>
<h3 id="7-3-模式查看和设置"><a href="#7-3-模式查看和设置" class="headerlink" title="7. 3 模式查看和设置"></a>7. 3 模式查看和设置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前的sql_mode</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">临时设置方式：设置当前窗口中设置sql_mode</span><br></pre></td></tr></table></figure>

<h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@session.sql_mode</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@global.sql_mode</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#或者</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;sql_mode&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL sql_mode = &#x27;modes...&#x27;; #全局</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET SESSION sql_mode = &#x27;modes...&#x27;; #当前会话</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">永久设置方式：在/etc/my.cnf中配置sql_mode</span><br></pre></td></tr></table></figure>

<p>在my.cnf文件(windows系统是my.ini文件)，新增：</p>
<p>然后重启MySQL。</p>
<p>当然生产环境上是禁止重启MySQL服务的，所以采用临时设置方式 + 永久设置方式来解决线上的问题，<br>那么即便是有一天真的重启了MySQL服务，也会永久生效了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#改为严格模式。此方法只在当前会话中生效，关闭当前会话就不生效了。</span><br><span class="line">set SESSION sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#改为严格模式。此方法在当前服务中生效，重启MySQL服务后失效。</span><br><span class="line">set GLOBAL sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR</span><br><span class="line">_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker自学笔记</title>
    <url>/2021/05/25/%E5%AE%B9%E5%99%A8/Docker%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Docker自学笔记"><a href="#Docker自学笔记" class="headerlink" title="Docker自学笔记"></a>Docker自学笔记</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>Docker镜像的设计，使得Docker打破过去【程序即应用】的观念。通过镜像（<em>images</em>）将作业系统核心除外，运作应用程式所需的系统环境，由上而下打包，达到应用程式跨平台间的无缝接轨运作。</p>
<p>基于<strong>go语言</strong>开发实现的云开源项目。主要目标是通过对应用组件的封装，分发，部署，运行等生命周期的管理。使得应用及其运行环境能做到<strong>一次封装，到处运行</strong>。</p>
<p>解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p>
<h3 id="基本组成："><a href="#基本组成：" class="headerlink" title="基本组成："></a>基本组成：</h3><ul>
<li>镜像 image  ：是一个只读的模板，类似于java类</li>
<li>容器 container ：通过镜像创建，类似于java类的实例</li>
<li>仓库 repository：集中存放镜像的场所</li>
</ul>
<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>步骤：</p>
<ol>
<li>yum  install -y -epel-release  （docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库）</li>
<li>yum install -y docker-io</li>
<li>安装后配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;docker</li>
<li>启动Docker后台服务：service docker start</li>
<li>版本验证：docker version</li>
</ol>
<p>阿里云镜像加速配置：</p>
<ul>
<li>登录阿里云管理控制台获取镜像加速专属<em>加速器地址</em></li>
<li>&#x2F;etc&#x2F;sysconfig&#x2F;docker配置文件中 ，配置 other_ages&#x3D;”–registry-mirror&#x3D;<em>加速器地址</em>“</li>
<li>检查是否失效 ps -ef|grep docker 查看进程中是否包含该<em>加速器地址</em></li>
</ul>
<p>HelloWorld镜像:</p>
<ul>
<li><p>docker run hello-world</p>
</li>
<li><p>先从本地查找镜像，没有则取远程下载</p>
</li>
</ul>
<h3 id="运行原理："><a href="#运行原理：" class="headerlink" title="运行原理："></a>运行原理：</h3><ul>
<li>Docker是一个client-serve结构的系统，Docker守护进程运行在主机上，然后通过socker连接从客户</li>
</ul>
<p>端访问，守护进程从客户端接受命令并管理运行在主机上的容器。可以把容器看作一个精简版的Linux环境。</p>
<ul>
<li><p>为什么比虚拟机快？</p>
<ul>
<li>docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li>
<li>docker利用的是宿主机的内核，而不需要Guest OS。因此当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。然而避免引寻，加载操作系用内核是个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS,新建过程是分钟级别的。而docker直接利用宿主机的操作系用，新建一个docker容器时秒级的。</li>
</ul>
</li>
<li><p>对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>Docker容器</th>
<th>虚拟机（VM）</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>与宿主机共享OS</td>
<td>宿主机OS上运行虚拟机OS</td>
</tr>
<tr>
<td>存储大小</td>
<td>镜像小，便于存储和传输</td>
<td>镜像庞大（vmdk,vdi等）</td>
</tr>
<tr>
<td>运行性能</td>
<td>几乎无额外性能损失</td>
<td>操作系统额外的CPU，内存消耗</td>
</tr>
<tr>
<td>移植性</td>
<td>轻便，灵活，适用于Linux</td>
<td>笨重，与虚拟化技术耦合度高</td>
</tr>
<tr>
<td>硬件亲和性</td>
<td>面向软件开发者</td>
<td>面向硬件运维者</td>
</tr>
<tr>
<td>部署速度</td>
<td>快速，秒级</td>
<td>较慢，10s以上</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><ol>
<li><p>帮助命令</p>
<ul>
<li>docker version</li>
<li>docker info</li>
<li>docker –help</li>
</ul>
</li>
<li><p>镜像命令</p>
<ul>
<li>docker images：列出本地主机上的镜像<ul>
<li>-a: 所有镜像</li>
<li>-q:只显示镜像ID</li>
<li>–digests:显示镜像的摘要信息</li>
<li>–no-trunc:显示完整 的镜像信息</li>
</ul>
</li>
<li>docker search [xxx]：搜索hub上的镜像<ul>
<li>-s : 星数超过指定数量的  -s 100  [options]</li>
</ul>
</li>
<li>docker pull [xxx:（版本号，默认时latest）]: 下载镜像</li>
<li>docker rmi [xxx]:（版本号，默认时latest：删除某个镜像 <ul>
<li>-f：强制删除</li>
<li>删除多个  docker rmi -f 镜像名1:tag  镜像名2:tag</li>
<li>删除全部 docker rmi -f ${docker images -qa}</li>
</ul>
</li>
</ul>
</li>
<li><p>容器命令</p>
<ul>
<li><p>新建并启动容器： docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<p>​    常用options:</p>
<ul>
<li>–name :为容器指定一个名字</li>
<li>-d:后台运行容器，返回容器id，即启动守护式容器</li>
<li>-i:以交互模式运行容器，通常与*-t* 同时使用</li>
<li>-t:为容器重新分配一个伪输入终端，通常与*-i*同时使用</li>
<li>-P:随机端口映射</li>
<li>-p:指定端口映射，格式：ip:hostPort:containerPort | ip:containerPort | <strong>hostPort:containerPort</strong> | containerPort</li>
</ul>
</li>
<li><p>列出当前所有正在运行的容器：docker ps [OPTIONS]</p>
<ul>
<li>-a：列出当前所有正在运行的容器+历史上运行过的</li>
<li>-l：显示最近创建的容器</li>
<li>-n：显示最近n个创建的容器</li>
<li>-q：静默模式，只显示容器编号</li>
<li>–no-trunc：不截断输出</li>
</ul>
</li>
<li><p>退出容器：</p>
<ul>
<li>exit :容器停止退出</li>
<li>ctrl + P + Q：容器不停止退出</li>
</ul>
</li>
<li><p>启动容器：</p>
<p> docker start 容器ID或者容器名</p>
</li>
<li><p>重启容器：</p>
<p> dockers restart 容器ID或者容器名</p>
</li>
<li><p>停止容器</p>
<p> docker stop 容器ID或者容器名</p>
</li>
<li><p>强制停止</p>
<p>  docker kill  容器ID或者容器名</p>
</li>
<li><p>删除容器</p>
<p>  docker rm 容器ID或者容器名  , -f 强制删除</p>
<p>  删除多个容器： docker rm -f ${docker ps - a -q} ,  docker ps -a -q | xargs docker rm</p>
<blockquote>
<p><strong>重要</strong>：</p>
<ul>
<li><p>启动守护式容器： docker run -d 容器名</p>
</li>
<li><p>查看容器日志： docker logs -f -t –tail 容器ID</p>
</li>
<li><p>查看容器内运行的进程：docker top 容器ID</p>
</li>
<li><p>查看容器内部细节：docker inspect 容器ID</p>
</li>
<li><p>进入正在运行的容器并以命令行交互：</p>
<p>docker exec -it 容器ID bashShell，在容器外打开新的终端，并且可以启动新的进程</p>
<p>重新进入 docker attach 容器ID，直接进入容器启动命令的终端，不会启动新的进程</p>
</li>
<li><p>从容器内拷贝文件到主机上：docker cp 容器ID:容器内路径 目的主机路径</p>
</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ol>
<h3 id="镜像原理："><a href="#镜像原理：" class="headerlink" title="镜像原理："></a>镜像原理：</h3><p>​    <em>镜像是一种轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含软件运行时的所有内容，包括代码，运行时，库，环境变量和配置文件。</em></p>
<h4 id="1-UnionFS（联合文件系统）"><a href="#1-UnionFS（联合文件系统）" class="headerlink" title="1) UnionFS（联合文件系统）"></a>1) UnionFS（联合文件系统）</h4><p>​    Union文件系统是一种分层，轻量级并且高性能的文件系统，<strong>它支持对文件系统的修改作为一次提交来一层层的叠加</strong>，同时可以将不用目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体镜像。</p>
<p>​    特性：一次同时加载多个文件系统，但从外表看来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层文件和目录。</p>
<h4 id="2-Docker镜像加载原理"><a href="#2-Docker镜像加载原理" class="headerlink" title="2) Docker镜像加载原理"></a>2) Docker镜像加载原理</h4><p>​    docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统就是UnionFS。</p>
<blockquote>
<p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel,Linux刚启动时会加载bootfs文件系统，<strong>在Docker镜像的最底层时bootfs</strong>。这一层与Linux&#x2F;Unix系统是一样的，包含boot加载器和内核，当boot加载完成之后整个内核就在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
</blockquote>
<blockquote>
<p>rootfs(root file system)，在bootfs之上，包含的就是Linux系统中的 &#x2F;dev,&#x2F;proc,&#x2F;bin,&#x2F;etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu,Centos等</p>
</blockquote>
<h4 id="3-分层的镜像"><a href="#3-分层的镜像" class="headerlink" title="3) 分层的镜像"></a>3) 分层的镜像</h4><h4 id="4-为什么Docker镜像采用分层结构？"><a href="#4-为什么Docker镜像采用分层结构？" class="headerlink" title="4) 为什么Docker镜像采用分层结构？"></a>4) 为什么Docker镜像采用分层结构？</h4><pre><code> 共享资源：
</code></pre>
<p>​    比如当有多个镜像都从相同的base镜像构建而来，那么宿主机只需要在磁盘上保存一份base镜像，同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<p> 特点：Docker镜像都是只读的，当启动容器时，和一个新的可写层被加载到镜像的顶部。这一层通常被称为【容器层】，容器层之下的都叫做【镜像层】</p>
<h3 id="镜像commit"><a href="#镜像commit" class="headerlink" title="镜像commit:"></a>镜像commit:</h3><blockquote>
<p>docker commit 提交一个容器副本使之成为一个新的镜像</p>
<p>docker commit -m &#x3D; “提交的描述信息” -a&#x3D;”作者” 容器ID 要创建的目标镜像名:[标签名    ]</p>
</blockquote>
<h3 id="Docker容器数据卷："><a href="#Docker容器数据卷：" class="headerlink" title="Docker容器数据卷："></a>Docker容器数据卷：</h3><blockquote>
<p>​    卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能绕过ufs提供一些用于<strong>持久存储</strong>或<strong>共享数据</strong>的特性：</p>
<p>​    数据卷的目的就是做数据的持久化，完全独立于容器的生存周期，因此Docker不会再容器删除时删除其挂载的数据卷</p>
<p>特点：</p>
<pre><code>* 数据卷可在容器之间共享或重用数据
* 卷中的更改可直接生效
* 卷中的更改不会包含在镜像的更新中
* 卷的生命周期一直持续到没有容器使用它为止
</code></pre>
</blockquote>
<h4 id="容器内添加数据卷："><a href="#容器内添加数据卷：" class="headerlink" title="容器内添加数据卷："></a>容器内添加数据卷：</h4><h5 id="1）-命令添加-v"><a href="#1）-命令添加-v" class="headerlink" title="1） 命令添加  -v"></a>1） 命令添加  <em>-v</em></h5><p>​    docker run -it -v &#x2F;宿主机绝对路径目录:&#x2F;容器内目录  镜像名</p>
<p>使用 docker inspect 容器ID ,展示的json中可查看是否添加数据卷成功（”volumes“）</p>
<p>带权限的命令</p>
<p>docker run -it -v &#x2F;宿主机绝对路径目录:&#x2F;容器内目录***:ro***  镜像名  (ro: read  only)</p>
<h5 id="2）DockerFile添加"><a href="#2）DockerFile添加" class="headerlink" title="2）DockerFile添加"></a>2）DockerFile添加</h5><p>​     可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷。</p>
<ol>
<li><p>构建DockerFile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># volume test</span><br><span class="line">FROM centos</span><br><span class="line">VOLUMN [&quot;/data_1&quot;,&quot;data_2&quot;]</span><br><span class="line">CMD echo &quot;success&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>build命令生成镜像</p>
<blockquote>
<p>docker build -f   dockerfile文件路径  -t 镜像名 .</p>
</blockquote>
</li>
<li><p>run 运行容器</p>
</li>
</ol>
<p><em>docker会默认根据dockerfile中的数据卷生成宿主机目录</em></p>
<h4 id="数据卷容器："><a href="#数据卷容器：" class="headerlink" title="数据卷容器："></a>数据卷容器：</h4><blockquote>
<p>​    命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器。</p>
<p>​    容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</p>
<ol>
<li><p>先启动一个父容器 dc01</p>
</li>
<li><p>dc02继承自dc01 ,run 加参数   –volumes from dc01</p>
</li>
</ol>
</blockquote>
<h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile:"></a>DockerFile:</h3><h4 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1)  是什么？"></a>1)  是什么？</h4><p>​    Dockerfile是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p>
<p>​    构建步骤：编写dockfile文件  -&gt;  docker build -&gt; docker run</p>
<blockquote>
<p>DockerFile文件格式基础：</p>
<ol>
<li>每条保留字指令都必须为大写字母且后面需跟随至少一个参数</li>
<li>指令按照从上到下，顺序执行</li>
<li>#表示注释</li>
<li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li>
</ol>
<p>执行DockerFile大致流程：</p>
<ol>
<li>docker从基础镜像运行一个容器</li>
<li>执行一条指令并对容器做出修改</li>
<li>执行类似docker commit 的操作提交一个新的镜像层</li>
<li>docker基于刚提交的镜像运行一个新容器</li>
<li>执行dockerfile中的下一条指令直到所有容器都执行完成</li>
</ol>
</blockquote>
<h4 id="2）DockerFile-保留字指令"><a href="#2）DockerFile-保留字指令" class="headerlink" title="2）DockerFile 保留字指令"></a>2）DockerFile 保留字指令</h4><ul>
<li>FROM    基础镜像，当前镜像基于哪个镜像的</li>
<li>MAINTAINER    镜像维护者的姓名和邮箱</li>
<li>RUN    容器构建时需要运行的命令</li>
<li>EXPOSE    当前容器对外暴露的端口</li>
<li>WORKDIR    执行在创建容器后，终端默认登陆进来后的工作目录</li>
<li>ENV    用于构建镜像过程中设置环境变量</li>
<li>ADD    将宿主目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</li>
<li>COPY    类似ADD,拷贝文件和目录到镜像中</li>
<li>VOLUME    容器数据卷，用于数据保存和持久化工作</li>
<li>CMD    执行一个容器启动时要运行的命令，Dockfile可以有多个CMD命令，但是只有最后一个生效，CMD会被docker run之后的参数替换</li>
<li>ENTRYPOINT    指定一个容器启动时要运行的命令，和CMD一样，都是在指定容器启动程序和参数。不会像CMD最后的CMD会替换之前的CMD,</li>
<li>ONBUILD    当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后父镜像的onbuild被触发</li>
</ul>
<h4 id="3）案例"><a href="#3）案例" class="headerlink" title="3）案例"></a>3）案例</h4><blockquote>
<p>Base镜像（scratch）,Docker Hub上99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p>
</blockquote>
<h5 id="1）-自定义镜像，基于centos修改"><a href="#1）-自定义镜像，基于centos修改" class="headerlink" title="1） 自定义镜像，基于centos修改"></a>1） 自定义镜像，基于centos修改</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos  ##来源</span><br><span class="line">MAINTAINER vicent&lt;vincent@163.com&gt;  ##作者信息</span><br><span class="line">ENV MYPATH /usr/local ## 设置环境变量，供后面引用</span><br><span class="line">WORKDIR &amp;MYPATH  ## 设置工作目录 </span><br><span class="line">RUN yum -y install vim   ## 容器构建时需要运行的命令</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">EXPOSE 80  ## 容器对外暴露的端口</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;success&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>​    DockFile中 CMD和ENTRYPOINT 区别：</p>
<p>例：DockerFile1: CMD [“curl”,”-s”,”http:<a href="http://www.baidu.com" ]">www.baidu.com&quot;]</a></p>
<p>​        DockerFile2: ENTRYPOINT [“curl”,”-s”,”http:<a href="http://www.baidu.com" ]">www.baidu.com&quot;]</a></p>
<p>​    当使用docker run 后面更参数 -i 时，DockerFile1镜像的容器，会报错，因为相当于使用CMD -i 替换了 CMD [“curl”,”-s”,”http:<a href="http://www.baidu.com" ]">www.baidu.com&quot;]</a></p>
<p>​    而使用DockerFile2镜像的容器，正常，因为相当于 CMD [“curl”,”-s”,”http:<a href="http://www.baidu.com" ]后追加了">www.baidu.com&quot;]后追加了</a> ”-i“</p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql存储引擎</title>
    <url>/2018/12/15/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h1><h2 id="1-查看存储引擎"><a href="#1-查看存储引擎" class="headerlink" title="1. 查看存储引擎"></a>1. 查看存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看mysql提供什么存储引擎：</span><br></pre></td></tr></table></figure>

<h4 id="显式如下："><a href="#显式如下：" class="headerlink" title="显式如下："></a>显式如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engines \G;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">Engine: InnoDB</span><br><span class="line">Support: DEFAULT</span><br><span class="line">Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line">Transactions: YES</span><br><span class="line">XA: YES</span><br><span class="line">Savepoints: YES</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">Engine: MRG_MYISAM</span><br><span class="line">Support: YES</span><br><span class="line">Comment: Collection of identical MyISAM tables</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br><span class="line">Savepoints: NO</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">Engine: MEMORY</span><br><span class="line">Support: YES</span><br><span class="line">Comment: Hash based, stored in memory, useful for temporary tables</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br><span class="line">Savepoints: NO</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">Engine: BLACKHOLE</span><br><span class="line">Support: YES</span><br><span class="line">Comment: /dev/null storage engine (anything you write to it disappears)</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br></pre></td></tr></table></figure>

<h2 id="2-设置系统默认的存储引擎"><a href="#2-设置系统默认的存储引擎" class="headerlink" title="2. 设置系统默认的存储引擎"></a>2. 设置系统默认的存储引擎</h2><h4 id="查看默认的存储引擎："><a href="#查看默认的存储引擎：" class="headerlink" title="查看默认的存储引擎："></a>查看默认的存储引擎：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Savepoints: NO</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">Engine: MyISAM</span><br><span class="line">Support: YES</span><br><span class="line">Comment: MyISAM storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br><span class="line">Savepoints: NO</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">Engine: CSV</span><br><span class="line">Support: YES</span><br><span class="line">Comment: CSV storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br><span class="line">Savepoints: NO</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">Engine: ARCHIVE</span><br><span class="line">Support: YES</span><br><span class="line">Comment: Archive storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br><span class="line">Savepoints: NO</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">Engine: PERFORMANCE_SCHEMA</span><br><span class="line">Support: YES</span><br><span class="line">Comment: Performance Schema</span><br><span class="line">Transactions: NO</span><br><span class="line">XA: NO</span><br><span class="line">Savepoints: NO</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">Engine: FEDERATED</span><br><span class="line">Support: NO</span><br><span class="line">Comment: Federated MySQL storage engine</span><br><span class="line">Transactions: NULL</span><br><span class="line">XA: NULL</span><br><span class="line">Savepoints: NULL</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%storage_engine%&#x27;;</span><br><span class="line">#或</span><br><span class="line">SELECT @@default_storage_engine;</span><br></pre></td></tr></table></figure>

<h4 id="修改默认的存储引擎"><a href="#修改默认的存储引擎" class="headerlink" title="修改默认的存储引擎"></a>修改默认的存储引擎</h4><p>如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用InnoDB作为表的存储引擎。<br>如果我们想改变表的默认存储引擎的话，可以这样写启动服务器的命令行：</p>
<p>或者修改my.cnf文件：</p>
<h2 id="3-设置表的存储引擎"><a href="#3-设置表的存储引擎" class="headerlink" title="3. 设置表的存储引擎"></a>3. 设置表的存储引擎</h2><h4 id="存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为不同的表设置不同的存储引擎，也就是"><a href="#存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为不同的表设置不同的存储引擎，也就是" class="headerlink" title="存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为不同的表设置不同的存储引擎，也就是"></a>存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为不同的表设置不同的存储引擎，也就是</h4><h4 id="说不同的表可以有不同的物理存储结构，不同的提取和写入方式。"><a href="#说不同的表可以有不同的物理存储结构，不同的提取和写入方式。" class="headerlink" title="说不同的表可以有不同的物理存储结构，不同的提取和写入方式。"></a>说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</h4><h3 id="3-1-创建表时指定存储引擎"><a href="#3-1-创建表时指定存储引擎" class="headerlink" title="3. 1 创建表时指定存储引擎"></a>3. 1 创建表时指定存储引擎</h3><p>我们之前创建表的语句都没有指定表的存储引擎，那就会使用默认的存储引擎InnoDB。如果我们想显<br>式的指定一下表的存储引擎，那可以这么写：</p>
<h3 id="3-2-修改表的存储引擎"><a href="#3-2-修改表的存储引擎" class="headerlink" title="3. 2 修改表的存储引擎"></a>3. 2 修改表的存储引擎</h3><h4 id="如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎："><a href="#如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎：" class="headerlink" title="如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎："></a>如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎：</h4><p>比如我们修改一下engine_demo_table表的存储引擎：</p>
<p>这时我们再查看一下engine_demo_table的表结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET DEFAULT_STORAGE_ENGINE=MyISAM;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default-storage-engine=MyISAM</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重启服务</span><br><span class="line">systemctl restart mysqld.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">建表语句;</span><br><span class="line">) ENGINE = 存储引擎名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ENGINE = 存储引擎名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE engine_demo_table ENGINE = InnoDB;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure>

<h2 id="4-引擎介绍"><a href="#4-引擎介绍" class="headerlink" title="4. 引擎介绍"></a>4. 引擎介绍</h2><h3 id="4-1-InnoDB-引擎：具备外键支持功能的事务存储引擎"><a href="#4-1-InnoDB-引擎：具备外键支持功能的事务存储引擎" class="headerlink" title="4. 1 InnoDB 引擎：具备外键支持功能的事务存储引擎"></a>4. 1 InnoDB 引擎：具备外键支持功能的事务存储引擎</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL从3.23.34a开始就包含InnoDB存储引擎。大于等于5.5之后，默认采用InnoDB引擎。</span><br><span class="line">InnoDB是MySQL的默认事务型引擎，它被设计用来处理大量的短期(short-lived)事务。可以确保事务</span><br><span class="line">的完整提交(Commit)和回滚(Rollback)。</span><br><span class="line">除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。</span><br><span class="line">除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。</span><br><span class="line">数据文件结构：（在《第 02 章_MySQL数据目录》章节已讲）</span><br><span class="line">表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</span><br><span class="line">表名.ibd 存储数据和索引</span><br><span class="line">InnoDB是为处理巨大数据量的最大性能设计。</span><br><span class="line">在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除</span><br><span class="line">了。比如：.frm， .par，.trn， .isl，.db.opt等都在MySQL8.0中不存在了。</span><br><span class="line">对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保存数据和</span><br><span class="line">索引。</span><br><span class="line">MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据，对内存要求较</span><br><span class="line">高，而且内存大小对性能有决定性的影响。</span><br></pre></td></tr></table></figure>

<h3 id="4-2-MyISAM-引擎：主要的非事务处理存储引擎"><a href="#4-2-MyISAM-引擎：主要的非事务处理存储引擎" class="headerlink" title="4. 2 MyISAM 引擎：主要的非事务处理存储引擎"></a>4. 2 MyISAM 引擎：主要的非事务处理存储引擎</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但MyISAM不支持事务、行级</span><br><span class="line">锁、外键，有一个毫无疑问的缺陷就是崩溃后无法安全恢复。</span><br><span class="line">5.5之前默认的存储引擎</span><br><span class="line">优势是访问的速度快，对事务完整性没有要求或者以SELECT、INSERT为主的应用</span><br><span class="line">针对数据统计有额外的常数存储。故而 count(*) 的查询效率很高</span><br><span class="line">数据文件结构：（在《第 02 章_MySQL数据目录》章节已讲）</span><br><span class="line">表名.frm 存储表结构</span><br><span class="line">表名.MYD 存储数据 (MYData)</span><br><span class="line">表名.MYI 存储索引 (MYIndex)</span><br><span class="line">应用场景：只读应用或者以读为主的业务</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE engine_demo_table\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Table: engine_demo_table</span><br><span class="line">Create Table: CREATE TABLE `engine_demo_table` (</span><br><span class="line">`i` int( 11 ) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<h3 id="4-3-Archive-引擎：用于数据存档"><a href="#4-3-Archive-引擎：用于数据存档" class="headerlink" title="4.3 Archive 引擎：用于数据存档"></a>4.3 Archive 引擎：用于数据存档</h3><h4 id="下表展示了ARCHIVE-存储引擎功能"><a href="#下表展示了ARCHIVE-存储引擎功能" class="headerlink" title="下表展示了ARCHIVE 存储引擎功能"></a>下表展示了ARCHIVE 存储引擎功能</h4><table>
<thead>
<tr>
<th>特征</th>
<th>支持</th>
</tr>
</thead>
<tbody><tr>
<td>B树索引</td>
<td>不支持</td>
</tr>
<tr>
<td>备份&#x2F;时间点恢复 （在服务器中实现，而不是在存储引擎中）</td>
<td>支持</td>
</tr>
<tr>
<td>集群数据库支持</td>
<td>不支持</td>
</tr>
<tr>
<td>聚集索引</td>
<td>不支持</td>
</tr>
<tr>
<td>压缩数据</td>
<td>支持</td>
</tr>
<tr>
<td>数据缓存</td>
<td>不支持</td>
</tr>
<tr>
<td>加密数据（加密功能在服务器中实现）</td>
<td>支持</td>
</tr>
<tr>
<td>外键支持</td>
<td>不支持</td>
</tr>
<tr>
<td>全文检索索引</td>
<td>不支持</td>
</tr>
<tr>
<td>地理空间数据类型支持</td>
<td>支持</td>
</tr>
<tr>
<td>地理空间索引支持</td>
<td>不支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td>不支持</td>
</tr>
<tr>
<td>索引缓存</td>
<td>不支持</td>
</tr>
<tr>
<td>锁粒度</td>
<td>行锁</td>
</tr>
<tr>
<td>MVCC</td>
<td>不支持</td>
</tr>
<tr>
<td>存储限制</td>
<td>没有任何限制</td>
</tr>
<tr>
<td>交易</td>
<td>不支持</td>
</tr>
<tr>
<td>更新数据字典的统计信息</td>
<td>支持</td>
</tr>
</tbody></table>
<h3 id="4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容"><a href="#4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容" class="headerlink" title="4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容"></a>4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容</h3><h3 id="4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项"><a href="#4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项" class="headerlink" title="4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项"></a>4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项</h3><h4 id="使用案例如下"><a href="#使用案例如下" class="headerlink" title="使用案例如下"></a>使用案例如下</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE test (i INT NOT NULL, c CHAR( 10 ) NOT NULL) ENGINE = CSV;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test VALUES( 1 ,&#x27;record one&#x27;),( 2 ,&#x27;record two&#x27;);</span><br><span class="line">Query OK, 2 rows affected (0.05 sec)</span><br><span class="line">Records: 2 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test;</span><br><span class="line">+---+------------+</span><br><span class="line">| i | c |</span><br><span class="line">+---+------------+</span><br></pre></td></tr></table></figure>

<h4 id="创建CSV表还会创建相应的元文件，用于存储表的状态和表中存在的行数。此文件的名称与表的名称相"><a href="#创建CSV表还会创建相应的元文件，用于存储表的状态和表中存在的行数。此文件的名称与表的名称相" class="headerlink" title="创建CSV表还会创建相应的元文件，用于存储表的状态和表中存在的行数。此文件的名称与表的名称相"></a>创建CSV表还会创建相应的元文件，用于存储表的状态和表中存在的行数。此文件的名称与表的名称相</h4><h4 id="同，后缀为CSM。如图所示"><a href="#同，后缀为CSM。如图所示" class="headerlink" title="同，后缀为CSM。如图所示"></a>同，后缀为CSM。如图所示</h4><p>如果检查test.CSV通过执行上述语句创建的数据库目录中的文件，其内容使用Notepad++打开如下：</p>
<p>这种格式可以被 Microsoft Excel 等电子表格应用程序读取，甚至写入。使用Microsoft Excel打开如图所示</p>
<h3 id="4-6-Memory-引擎：置于内存的表"><a href="#4-6-Memory-引擎：置于内存的表" class="headerlink" title="4.6 Memory 引擎：置于内存的表"></a>4.6 Memory 引擎：置于内存的表</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>Memory采用的逻辑介质是内存，响应速度很快，但是当mysqld守护进程崩溃的时候数据会丢失。另<br>外，要求存储的数据是数据长度不变的格式，比如，Blob和Text类型的数据不可用(长度不固定的)。</p>
<p><strong>主要特征：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Memory同时支持哈希（HASH）索引和B+树索引。</span><br><span class="line">Memory表至少比MyISAM表要快一个数量级。</span><br><span class="line">MEMORY表的大小是受到限制的。表的大小主要取决于两个参数，分别是max_rows和</span><br><span class="line">max_heap_table_size。其中，max_rows可以在创建表时指定；max_heap_table_size的大小默</span><br><span class="line">认为16MB，可以按需要进行扩大。</span><br><span class="line">数据文件与索引文件分开存储。</span><br><span class="line">缺点：其数据易丢失，生命周期短。基于这个缺陷，选择MEMORY存储引擎时需要特别小心。</span><br></pre></td></tr></table></figure>

<p><strong>使用Memory存储引擎的场景：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 目标数据比较小，而且非常频繁的进行访问，在内存中存放数据，如果太大的数据会造成内存溢</span><br><span class="line">出。可以通过参数max_heap_table_size控制Memory表的大小，限制Memory表的最大的大</span><br><span class="line">小。</span><br><span class="line">2. 如果数据是临时的，而且必须立即可用得到，那么就可以放在内存中。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 1 | record one |</span><br><span class="line">| 2 | record two |</span><br><span class="line">+---+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;1&quot;,&quot;record one&quot;</span><br><span class="line">&quot;2&quot;,&quot;record two&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. 存储在Memory表中的数据如果突然间丢失的话也没有太大的关系。</span><br></pre></td></tr></table></figure>

<h3 id="4-7-Federated-引擎：访问远程表"><a href="#4-7-Federated-引擎：访问远程表" class="headerlink" title="4.7 Federated 引擎：访问远程表"></a>4.7 Federated 引擎：访问远程表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Federated引擎是访问其他MySQL服务器的一个代理，尽管该引擎看起来提供了一种很好的跨服务</span><br><span class="line">器的灵活性，但也经常带来问题，因此默认是禁用的。</span><br></pre></td></tr></table></figure>

<h3 id="4-8-Merge引擎：管理多个MyISAM表构成的表集合"><a href="#4-8-Merge引擎：管理多个MyISAM表构成的表集合" class="headerlink" title="4.8 Merge引擎：管理多个MyISAM表构成的表集合"></a>4.8 Merge引擎：管理多个MyISAM表构成的表集合</h3><h3 id="4-9-NDB引擎：MySQL集群专用存储引擎"><a href="#4-9-NDB引擎：MySQL集群专用存储引擎" class="headerlink" title="4.9 NDB引擎：MySQL集群专用存储引擎"></a>4.9 NDB引擎：MySQL集群专用存储引擎</h3><p>也叫做 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集<br>群。</p>
<h3 id="4-10-引擎对比"><a href="#4-10-引擎对比" class="headerlink" title="4.10 引擎对比"></a>4.10 引擎对比</h3><p>MySQL中同一个数据库，不同的表可以选择不同的存储引擎。如下表对常用存储引擎做出了对比。</p>
<h4 id><a href="#" class="headerlink" title></a></h4><table>
<thead>
<tr>
<th>特点</th>
<th>MyISAM</th>
<th>InnoDB</th>
<th>MEMORY</th>
<th>MERGE</th>
<th>NDB</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>有</td>
<td>64TB</td>
<td>有</td>
<td>没有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>锁机制</td>
<td>表锁，即使操作一条</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>记录也会锁住整个</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>表，不适合高并发的</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>操作</td>
<td>行锁，操作时只锁某一行，不对其它行有影响，适合高并发</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>的操作</td>
<td>表锁</td>
<td>表锁</td>
<td>行锁</td>
<td></td>
<td></td>
</tr>
<tr>
<td>B树索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td></td>
<td></td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>集群索引</td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据缓存</td>
<td></td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>索引缓存</td>
<td>只缓存索引，不缓存</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>真实数据</td>
<td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
</tr>
<tr>
<td>数据可压缩</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>空间使用</td>
<td>低</td>
<td>高</td>
<td>N&#x2F;A</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>内存使用</td>
<td>低</td>
<td>高</td>
<td>中等</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>批量插入的速度</td>
<td>高</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="5-MyISAM和InnoDB"><a href="#5-MyISAM和InnoDB" class="headerlink" title="5. MyISAM和InnoDB"></a>5. MyISAM和InnoDB</h2><p><strong>很多人对 InnoDB 和 MyISAM 的取舍存在疑问，到底选择哪个比较好呢？</strong></p>
<p>MySQL 5. 5 之前的默认存储引擎是MyISAM， 5. 5 之后改为了InnoDB。</p>
<table>
<thead>
<tr>
<th>对比项</th>
<th>MyISAM</th>
<th>InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td>外键</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>事务</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>行表锁</td>
<td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td>
<td>行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td>
</tr>
<tr>
<td>缓存</td>
<td>只缓存索引，不缓存真实数据</td>
<td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>
</tr>
<tr>
<td>自带系统表使用</td>
<td>Y</td>
<td>N</td>
</tr>
<tr>
<td>关注点</td>
<td>性能：节省资源、消耗少、简单业务</td>
<td>事务：并发写、事务、更大资源</td>
</tr>
<tr>
<td>默认安装</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>默认使用</td>
<td>N</td>
<td></td>
</tr>
</tbody></table>
<h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h2 id="6-阿里巴巴、淘宝用哪个"><a href="#6-阿里巴巴、淘宝用哪个" class="headerlink" title="6. 阿里巴巴、淘宝用哪个"></a>6. 阿里巴巴、淘宝用哪个</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Percona 为 MySQL 数据库服务器进行了改进，在功能和性能上较 MySQL 有很显著的提升。</span><br><span class="line">该版本提升了在高负载情况下的 InnoDB 的性能、为 DBA 提供一些非常有用的性能诊断工具；另外</span><br><span class="line">有更多的参数和命令来控制服务器行为。</span><br><span class="line">该公司新建了一款存储引擎叫Xtradb完全可以替代Innodb，并且在性能和并发上做得更好</span><br><span class="line">阿里巴巴大部分mysql数据库其实使用的percona的原型加以修改。</span><br></pre></td></tr></table></figure>

<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><h3 id="1-、InnoDB表的优势"><a href="#1-、InnoDB表的优势" class="headerlink" title="1 、InnoDB表的优势"></a>1 、InnoDB表的优势</h3><p>InnoDB存储引擎在实际应用中拥有诸多优势，比如操作便利、提高了数据库的性能、维护成本低等。如<br>果由于硬件或软件的原因导致服务器崩溃，那么在重启服务器之后不需要进行额外的操作。InnoDB崩溃<br>恢复功能自动将之前提交的内容定型，然后撤销没有提交的进程，重启之后继续从崩溃点开始执行。</p>
<p>InnoDB存储引擎在主内存中维护缓冲池，高频率使用的数据将在内存中直接被处理。这种缓存方式应用<br>于多种信息，加速了处理进程。</p>
<h4 id="在专用服务器上，物理内存中高达80-的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以"><a href="#在专用服务器上，物理内存中高达80-的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以" class="headerlink" title="在专用服务器上，物理内存中高达80%的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以"></a>在专用服务器上，物理内存中高达80%的部分被应用于缓冲池。如果需要将数据插入不同的表中，可以</h4><h4 id="设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插"><a href="#设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插" class="headerlink" title="设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插"></a>设置外键加强数据的完整性。更新或者删除数据，关联数据将会被自动更新或删除。如果试图将数据插</h4><h4 id="入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃，"><a href="#入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃，" class="headerlink" title="入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃，"></a>入从表，但在主表中没有对应的数据，插入的数据将被自动移除。如果磁盘或内存中的数据出现崩溃，</h4><h4 id="在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被"><a href="#在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被" class="headerlink" title="在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被"></a>在使用脏数据之前，校验和机制会发出警告。当每个表的主键都设置合理时，与这些列有关的操作会被</h4><p>自动优化。插入、更新和删除操作通过做改变缓冲自动机制进行优化。InnoDB不仅支持当前读写，也会<br>缓冲改变的数据到数据流磁盘。</p>
<p>InnoDB的性能优势不只存在于长时运行查询的大型表。在同一列多次被查询时，自适应哈希索引会提高<br>查询的速度。使用InnoDB可以压缩表和相关的索引，可以在不影响性能和可用性的情况下创建或删除索<br>引。对于大型文本和BLOB数据，使用动态行形式，这种存储布局更高效。通过查询<br>INFORMATION_SCHEMA库中的表可以监控存储引擎的内部工作。在同一个语句中，InnoDB表可以与其他<br>存储引擎表混用。即使有些操作系统限制文件大小为2GB，InnoDB仍然可以处理。当处理大数据量时，<br>InnoDB兼顾CPU，以达到最大性能。</p>
<h3 id="2-、InnoDB和ACID模型"><a href="#2-、InnoDB和ACID模型" class="headerlink" title="2 、InnoDB和ACID模型"></a>2 、InnoDB和ACID模型</h3><h4 id="ACID模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应"><a href="#ACID模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应" class="headerlink" title="ACID模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应"></a>ACID模型是一系列数据库设计规则，这些规则着重强调可靠性，而可靠性对于商业数据和任务关键型应</h4><p>用非常重要。MySQL包含类似InnoDB存储引擎的组件，与ACID模型紧密相连，这样出现意外时，数据不<br>会崩溃，结果不会失真。如果依赖ACID模型，可以不使用一致性检查和崩溃恢复机制。如果拥有额外的<br>软件保护，极可靠的硬件或者应用可以容忍一小部分的数据丢失和不一致，可以将MySQL设置调整为只<br>依赖部分ACID特性，以达到更高的性能。下面讲解InnoDB存储引擎与ACID模型相同作用的四个方面。</p>
<p><strong>1. 原子方面</strong> ACID的原子方面主要涉及InnoDB事务，与MySQL相关的特性主要包括：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自动提交设置。</span><br><span class="line">COMMIT语句。</span><br><span class="line">ROLLBACK语句。</span><br><span class="line">操作INFORMATION_SCHEMA库中的表数据。</span><br></pre></td></tr></table></figure>

<p><strong>2. 一致性方面</strong> ACID模型的一致性主要涉及保护数据不崩溃的内部InnoDB处理过程，与MySQL相关的特性<br>主要包括：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InnoDB双写缓存。</span><br><span class="line">InnoDB崩溃恢复。</span><br></pre></td></tr></table></figure>

<p><strong>3. 隔离方面</strong> 隔离是应用于事务的级别，与MySQL相关的特性主要包括：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自动提交设置。</span><br><span class="line">SET ISOLATION LEVEL语句。</span><br><span class="line">InnoDB锁的低级别信息。</span><br></pre></td></tr></table></figure>

<p><strong>4. 耐久性方面</strong> ACID模型的耐久性主要涉及与硬件配置相互影响的MySQL软件特性。由于硬件复杂多样<br>化，耐久性方面没有具体的规则可循。与MySQL相关的特性有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InnoDB双写缓存，通过innodb_doublewrite配置项配置。</span><br><span class="line">配置项innodb_flush_log_at_trx_commit。</span><br><span class="line">配置项sync_binlog。</span><br><span class="line">配置项innodb_file_per_table。</span><br><span class="line">存储设备的写入缓存。</span><br><span class="line">存储设备的备用电池缓存。</span><br><span class="line">运行MySQL的操作系统。</span><br><span class="line">持续的电力供应。</span><br><span class="line">备份策略。</span><br><span class="line">对分布式或托管的应用，最主要的在于硬件设备的地点以及网络情况。</span><br></pre></td></tr></table></figure>

<h3 id="3-、InnoDB架构"><a href="#3-、InnoDB架构" class="headerlink" title="3 、InnoDB架构"></a>3 、InnoDB架构</h3><h4 id="1-缓冲池-缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的"><a href="#1-缓冲池-缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的" class="headerlink" title="1. 缓冲池 缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的"></a>1. 缓冲池 缓冲池是主内存中的一部分空间，用来缓存已使用的表和索引数据。缓冲池使得经常被使用的</h4><h4 id="数据能够直接在内存中获得，从而提高速度。"><a href="#数据能够直接在内存中获得，从而提高速度。" class="headerlink" title="数据能够直接在内存中获得，从而提高速度。"></a>数据能够直接在内存中获得，从而提高速度。</h4><h4 id="2-更改缓存-更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索"><a href="#2-更改缓存-更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索" class="headerlink" title="2. 更改缓存 更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索"></a>2. 更改缓存 更改缓存是一个特殊的数据结构，当受影响的索引页不在缓存中时，更改缓存会缓存辅助索</h4><h4 id="引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索"><a href="#引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索" class="headerlink" title="引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索"></a>引页的更改。索引页被其他读取操作时会加载到缓存池，缓存的更改内容就会被合并。不同于集群索</h4><h4 id="引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁"><a href="#引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁" class="headerlink" title="引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁"></a>引，辅助索引并非独一无二的。当系统大部分闲置时，清除操作会定期运行，将更新的索引页刷入磁</h4><p>盘。更新缓存合并期间，可能会大大降低查询的性能。在内存中，更新缓存占用一部分InnoDB缓冲池。<br>在磁盘中，更新缓存是系统表空间的一部分。更新缓存的数据类型由innodb_change_buffering配置项管<br>理。</p>
<p><strong>3. 自适应哈希索引</strong> 自适应哈希索引将负载和足够的内存结合起来，使得InnoDB像内存数据库一样运行，<br>不需要降低事务上的性能或可靠性。这个特性通过innodb_adaptive_hash_index选项配置，或者通过–<br>skip-innodb_adaptive_hash_index命令行在服务启动时关闭。</p>
<p><strong>4. 重做日志缓存</strong> 重做日志缓存存放要放入重做日志的数据。重做日志缓存大小通过<br>innodb_log_buffer_size配置项配置。重做日志缓存会定期地将日志文件刷入磁盘。大型的重做日志缓存<br>使得大型事务能够正常运行而不需要写入磁盘。</p>
<p><strong>5. 系统表空间</strong> 系统表空间包括InnoDB数据字典、双写缓存、更新缓存和撤销日志，同时也包括表和索引<br>数据。多表共享，系统表空间被视为共享表空间。</p>
<p><strong>6. 双写缓存</strong> 双写缓存位于系统表空间中，用于写入从缓存池刷新的数据页。只有在刷新并写入双写缓存<br>后，InnoDB才会将数据页写入合适的位置。</p>
<p><strong>7. 撤销日志</strong> 撤销日志是一系列与事务相关的撤销记录的集合，包含如何撤销事务最近的更改。如果其他<br>事务要查询原始数据，可以从撤销日志记录中追溯未更改的数据。撤销日志存在于撤销日志片段中，这<br>些片段包含于回滚片段中。</p>
<p><strong>8. 每个表一个文件的表空间</strong> 每个表一个文件的表空间是指每个单独的表空间创建在自身的数据文件中，<br>而不是系统表空间中。这个功能通过innodb_file_per_table配置项开启。每个表空间由一个单独的.ibd数<br>据文件代表，该文件默认被创建在数据库目录中。</p>
<p><strong>9. 通用表空间</strong> 使用CREATE TABLESPACE语法创建共享的InnoDB表空间。通用表空间可以创建在MySQL数<br>据目录之外能够管理多个表并支持所有行格式的表。</p>
<p><strong>10. 撤销表空间</strong> 撤销表空间由一个或多个包含撤销日志的文件组成。撤销表空间的数量由<br>innodb_undo_tablespaces配置项配置。</p>
<p><strong>11. 临时表空间</strong> 用户创建的临时表空间和基于磁盘的内部临时表都创建于临时表空间。<br>innodb_temp_data_file_path配置项定义了相关的路径、名称、大小和属性。如果该值为空，默认会在<br>innodb_data_home_dir变量指定的目录下创建一个自动扩展的数据文件。</p>
<p><strong>12. 重做日志</strong> 重做日志是基于磁盘的数据结构，在崩溃恢复期间使用，用来纠正数据。正常操作期间，<br>重做日志会将请求数据进行编码，这些请求会改变InnoDB表数据。遇到意外崩溃后，未完成的更改会自<br>动在初始化期间重新进行。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql逻辑架构</title>
    <url>/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Mysql逻辑架构"><a href="#Mysql逻辑架构" class="headerlink" title="Mysql逻辑架构"></a>Mysql逻辑架构</h1><h2 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1. 逻辑架构剖析"></a>1. 逻辑架构剖析</h2><h2 id="1-1-服务器处理客户端请求"><a href="#1-1-服务器处理客户端请求" class="headerlink" title="1. 1 服务器处理客户端请求"></a>1. 1 服务器处理客户端请求</h2><h5 id="那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为例展示："><a href="#那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为例展示：" class="headerlink" title="那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为例展示："></a>那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为例展示：</h5><p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/1.png"></p>
<h5 id="下面具体展开看一下："><a href="#下面具体展开看一下：" class="headerlink" title="下面具体展开看一下："></a>下面具体展开看一下：</h5><p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/2.png"></p>
<h3 id="1-2-Connectors"><a href="#1-2-Connectors" class="headerlink" title="1.2 Connectors"></a>1.2 Connectors</h3><h3 id="1-3-第-1-层：连接层"><a href="#1-3-第-1-层：连接层" class="headerlink" title="1.3 第 1 层：连接层"></a>1.3 第 1 层：连接层</h3><p>系统（客户端）访问MySQL服务器前，做的第一件事就是建立TCP连接。</p>
<p>经过三次握手建立连接成功后，MySQL服务器对TCP传输过来的账号密码做身份认证、权限获取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行</span><br><span class="line">用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依</span><br><span class="line">赖于此时读到的权限</span><br></pre></td></tr></table></figure>

<p>TCP连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后<br>面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p>
<h3 id="1-4-第-2-层：服务层"><a href="#1-4-第-2-层：服务层" class="headerlink" title="1.4 第 2 层：服务层"></a>1.4 第 2 层：服务层</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL Interface: SQL接口</span><br><span class="line">接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL</span><br><span class="line">Interface</span><br><span class="line">MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定</span><br><span class="line">义函数等多种SQL语言接口</span><br><span class="line">Parser: 解析器</span><br><span class="line">在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构</span><br><span class="line">传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错</span><br><span class="line">误，那么就说明这个SQL语句是不合理的。</span><br><span class="line">在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建语法树，并根据数据字</span><br><span class="line">典丰富查询语法树，会验证该客户端是否具有执行该查询的权限。创建好语法树后，MySQL还</span><br><span class="line">会对SQl查询进行语法上的优化，进行查询重写。</span><br><span class="line">Optimizer: 查询优化器</span><br></pre></td></tr></table></figure>

<h5 id="SQL语句在语法解析之后、查询之前会使用查询优化器确定-SQL-语句的执行路径，生成一个"><a href="#SQL语句在语法解析之后、查询之前会使用查询优化器确定-SQL-语句的执行路径，生成一个" class="headerlink" title="SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个"></a>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个</h5><h5 id="执行计划。"><a href="#执行计划。" class="headerlink" title="执行计划。"></a>执行计划。</h5><h5 id="这个执行计划表明应该使用哪些索引进行查询（全表检索还是使用索引检索），表之间的连"><a href="#这个执行计划表明应该使用哪些索引进行查询（全表检索还是使用索引检索），表之间的连" class="headerlink" title="这个执行计划表明应该使用哪些索引进行查询（全表检索还是使用索引检索），表之间的连"></a>这个执行计划表明应该使用哪些索引进行查询（全表检索还是使用索引检索），表之间的连</h5><h5 id="接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将"><a href="#接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将" class="headerlink" title="接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将"></a>接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将</h5><h5 id="查询结果返回给用户。"><a href="#查询结果返回给用户。" class="headerlink" title="查询结果返回给用户。"></a>查询结果返回给用户。</h5><h5 id="它使用“选取-投影-连接”策略进行查询。例如："><a href="#它使用“选取-投影-连接”策略进行查询。例如：" class="headerlink" title="它使用“选取-投影-连接”策略进行查询。例如："></a>它使用“选取-投影-连接”策略进行查询。例如：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个SELECT查询先根据WHERE语句进行选取，而不是将表全部查询出来以后再进行gender过</span><br><span class="line">滤。 这个SELECT查询先根据id和name进行属性投影，而不是将属性全部取出以后再进行过</span><br><span class="line">滤，将这两个查询条件连接起来生成最终查询结果。</span><br><span class="line">Caches &amp; Buffers： 查询缓存组件</span><br><span class="line">MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结</span><br><span class="line">果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过</span><br><span class="line">程了，直接将结果反馈给客户端。</span><br><span class="line">这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</span><br><span class="line">这个查询缓存可以在不同客户端之间共享。</span><br><span class="line">从MySQL 5.7.20开始，不推荐使用查询缓存，并在MySQL 8.0中删除。</span><br></pre></td></tr></table></figure>

<h3 id="1-5-第-3-层：引擎层"><a href="#1-5-第-3-层：引擎层" class="headerlink" title="1. 5 第 3 层：引擎层"></a>1. 5 第 3 层：引擎层</h3><p>插件式存储引擎层（ Storage Engines）， <strong>真正的负责了MySQL中数据的存储和提取，对物理服务器级别<br>维护的底层数据执行操作</strong> ，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样<br>我们可以根据自己的实际需要进行选取。</p>
<p>MySQL 8.0.25默认支持的存储引擎如下：</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/3.png"></p>
<h3 id="1-6-存储层"><a href="#1-6-存储层" class="headerlink" title="1. 6 存储层"></a>1. 6 存储层</h3><h5 id="所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在文件系统上，以文件的方式存"><a href="#所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在文件系统上，以文件的方式存" class="headerlink" title="所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在文件系统上，以文件的方式存"></a>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在文件系统上，以文件的方式存</h5><p>在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设<br>备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用<br>DAS、NAS、SAN等各种存储系统。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id,name FROM student WHERE gender = &#x27;女&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小故事：</span><br><span class="line">如果我问你9+8×16-3×2×17的值是多少，你可能会用计算器去算一下，最终结果 35 。如果再问你一遍9+8×16-</span><br><span class="line">3×2×17的值是多少，你还用再傻呵呵的再算一遍吗？我们刚刚已经算过了，直接说答案就好了。</span><br></pre></td></tr></table></figure>

<h3 id="1-7-小结"><a href="#1-7-小结" class="headerlink" title="1. 7 小结"></a>1. 7 小结</h3><p>MySQL架构图本节开篇所示。下面为了熟悉SQL执行流程方便，我们可以简化如下：</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/4.png"></p>
<h5 id="简化为三层结构："><a href="#简化为三层结构：" class="headerlink" title="简化为三层结构："></a>简化为三层结构：</h5><h5 id="1-连接层：客户端和服务器端建立连接，客户端发送-SQL-至服务器端；"><a href="#1-连接层：客户端和服务器端建立连接，客户端发送-SQL-至服务器端；" class="headerlink" title="1. 连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；"></a>1. 连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；</h5><h5 id="2-SQL-层（服务层）：对-SQL-语句进行查询处理；与数据库文件的存储方式无关；"><a href="#2-SQL-层（服务层）：对-SQL-语句进行查询处理；与数据库文件的存储方式无关；" class="headerlink" title="2. SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；"></a>2. SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；</h5><h5 id="3-存储引擎层：与数据库文件打交道，负责数据的存储和读取。"><a href="#3-存储引擎层：与数据库文件打交道，负责数据的存储和读取。" class="headerlink" title="3. 存储引擎层：与数据库文件打交道，负责数据的存储和读取。"></a>3. 存储引擎层：与数据库文件打交道，负责数据的存储和读取。</h5><h2 id="2-SQL执行流程"><a href="#2-SQL执行流程" class="headerlink" title="2. SQL执行流程"></a>2. SQL执行流程</h2><h3 id="2-1-MySQL-中的-SQL执行流程"><a href="#2-1-MySQL-中的-SQL执行流程" class="headerlink" title="2. 1 MySQL 中的 SQL执行流程"></a>2. 1 MySQL 中的 SQL执行流程</h3><p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/5.png"></p>
<p><strong>MySQL的查询流程：</strong></p>
<p><strong>1. 查询缓存</strong> ：Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没<br>有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃<br>了这个功能。</p>
<p><strong>大多数情况查询缓存就是个鸡肋，为什么呢？</strong></p>
<h5 id="查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在"><a href="#查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在" class="headerlink" title="查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在"></a>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在</h5><p>MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。这就意味着查询匹配的鲁棒性大大降<br>低，只有相同的查询操作才会命中查询缓存。两个查询请求在任何字符上的不同（例如：空格、注释、<br>大小写），都会导致缓存不会命中。因此 MySQL 的查询缓存命中率不高。</p>
<p>同时，如果查询请求中包含某些系统函数、用户自定义变量和函数、一些系统表，如 mysql 、<br>information_schema、 performance_schema 数据库中的表，那这个请求就不会被缓存。以某些系统函数<br>举例，可能同样的函数的两次调用会产生不一样的结果，比如函数NOW，每次调用都会产生最新的当前<br>时间，如果在一个查询请求中调用了这个函数，那即使查询请求的文本信息都一样，那不同时间的两次<br>查询也应该得到不同的结果，如果在第一次查询时就缓存了，那第二次查询的时候直接使用第一次查询<br>的结果就是错误的！</p>
<p>此外，既然是缓存，那就有它缓存失效的时候。MySQL的缓存系统会监测涉及到的每张表，只要该表的<br>结构或者数据被修改，如对该表使用了INSERT、 UPDATE、DELETE、TRUNCATE TABLE、ALTER<br>TABLE、DROP TABLE或 DROP DATABASE语句，那使用该表的所有高速缓存查询都将变为无效并从高<br>速缓存中删除！对于更新压力大的数据库来说，查询缓存的命中率会非常低。</p>
<p><strong>2. 解析器</strong> ：在解析器中对 SQL 语句进行语法分析、语义分析。</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/6.png"></p>
<p>分析器先做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面<br>的字符串分别是什么，代表什么。 MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语<br>句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name FROM employees WHERE employee_id = 101;</span><br></pre></td></tr></table></figure>

<p>接着，要做“语法分析”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输<br>入的这个 SQL 语句是否满足 MySQL 语法。</p>
<p>select department_id,job_id,avg(salary) from employees group by department_id;</p>
<p>如果SQL语句正确，则会生成一个这样的语法树：</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/7.png"></p>
<h5 id="3-优化器-：在优化器中会确定-SQL-语句的执行路径，比如是根据全表检索，还是根据索引检索等。"><a href="#3-优化器-：在优化器中会确定-SQL-语句的执行路径，比如是根据全表检索，还是根据索引检索等。" class="headerlink" title="3. 优化器 ：在优化器中会确定 SQL 语句的执行路径，比如是根据全表检索，还是根据索引检索等。"></a>3. 优化器 ：在优化器中会确定 SQL 语句的执行路径，比如是根据全表检索，还是根据索引检索等。</h5><p>举例：如下语句是执行两个表的 join：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from test1 join test2 using(ID)</span><br><span class="line">where test1.name=&#x27;zhangwei&#x27; and test2.name=&#x27;mysql高级课程&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方案 1 ：可以先从表 test1 里面取出 name=&#x27;zhangwei&#x27;的记录的 ID 值，再根据 ID 值关联到表 test2，再判</span><br><span class="line">断 test2 里面 name的值是否等于 &#x27;mysql高级课程&#x27;。</span><br><span class="line">方案 2 ：可以先从表 test2 里面取出 name=&#x27;mysql高级课程&#x27; 的记录的 ID 值，再根据 ID 值关联到 test1，</span><br><span class="line">再判断 test1 里面 name的值是否等于 zhangwei。</span><br><span class="line"></span><br><span class="line">这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化</span><br><span class="line">器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。。</span><br></pre></td></tr></table></figure>

<h5 id="在查询优化器中，可以分为逻辑查询优化阶段和物理查询优化阶段。"><a href="#在查询优化器中，可以分为逻辑查询优化阶段和物理查询优化阶段。" class="headerlink" title="在查询优化器中，可以分为逻辑查询优化阶段和物理查询优化阶段。"></a>在查询优化器中，可以分为逻辑查询优化阶段和物理查询优化阶段。</h5><h5 id="4-执行器-："><a href="#4-执行器-：" class="headerlink" title="4. 执行器 ："></a>4. 执行器 ：</h5><h5 id="截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了执行器阶段。"><a href="#截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了执行器阶段。" class="headerlink" title="截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了执行器阶段。"></a>截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了执行器阶段。</h5><p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/8.png"></p>
<h5 id="在执行之前需要判断该用户是否具备权限。如果没有，就会返回权限错误。如果具备权限，就执行-SQL查询并返回结果。在-MySQL8-0-以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。"><a href="#在执行之前需要判断该用户是否具备权限。如果没有，就会返回权限错误。如果具备权限，就执行-SQL查询并返回结果。在-MySQL8-0-以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。" class="headerlink" title="在执行之前需要判断该用户是否具备权限。如果没有，就会返回权限错误。如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。"></a>在执行之前需要判断该用户是否具备权限。如果没有，就会返回权限错误。如果具备权限，就执行 SQL查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from test where id= 1 ;</span><br></pre></td></tr></table></figure>



<p>比如：表 test 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 1 ，如果不是则跳过，如果是则将这行存在结果集中；</span><br><span class="line">调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</span><br><span class="line"></span><br><span class="line">执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</span><br></pre></td></tr></table></figure>



<p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p>
<p>SQL 语句在 MySQL 中的流程是：SQL语句→查询缓存→解析器→优化器→执行器。</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/9.png"></p>
<h3 id="2-2-MySQL-8-中SQL执行原理"><a href="#2-2-MySQL-8-中SQL执行原理" class="headerlink" title="2. 2 MySQL 8 中SQL执行原理"></a>2. 2 MySQL 8 中SQL执行原理</h3><h4 id="1-确认profiling-是否开启"><a href="#1-确认profiling-是否开启" class="headerlink" title="1. 确认profiling 是否开启"></a>1. 确认profiling 是否开启</h4><p>profiling&#x3D;0 代表关闭，我们需要把 profiling 打开，即设置为 1 ：</p>
<h4 id="2-多次执行相同SQL查询"><a href="#2-多次执行相同SQL查询" class="headerlink" title="2. 多次执行相同SQL查询"></a>2. 多次执行相同SQL查询</h4><h5 id="然后我们执行一个-SQL-查询（你可以执行任何一个-SQL-查询）："><a href="#然后我们执行一个-SQL-查询（你可以执行任何一个-SQL-查询）：" class="headerlink" title="然后我们执行一个 SQL 查询（你可以执行任何一个 SQL 查询）："></a>然后我们执行一个 SQL 查询（你可以执行任何一个 SQL 查询）：</h5><h4 id="3-查看profiles"><a href="#3-查看profiles" class="headerlink" title="3. 查看profiles"></a>3. 查看profiles</h4><p>查看当前会话所产生的所有 profiles：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@profiling;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;profiling&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set profiling= 1 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profiles;  # 显示最近的几次查询</span><br></pre></td></tr></table></figure>

<h4 id="4-查看profile"><a href="#4-查看profile" class="headerlink" title="4. 查看profile"></a>4. 查看profile</h4><h5 id="显示执行计划，查看程序的执行步骤："><a href="#显示执行计划，查看程序的执行步骤：" class="headerlink" title="显示执行计划，查看程序的执行步骤："></a>显示执行计划，查看程序的执行步骤：</h5><p>当然你也可以查询指定的 Query ID，比如：</p>
<h5 id="查询-SQL-的执行时间结果和上面是一样的。"><a href="#查询-SQL-的执行时间结果和上面是一样的。" class="headerlink" title="查询 SQL 的执行时间结果和上面是一样的。"></a>查询 SQL 的执行时间结果和上面是一样的。</h5><h5 id="此外，还可以查询更丰富的内容："><a href="#此外，还可以查询更丰富的内容：" class="headerlink" title="此外，还可以查询更丰富的内容："></a>此外，还可以查询更丰富的内容：</h5><h5 id="继续："><a href="#继续：" class="headerlink" title="继续："></a>继续：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profile;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profile for query 7 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profile cpu,block io for query 6 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profile cpu,block io for query 7 ;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-MySQL-5-7-中SQL执行原理"><a href="#2-3-MySQL-5-7-中SQL执行原理" class="headerlink" title="2. 3 MySQL 5. 7 中SQL执行原理"></a>2. 3 MySQL 5. 7 中SQL执行原理</h3><p>上述操作在MySQL5.7中测试，发现前后两次相同的sql语句，执行的查询过程仍然是相同的。不是会使用<br>缓存吗？这里我们需要显式开启查询缓存模式。在MySQL5.7中如下设置：</p>
<h4 id="1-配置文件中开启查询缓存"><a href="#1-配置文件中开启查询缓存" class="headerlink" title="1. 配置文件中开启查询缓存"></a>1. 配置文件中开启查询缓存</h4><p>在 &#x2F;etc&#x2F;my.cnf 中新增一行：</p>
<h4 id="2-重启mysql服务"><a href="#2-重启mysql服务" class="headerlink" title="2. 重启mysql服务"></a>2. 重启mysql服务</h4><h4 id="3-开启查询执行计划"><a href="#3-开启查询执行计划" class="headerlink" title="3. 开启查询执行计划"></a>3. 开启查询执行计划</h4><p>由于重启过服务，需要重新执行如下指令，开启profiling。</p>
<h4 id="4-执行语句两次："><a href="#4-执行语句两次：" class="headerlink" title="4. 执行语句两次："></a>4. 执行语句两次：</h4><h4 id="5-查看profiles"><a href="#5-查看profiles" class="headerlink" title="5. 查看profiles"></a>5. 查看profiles</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query_cache_type= 1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set profiling= 1 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from locations;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from locations;</span><br></pre></td></tr></table></figure>

<h4 id="6-查看profile"><a href="#6-查看profile" class="headerlink" title="6. 查看profile"></a>6. 查看profile</h4><h5 id="显示执行计划，查看程序的执行步骤：-1"><a href="#显示执行计划，查看程序的执行步骤：-1" class="headerlink" title="显示执行计划，查看程序的执行步骤："></a>显示执行计划，查看程序的执行步骤：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profile for query 1 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profile for query 2 ;</span><br></pre></td></tr></table></figure>

<h5 id="结论不言而喻。执行编号-2-时，比执行编号-1-时少了很多信息，从截图中可以看出查询语句直接从缓存中"><a href="#结论不言而喻。执行编号-2-时，比执行编号-1-时少了很多信息，从截图中可以看出查询语句直接从缓存中" class="headerlink" title="结论不言而喻。执行编号 2 时，比执行编号 1 时少了很多信息，从截图中可以看出查询语句直接从缓存中"></a>结论不言而喻。执行编号 2 时，比执行编号 1 时少了很多信息，从截图中可以看出查询语句直接从缓存中</h5><h5 id="获取数据。"><a href="#获取数据。" class="headerlink" title="获取数据。"></a>获取数据。</h5><h3 id="2-4-SQL语法顺序"><a href="#2-4-SQL语法顺序" class="headerlink" title="2.4 SQL语法顺序"></a>2.4 SQL语法顺序</h3><p>随着Mysql版本的更新换代，其优化器也在不断的升级，优化器会分析不同执行顺序产生的性能消耗不同<br>而动态调整执行顺序。</p>
<p>需求：查询每个部门年龄高于 20 岁的人数且高于 20 岁人数不能少于 2 人，显示人数最多的第一名部门信息</p>
<p>下面是经常出现的查询顺序：</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/10.png"></p>
<h3 id="2-5-Oracle中的SQL执行流程-了解"><a href="#2-5-Oracle中的SQL执行流程-了解" class="headerlink" title="2.5 Oracle中的SQL执行流程(了解)"></a>2.5 Oracle中的SQL执行流程(了解)</h3><p>Oracle 中采用了共享池来判断 SQL 语句是否存在缓存和执行计划，通过这一步骤我们可以知道应该采用<br>硬解析还是软解析。</p>
<p>我们先来看下 SQL 在 Oracle 中的执行过程：</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/11.png"></p>
<p>从上面这张图中可以看出，SQL 语句在 Oracle 中经历了以下的几个步骤。</p>
<p><strong>1 .语法检查：</strong> 检查 SQL 拼写是否正确，如果不正确，Oracle 会报语法错误。</p>
<p><strong>2 .语义检查：</strong> 检查 SQL 中的访问对象是否存在。比如我们在写 SELECT 语句的时候，列名写错了，系统<br>就会提示错误。语法检查和语义检查的作用是保证 SQL 语句没有错误。</p>
<p><strong>3 .权限检查：</strong> 看用户是否具备访问该数据的权限。</p>
<p><strong>4.共享池检查：</strong> 共享池（Shared Pool）是一块内存池， <strong>最主要的作用是缓存 SQL 语句和该语句的执行计<br>划。</strong> Oracle 通过检查共享池是否存在 SQL 语句的执行计划，来判断进行软解析，还是硬解析。那软解析<br>和硬解析又该怎么理解呢？</p>
<p>在共享池中，Oracle 首先对 SQL 语句进行 Hash 运算，然后根据 Hash 值在库缓存（Library Cache）中<br>查找，如果存在 SQL 语句的执行计划，就直接拿来执行，直接进入“执行器”的环节，这就是软解析。</p>
<p>如果没有找到 SQL 语句和执行计划，Oracle 就需要创建解析树进行解析，生成执行计划，进入“优化器”<br>这个步骤，这就是硬解析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5. 优化器：优化器中就是要进行硬解析，也就是决定怎么做，比如创建解析树，生成执行计划。</span><br><span class="line">6. 执行器：当有了解析树和执行计划之后，就知道了 SQL 该怎么被执行，这样就可以在执行器中执</span><br><span class="line">行语句了。</span><br></pre></td></tr></table></figure>

<p>共享池是 Oracle 中的术语，包括了库缓存，数据字典缓冲区等。我们上面已经讲到了库缓存区，它主要<br>缓存 SQL 语句和执行计划。而数据字典缓冲区存储的是 Oracle 中的对象定义，比如表、视图、索引等对<br>象。当对 SQL 语句进行解析的时候，如果需要相关的数据，会从数据字典缓冲区中提取。</p>
<p>库缓存这一个步骤，决定了 SQL 语句是否需要进行硬解析。为了提升 SQL 的执行效率，我们应该尽量<br>避免硬解析，因为在 SQL 的执行过程中，创建解析树，生成执行计划是很消耗资源的。</p>
<p>你可能会问，如何避免硬解析，尽量使用软解析呢？在 Oracle 中，绑定变量是它的一大特色。绑定变量<br>就是在 SQL 语句中使用变量，通过不同的变量取值来改变 SQL 的执行结果。这样做的好处是能提升软解<br>析的可能性，不足之处在于可能会导致生成的执行计划不够优化，因此是否需要绑定变量还需要视情况<br>而定。</p>
<p>举个例子，我们可以使用下面的查询语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * from player where player_id = 10001 ;</span><br></pre></td></tr></table></figure>

<p>你也可以使用绑定变量，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL&gt; select * from player where player_id = :player_id;</span><br></pre></td></tr></table></figure>

<p>这两个查询语句的效率在 Oracle 中是完全不同的。如果你在查询 player_id &#x3D; 10001 之后，还会查询10002 、 10003 之类的数据，那么每一次查询都会创建一个新的查询解析。而第二种方式使用了绑定变量，那么在第一次查询之后，在共享池中就会存在这类查询的执行计划，也就是软解析。 </p>
<p>因此， <strong>我们可以通过使用绑定变量来减少硬解析，减少 Oracle 的解析工作量。</strong> 但是这种方式也有缺点，使用动态 SQL 的方式，因为参数不同，会导致 SQL 的执行效率不同，同时 SQL 优化也会比较困难。</p>
<p><strong>Oracle的架构图：</strong></p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/12.png"></p>
<h5 id="简图："><a href="#简图：" class="headerlink" title="简图："></a>简图：</h5><p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/13.png"></p>
<h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>Oracle 和 MySQL 在进行 SQL 的查询上面有软件实现层面的差异。Oracle 提出了共享池的概念，通过共享<br>池来判断是进行软解析，还是硬解析。</p>
<h2 id="3-数据库缓冲池-buffer-pool"><a href="#3-数据库缓冲池-buffer-pool" class="headerlink" title="3. 数据库缓冲池(buffer pool)"></a>3. 数据库缓冲池(buffer pool)</h2><p>InnoDB存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页<br>面（包括读页面、写页面、创建新页面等操作）。而磁盘 I&#x2F;O 需要消耗的时间很多，而在内存中进行操<br>作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请占用内存来作为<br>数据缓冲池，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的Buffer Pool之后才可以访<br>问。</p>
<p>这样做的好处是可以让磁盘活动最小化，从而减少与磁盘直接进行 I&#x2F;O 的时间。要知道，这种策略对提<br>升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p>
<h3 id="3-1-缓冲池-vs-查询缓存"><a href="#3-1-缓冲池-vs-查询缓存" class="headerlink" title="3.1 缓冲池 vs 查询缓存"></a>3.1 缓冲池 vs 查询缓存</h3><h5 id="缓冲池和查询缓存是一个东西吗？不是。"><a href="#缓冲池和查询缓存是一个东西吗？不是。" class="headerlink" title="缓冲池和查询缓存是一个东西吗？不是。"></a>缓冲池和查询缓存是一个东西吗？不是。</h5><h4 id="1-缓冲池（Buffer-Pool）"><a href="#1-缓冲池（Buffer-Pool）" class="headerlink" title="1. 缓冲池（Buffer Pool）"></a>1. 缓冲池（Buffer Pool）</h4><p>首先我们需要了解在 InnoDB 存储引擎中，缓冲池都包括了哪些。</p>
<p>在 InnoDB 存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种数据的缓存，如下图所示：</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/14.png"></p>
<p>从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典信息等。</p>
<p><strong>缓存池的重要性：</strong></p>
<p><strong>缓存原则：</strong></p>
<p>“位置 * 频次”这个原则，可以帮我们对 I&#x2F;O 访问效率进行优化。</p>
<p>首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p>
<p>其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200 G，但是内存只有 16 G，缓冲<br>池大小只有 1 G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会优先对使用频次高的热数据进行加载。</p>
<p><strong>缓冲池的预读特性：</strong></p>
<h4 id="2-查询缓存"><a href="#2-查询缓存" class="headerlink" title="2. 查询缓存"></a>2. 查询缓存</h4><h5 id="那么什么是查询缓存呢？"><a href="#那么什么是查询缓存呢？" class="headerlink" title="那么什么是查询缓存呢？"></a>那么什么是查询缓存呢？</h5><h5 id="查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在-1"><a href="#查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在-1" class="headerlink" title="查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在"></a>查询缓存是提前把查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在</h5><p>MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表<br>发生变化，查询缓存就会失效，因此命中率低。</p>
<h3 id="3-2-缓冲池如何读取数据"><a href="#3-2-缓冲池如何读取数据" class="headerlink" title="3. 2 缓冲池如何读取数据"></a>3. 2 缓冲池如何读取数据</h3><h5 id="缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。"><a href="#缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。" class="headerlink" title="缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。"></a>缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。</h5><h5 id="缓存在数据库中的结构和作用如下图所示："><a href="#缓存在数据库中的结构和作用如下图所示：" class="headerlink" title="缓存在数据库中的结构和作用如下图所示："></a>缓存在数据库中的结构和作用如下图所示：</h5><p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/15.png"></p>
<h5 id="如果我们执行-SQL-语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗？"><a href="#如果我们执行-SQL-语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗？" class="headerlink" title="如果我们执行 SQL 语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗？"></a>如果我们执行 SQL 语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗？</h5><h3 id="3-3-查看-x2F-设置缓冲池的大小"><a href="#3-3-查看-x2F-设置缓冲池的大小" class="headerlink" title="3. 3 查看&#x2F;设置缓冲池的大小"></a>3. 3 查看&#x2F;设置缓冲池的大小</h3><p>如果你使用的是 InnoDB 存储引擎，可以通过查看 innodb_buffer_pool_size 变量来查看缓冲池的大<br>小。命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;innodb_buffer_pool_size&#x27;;</span><br></pre></td></tr></table></figure>

<p>你能看到此时 InnoDB 的缓冲池大小只有 134217728 &#x2F; 1024 &#x2F; 1024 &#x3D; 128 MB。我们可以修改缓冲池大小，比如改为 256 MB，方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global innodb_buffer_pool_size = 268435456 ;</span><br></pre></td></tr></table></figure>

<h5 id="或者："><a href="#或者：" class="headerlink" title="或者："></a>或者：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_size = 268435456</span><br></pre></td></tr></table></figure>

<h5 id="然后再来看下修改后的缓冲池大小，此时已成功修改成了-256-MB："><a href="#然后再来看下修改后的缓冲池大小，此时已成功修改成了-256-MB：" class="headerlink" title="然后再来看下修改后的缓冲池大小，此时已成功修改成了 256 MB："></a>然后再来看下修改后的缓冲池大小，此时已成功修改成了 256 MB：</h5><h3 id="3-4-多个Buffer-Pool实例"><a href="#3-4-多个Buffer-Pool实例" class="headerlink" title="3.4 多个Buffer Pool实例"></a>3.4 多个Buffer Pool实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[server]</span><br><span class="line">innodb_buffer_pool_instances = 2</span><br></pre></td></tr></table></figure>

<p>这样就表明我们要创建 2 个Buffer Pool实例。</p>
<p>我们看下如何查看缓冲池的个数，使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;innodb_buffer_pool_size/innodb_buffer_pool_instances</span><br></pre></td></tr></table></figure>

<p>那每个Buffer Pool实例实际占多少内存空间呢？其实使用这个公式算出来的：</p>
<p>也就是总共的大小除以实例的个数，结果就是每个Buffer Pool实例占用的大小。</p>
<h3 id="3-5-引申问题"><a href="#3-5-引申问题" class="headerlink" title="3.5 引申问题"></a>3.5 引申问题</h3><p>Buffer Pool是MySQL内存结构中十分核心的一个组成，你可以先把它想象成一个黑盒子。</p>
<p><strong>黑盒下的更新数据流程</strong>nnodb_buffer_pool_instances’;</p>
<p><img src="/2018/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84/16.png"></p>
<h5 id="我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回"><a href="#我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回" class="headerlink" title="我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回"></a>我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回</h5><h5 id="滚都做不到还谈什么崩溃恢复？"><a href="#滚都做不到还谈什么崩溃恢复？" class="headerlink" title="滚都做不到还谈什么崩溃恢复？"></a>滚都做不到还谈什么崩溃恢复？</h5><p>答案： <strong>Redo Log &amp; Undo Log</strong></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL用户与权限管理</title>
    <url>/2018/11/20/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%94%A8%E6%88%B7%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="用户与权限管理"><a href="#用户与权限管理" class="headerlink" title="用户与权限管理"></a>用户与权限管理</h1><h2 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1. 用户管理"></a>1. 用户管理</h2><h2 id="1-1-登录MySQL服务器"><a href="#1-1-登录MySQL服务器" class="headerlink" title="1. 1 登录MySQL服务器"></a>1. 1 登录MySQL服务器</h2><p>启动MySQL服务后，可以通过mysql命令来登录MySQL服务器，命令如下：</p>
<h5 id="下面详细介绍命令中的参数："><a href="#下面详细介绍命令中的参数：" class="headerlink" title="下面详细介绍命令中的参数："></a>下面详细介绍命令中的参数：</h5><ul>
<li>h参数后面接主机名或者主机IP，hostname为主机，hostIP为主机IP。</li>
<li>P参数后面接MySQL服务的端口，通过该参数连接到指定的端口。MySQL服务的默认端口是 3306 ，<br>不使用该参数时自动连接到 3306 端口，port为连接的端口号。</li>
<li>u参数后面接用户名，username为用户名。</li>
<li>p参数会提示输入密码。<br>DatabaseName参数指明登录到哪一个数据库中。如果没有该参数，就会直接登录到MySQL数据库<br>中，然后可以使用USE命令来选择数据库。</li>
<li>e参数后面可以直接加SQL语句。登录MySQL服务器以后即可执行这个SQL语句，然后退出MySQL<br>服务器。</li>
</ul>
<p>举例：</p>
<h2 id="1-2-创建用户"><a href="#1-2-创建用户" class="headerlink" title="1. 2 创建用户"></a>1. 2 创建用户</h2><h5 id="CREATE-USER语句的基本语法形式如下："><a href="#CREATE-USER语句的基本语法形式如下：" class="headerlink" title="CREATE USER语句的基本语法形式如下："></a>CREATE USER语句的基本语法形式如下：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名参数表示新建用户的账户，由用户（User）和主机名（Host）构成；</span><br><span class="line">“[ ]”表示可选，也就是说，可以指定用户登录时需要密码验证，也可以不指定密码验证，这样用户</span><br><span class="line">可以直接登录。不过，不指定密码的方式不安全，不推荐使用。如果指定密码值，这里需要使用</span><br><span class="line">IDENTIFIED BY指定明文密码值。</span><br><span class="line">CREATE USER语句可以同时创建多个用户。</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql –h hostname|hostIP –P port –u username –p DatabaseName –e &quot;SQL语句&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p -hlocalhost -P3306 mysql -e &quot;select host,user from user&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER 用户名 [IDENTIFIED BY &#x27;密码&#x27;][,用户名 [IDENTIFIED BY &#x27;密码&#x27;]];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER zhang3 IDENTIFIED BY &#x27;123123&#x27;;  # 默认host是 %</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-修改用户"><a href="#1-3-修改用户" class="headerlink" title="1. 3 修改用户"></a>1. 3 修改用户</h3><h5 id="修改用户名："><a href="#修改用户名：" class="headerlink" title="修改用户名："></a>修改用户名：</h5><h3 id="1-4-删除用户"><a href="#1-4-删除用户" class="headerlink" title="1. 4 删除用户"></a>1. 4 删除用户</h3><h5 id="方式-1-：使用DROP方式删除（推荐）"><a href="#方式-1-：使用DROP方式删除（推荐）" class="headerlink" title="方式 1 ：使用DROP方式删除（推荐）"></a>方式 1 ：使用DROP方式删除（推荐）</h5><h5 id="使用DROP-USER语句来删除用户时，必须用于DROP-USER权限。DROP-USER语句的基本语法形式如下："><a href="#使用DROP-USER语句来删除用户时，必须用于DROP-USER权限。DROP-USER语句的基本语法形式如下：" class="headerlink" title="使用DROP USER语句来删除用户时，必须用于DROP USER权限。DROP USER语句的基本语法形式如下："></a>使用DROP USER语句来删除用户时，必须用于DROP USER权限。DROP USER语句的基本语法形式如下：</h5><h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><h5 id="方式-2-：使用DELETE方式删除"><a href="#方式-2-：使用DELETE方式删除" class="headerlink" title="方式 2 ：使用DELETE方式删除"></a>方式 2 ：使用DELETE方式删除</h5><h5 id="执行完DELETE命令后要使用FLUSH命令来使用户生效，命令如下："><a href="#执行完DELETE命令后要使用FLUSH命令来使用户生效，命令如下：" class="headerlink" title="执行完DELETE命令后要使用FLUSH命令来使用户生效，命令如下："></a>执行完DELETE命令后要使用FLUSH命令来使用户生效，命令如下：</h5><h5 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：不推荐通过DELETE FROM USER u WHERE USER=&#x27;li4&#x27;进行删除，系统会有残留信息保</span><br><span class="line">留。而drop user命令会删除用户以及对应的权限，执行命令后你会发现mysql.user表和mysql.db表</span><br><span class="line">的相应记录都消失了。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE mysql.user SET USER=&#x27;li4&#x27; WHERE USER=&#x27;wang5&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER user[,user]...;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER li4 ;  # 默认删除host为%的用户</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM mysql.user WHERE Host=’hostname’ AND User=’username’;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM mysql.user WHERE Host=&#x27;localhost&#x27; AND User=&#x27;Emily&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-设置当前用户密码"><a href="#1-5-设置当前用户密码" class="headerlink" title="1. 5 设置当前用户密码"></a>1. 5 设置当前用户密码</h3><h5 id="旧的写法如下："><a href="#旧的写法如下：" class="headerlink" title="旧的写法如下："></a>旧的写法如下：</h5><h5 id="这里介绍推荐的写法："><a href="#这里介绍推荐的写法：" class="headerlink" title="这里介绍推荐的写法："></a>这里介绍推荐的写法：</h5><h5 id="1-使用ALTER-USER命令来修改当前用户密码-用户可以使用ALTER命令来修改自身密码，如下语句代表修"><a href="#1-使用ALTER-USER命令来修改当前用户密码-用户可以使用ALTER命令来修改自身密码，如下语句代表修" class="headerlink" title="1. 使用ALTER USER命令来修改当前用户密码 用户可以使用ALTER命令来修改自身密码，如下语句代表修"></a>1. 使用ALTER USER命令来修改当前用户密码 用户可以使用ALTER命令来修改自身密码，如下语句代表修</h5><h5 id="改当前登录用户的密码。基本语法如下："><a href="#改当前登录用户的密码。基本语法如下：" class="headerlink" title="改当前登录用户的密码。基本语法如下："></a>改当前登录用户的密码。基本语法如下：</h5><p><strong>2. 使用SET语句来修改当前用户密码</strong> 使用root用户登录MySQL后，可以使用SET语句来修改密码，具体<br>SQL语句如下：</p>
<h5 id="该语句会自动将密码加密后再赋给当前用户。"><a href="#该语句会自动将密码加密后再赋给当前用户。" class="headerlink" title="该语句会自动将密码加密后再赋给当前用户。"></a>该语句会自动将密码加密后再赋给当前用户。</h5><h3 id="1-6-修改其它用户密码"><a href="#1-6-修改其它用户密码" class="headerlink" title="1. 6 修改其它用户密码"></a>1. 6 修改其它用户密码</h3><h5 id="1-使用ALTER语句来修改普通用户的密码-可以使用ALTER-USER语句来修改普通用户的密码。基本语法形"><a href="#1-使用ALTER语句来修改普通用户的密码-可以使用ALTER-USER语句来修改普通用户的密码。基本语法形" class="headerlink" title="1. 使用ALTER语句来修改普通用户的密码 可以使用ALTER USER语句来修改普通用户的密码。基本语法形"></a>1. 使用ALTER语句来修改普通用户的密码 可以使用ALTER USER语句来修改普通用户的密码。基本语法形</h5><h5 id="式如下："><a href="#式如下：" class="headerlink" title="式如下："></a>式如下：</h5><p><strong>2. 使用SET命令来修改普通用户的密码</strong> 使用root用户登录到MySQL服务器后，可以使用SET语句来修改普<br>通用户的密码。SET语句的代码如下：</p>
<h5 id="3-使用UPDATE语句修改普通用户的密码（不推荐）"><a href="#3-使用UPDATE语句修改普通用户的密码（不推荐）" class="headerlink" title="3. 使用UPDATE语句修改普通用户的密码（不推荐）"></a>3. 使用UPDATE语句修改普通用户的密码（不推荐）</h5><h3 id="1-7-MySQL-8-密码管理-了解"><a href="#1-7-MySQL-8-密码管理-了解" class="headerlink" title="1. 7 MySQL 8 密码管理(了解)"></a>1. 7 MySQL 8 密码管理(了解)</h3><h4 id="1-密码过期策略"><a href="#1-密码过期策略" class="headerlink" title="1. 密码过期策略"></a>1. 密码过期策略</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在MySQL中，数据库管理员可以手动设置账号密码过期，也可以建立一个自动密码过期策略。</span><br><span class="line">过期策略可以是全局的，也可以为每个账号设置单独的过期策略。</span><br></pre></td></tr></table></figure>

<h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><h5 id="方式①：使用SQL语句更改该变量的值并持久化"><a href="#方式①：使用SQL语句更改该变量的值并持久化" class="headerlink" title="方式①：使用SQL语句更改该变量的值并持久化"></a>方式①：使用SQL语句更改该变量的值并持久化</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式②：配置文件my.cnf中进行维护</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改当前用户的密码：（MySQL5.7测试有效）</span><br><span class="line">SET PASSWORD = PASSWORD(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER USER() IDENTIFIED BY &#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PASSWORD=&#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER user [IDENTIFIED BY &#x27;新密码&#x27;]</span><br><span class="line">[,user[IDENTIFIED BY &#x27;新密码&#x27;]]...;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR &#x27;username&#x27;@&#x27;hostname&#x27;=&#x27;new_password&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE MySQL.user SET authentication_string=PASSWORD(&quot;123456&quot;)</span><br><span class="line">WHERE User = &quot;username&quot; AND Host = &quot;hostname&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER user PASSWORD EXPIRE;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PERSIST default_password_lifetime = 180 ; # 建立全局策略，设置密码每隔 180 天过期</span><br></pre></td></tr></table></figure>

<h5 id="手动设置指定时间过期方式-2-：单独设置"><a href="#手动设置指定时间过期方式-2-：单独设置" class="headerlink" title="手动设置指定时间过期方式 2 ：单独设置"></a>手动设置指定时间过期方式 2 ：单独设置</h5><h5 id="每个账号既可延用全局密码过期策略，也可单独设置策略。在CREATE-USER和ALTER-USER语句上加"><a href="#每个账号既可延用全局密码过期策略，也可单独设置策略。在CREATE-USER和ALTER-USER语句上加" class="headerlink" title="每个账号既可延用全局密码过期策略，也可单独设置策略。在CREATE USER和ALTER USER语句上加"></a>每个账号既可延用全局密码过期策略，也可单独设置策略。在CREATE USER和ALTER USER语句上加</h5><h5 id="入PASSWORD-EXPIRE选项可实现单独设置策略。下面是一些语句示例。"><a href="#入PASSWORD-EXPIRE选项可实现单独设置策略。下面是一些语句示例。" class="headerlink" title="入PASSWORD EXPIRE选项可实现单独设置策略。下面是一些语句示例。"></a>入PASSWORD EXPIRE选项可实现单独设置策略。下面是一些语句示例。</h5><h4 id="2-密码重用策略"><a href="#2-密码重用策略" class="headerlink" title="2. 密码重用策略"></a>2. 密码重用策略</h4><h5 id="手动设置密码重用方式-1-：全局"><a href="#手动设置密码重用方式-1-：全局" class="headerlink" title="手动设置密码重用方式 1 ：全局"></a>手动设置密码重用方式 1 ：全局</h5><h5 id="方式①：使用SQL"><a href="#方式①：使用SQL" class="headerlink" title="方式①：使用SQL"></a>方式①：使用SQL</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式②：my.cnf配置文件</span><br></pre></td></tr></table></figure>

<h5 id="手动设置密码重用方式-2-：单独设置"><a href="#手动设置密码重用方式-2-：单独设置" class="headerlink" title="手动设置密码重用方式 2 ：单独设置"></a>手动设置密码重用方式 2 ：单独设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">default_password_lifetime=180 #建立全局策略，设置密码每隔 180 天过期</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置kangshifu账号密码每 90 天过期：</span><br><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE INTERVAL 90 DAY;</span><br><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE INTERVAL 90 DAY;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置密码永不过期：</span><br><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#延用全局密码过期策略：</span><br><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE DEFAULT;</span><br><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE DEFAULT;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PERSIST password_history = 6 ; #设置不能选择最近使用过的 6 个密码</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PERSIST password_reuse_interval = 365 ; #设置不能选择最近一年内的密码</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">password_history= 6</span><br><span class="line">password_reuse_interval= 365</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#不能使用最近 5 个密码：</span><br><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD HISTORY 5 ;</span><br><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD HISTORY 5 ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#不能使用最近 365 天内的密码：</span><br><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD REUSE INTERVAL 365 DAY;</span><br><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27; PASSWORD REUSE INTERVAL 365 DAY;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#既不能使用最近 5 个密码，也不能使用 365 天内的密码</span><br><span class="line">CREATE USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27;</span><br><span class="line">PASSWORD HISTORY 5</span><br><span class="line">PASSWORD REUSE INTERVAL 365 DAY;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;kangshifu&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="2-权限管理"><a href="#2-权限管理" class="headerlink" title="2. 权限管理"></a>2. 权限管理</h2><h3 id="2-1-权限列表"><a href="#2-1-权限列表" class="headerlink" title="2. 1 权限列表"></a>2. 1 权限列表</h3><p>MySQL到底都有哪些权限呢？</p>
<h5 id="（-1-）CREATE和DROP权限，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将"><a href="#（-1-）CREATE和DROP权限，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将" class="headerlink" title="（ 1 ）CREATE和DROP权限，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将"></a>（ 1 ）CREATE和DROP权限，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将</h5><p>MySQL数据库中的DROP权限授予某用户，用户就可以删除MySQL访问权限保存的数据库。 （ 2 ）<br>SELECT、INSERT、UPDATE和DELETE权限允许在一个数据库现有的表上实施操作。 （ 3 ）SELECT权限<br>只有在它们真正从一个表中检索行时才被用到。 （ 4 ）INDEX权限允许创建或删除索引，INDEX适用于已<br>有的表。如果具有某个表的CREATE权限，就可以在CREATE TABLE语句中包括索引定义。 （ 5 ）ALTER权<br>限可以使用ALTER TABLE来更改表的结构和重新命名表。 （ 6 ）CREATE ROUTINE权限用来创建保存的<br>程序（函数和程序），ALTER ROUTINE权限用来更改和删除保存的程序，EXECUTE权限用来执行保存的<br>程序。 （ 7 ）GRANT权限允许授权给其他用户，可用于数据库、表和保存的程序。 （ 8 ）FILE权限使用<br>户可以使用LOAD DATA INFILE和SELECT … INTO OUTFILE语句读或写服务器上的文件，任何被授予FILE权<br>限的用户都能读或写MySQL服务器上的任何文件（说明用户可以读任何数据库目录下的文件，因为服务<br>器可以访问这些文件）。</p>
<h3 id="2-2-授予权限的原则"><a href="#2-2-授予权限的原则" class="headerlink" title="2. 2 授予权限的原则"></a>2. 2 授予权限的原则</h3><h5 id="权限控制主要是出于安全因素，因此需要遵循以下几个经验原则："><a href="#权限控制主要是出于安全因素，因此需要遵循以下几个经验原则：" class="headerlink" title="权限控制主要是出于安全因素，因此需要遵循以下几个经验原则："></a>权限控制主要是出于安全因素，因此需要遵循以下几个经验原则：</h5><p>1 、只授予能满足需要的最小权限，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可<br>以了，不要给用户赋予update、insert或者delete权限。</p>
<p>2 、创建用户的时候限制用户的登录主机，一般是限制成指定IP或者内网IP段。</p>
<p>3 、为每个用户设置满足密码复杂度的密码。</p>
<p>4 、定期清理不需要的用户，回收权限或者删除用户。</p>
<h3 id="2-3-授予权限"><a href="#2-3-授予权限" class="headerlink" title="2. 3 授予权限"></a>2. 3 授予权限</h3><h5 id="给用户授权的方式有-2-种，分别是通过把角色赋予用户给用户授权和直接给用户授权。用户是数据库的"><a href="#给用户授权的方式有-2-种，分别是通过把角色赋予用户给用户授权和直接给用户授权。用户是数据库的" class="headerlink" title="给用户授权的方式有 2 种，分别是通过把角色赋予用户给用户授权和直接给用户授权。用户是数据库的"></a>给用户授权的方式有 2 种，分别是通过把角色赋予用户给用户授权和直接给用户授权。用户是数据库的</h5><h5 id="使用者，我们可以通过给用户授予访问数据库中资源的权限，来控制使用者对数据库的访问，消除安全"><a href="#使用者，我们可以通过给用户授予访问数据库中资源的权限，来控制使用者对数据库的访问，消除安全" class="headerlink" title="使用者，我们可以通过给用户授予访问数据库中资源的权限，来控制使用者对数据库的访问，消除安全"></a>使用者，我们可以通过给用户授予访问数据库中资源的权限，来控制使用者对数据库的访问，消除安全</h5><h5 id="隐患。"><a href="#隐患。" class="headerlink" title="隐患。"></a>隐患。</h5><h5 id="授权命令："><a href="#授权命令：" class="headerlink" title="授权命令："></a>授权命令：</h5><h5 id="该权限如果发现没有该用户，则会直接新建一个用户。"><a href="#该权限如果发现没有该用户，则会直接新建一个用户。" class="headerlink" title="该权限如果发现没有该用户，则会直接新建一个用户。"></a>该权限如果发现没有该用户，则会直接新建一个用户。</h5><h5 id="比如："><a href="#比如：" class="headerlink" title="比如："></a>比如：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给li4用户用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PASSWORD HISTORY 5</span><br><span class="line">PASSWORD REUSE INTERVAL 365 DAY;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show privileges;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT 权限1,权限2,...权限n ON 数据库名称.表名称 TO 用户名@用户地址 [IDENTIFIED BY ‘密码口令’];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT SELECT,INSERT,DELETE,UPDATE ON atguigudb.* TO li4@localhost ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">授予通过网络方式登录的joe用户 ，对所有库所有表的全部权限，密码设为 123 。注意这里唯独不包</span><br><span class="line">括grant的权限</span><br></pre></td></tr></table></figure>

<h5 id="我们在开发应用的时候，经常会遇到一种需求，就是要根据用户的不同，对数据进行横向和纵向的"><a href="#我们在开发应用的时候，经常会遇到一种需求，就是要根据用户的不同，对数据进行横向和纵向的" class="headerlink" title="我们在开发应用的时候，经常会遇到一种需求，就是要根据用户的不同，对数据进行横向和纵向的"></a>我们在开发应用的时候，经常会遇到一种需求，就是要根据用户的不同，对数据进行横向和纵向的</h5><h5 id="分组。"><a href="#分组。" class="headerlink" title="分组。"></a>分组。</h5><h5 id="所谓横向的分组，就是指用户可以接触到的数据的范围，比如可以看到哪些表的数据；"><a href="#所谓横向的分组，就是指用户可以接触到的数据的范围，比如可以看到哪些表的数据；" class="headerlink" title="所谓横向的分组，就是指用户可以接触到的数据的范围，比如可以看到哪些表的数据；"></a>所谓横向的分组，就是指用户可以接触到的数据的范围，比如可以看到哪些表的数据；</h5><h5 id="所谓纵向的分组，就是指用户对接触到的数据能访问到什么程度，比如能看、能改，甚至是"><a href="#所谓纵向的分组，就是指用户对接触到的数据能访问到什么程度，比如能看、能改，甚至是" class="headerlink" title="所谓纵向的分组，就是指用户对接触到的数据能访问到什么程度，比如能看、能改，甚至是"></a>所谓纵向的分组，就是指用户对接触到的数据能访问到什么程度，比如能看、能改，甚至是</h5><h5 id="删除。"><a href="#删除。" class="headerlink" title="删除。"></a>删除。</h5><h3 id="2-4-查看权限"><a href="#2-4-查看权限" class="headerlink" title="2. 4 查看权限"></a>2. 4 查看权限</h3><h5 id="查看当前用户权限"><a href="#查看当前用户权限" class="headerlink" title="查看当前用户权限"></a>查看当前用户权限</h5><h5 id="查看某用户的全局权限"><a href="#查看某用户的全局权限" class="headerlink" title="查看某用户的全局权限"></a>查看某用户的全局权限</h5><h3 id="2-5-收回权限"><a href="#2-5-收回权限" class="headerlink" title="2. 5 收回权限"></a>2. 5 收回权限</h3><h5 id="收回权限就是取消已经赋予用户的某些权限。-收回用户不必要的权限可以在一定程度上保证系统的安全"><a href="#收回权限就是取消已经赋予用户的某些权限。-收回用户不必要的权限可以在一定程度上保证系统的安全" class="headerlink" title="收回权限就是取消已经赋予用户的某些权限。 收回用户不必要的权限可以在一定程度上保证系统的安全"></a>收回权限就是取消已经赋予用户的某些权限。 收回用户不必要的权限可以在一定程度上保证系统的安全</h5><p><strong>性。</strong> MySQL中使用REVOKE语句取消用户的某些权限。使用REVOKE收回权限之后，用户账户的记录将从<br>db、host、tables_priv和columns_priv表中删除，但是用户账户记录仍然在user表中保存（删除user表中<br>的账户记录使用DROP USER语句）。</p>
<p><strong>注意：在将用户账户从user表删除之前，应该收回相应用户的所有权限。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">收回权限命令</span><br></pre></td></tr></table></figure>

<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><h5 id="注意：须用户重新登录后才能生效"><a href="#注意：须用户重新登录后才能生效" class="headerlink" title="注意：须用户重新登录后才能生效"></a>注意：须用户重新登录后才能生效</h5><h2 id="3-权限表"><a href="#3-权限表" class="headerlink" title="3. 权限表"></a>3. 权限表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO joe@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS;</span><br><span class="line"># 或</span><br><span class="line">SHOW GRANTS FOR CURRENT_USER;</span><br><span class="line"># 或</span><br><span class="line">SHOW GRANTS FOR CURRENT_USER();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;user&#x27;@&#x27;主机地址&#x27; ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE 权限1,权限2,...权限n ON 数据库名称.表名称 FROM 用户名@用户地址;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#收回全库全表的所有权限</span><br><span class="line">REVOKE ALL PRIVILEGES ON *.* FROM joe@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#收回mysql库下的所有表的插删改查权限</span><br><span class="line">REVOKE SELECT,INSERT,UPDATE,DELETE ON mysql.* FROM joe@localhost;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-user表"><a href="#3-1-user表" class="headerlink" title="3.1 user表"></a>3.1 user表</h3><p>user表是MySQL中最重要的一个权限表，记录用户账号和权限信息，有 49 个字段。如下图：</p>
<h5 id="这些字段可以分成-4-类，分别是范围列（或用户列）、权限列、安全列和资源控制列。"><a href="#这些字段可以分成-4-类，分别是范围列（或用户列）、权限列、安全列和资源控制列。" class="headerlink" title="这些字段可以分成 4 类，分别是范围列（或用户列）、权限列、安全列和资源控制列。"></a>这些字段可以分成 4 类，分别是范围列（或用户列）、权限列、安全列和资源控制列。</h5><h5 id="1-范围列（或用户列）"><a href="#1-范围列（或用户列）" class="headerlink" title="1 .范围列（或用户列）"></a>1 .范围列（或用户列）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">host ： 表示连接类型</span><br><span class="line">% 表示所有远程通过 TCP方式的连接</span><br><span class="line">IP 地址 如 (192.168.1.2、127.0.0.1) 通过制定ip地址进行的TCP方式的连接</span><br><span class="line">机器名 通过制定网络中的机器名进行的TCP方式的连接</span><br><span class="line">::1 IPv6的本地ip地址，等同于IPv4的 127.0.0.</span><br><span class="line">localhost 本地方式通过命令行方式的连接 ，比如mysql -u xxx -p xxx 方式的连接。</span><br><span class="line">user ： 表示用户名，同一用户通过不同方式链接的权限是不一样的。</span><br><span class="line">password ： 密码</span><br><span class="line">所有密码串通过 password(明文字符串) 生成的密文字符串。MySQL 8.0 在用户管理方面增加了</span><br><span class="line">角色管理，默认的密码加密方式也做了调整，由之前的 SHA1 改为了 SHA2，不可逆 。同时</span><br><span class="line">加上 MySQL 5.7 的禁用用户和用户过期的功能，MySQL 在用户管理方面的功能和安全性都较之</span><br><span class="line">前版本大大的增强了。</span><br><span class="line">mysql 5.7 及之后版本的密码保存到 authentication_string 字段中不再使用password 字</span><br><span class="line">段。</span><br></pre></td></tr></table></figure>

<p><strong>2. 权限列</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Grant_priv字段</span><br><span class="line">表示是否拥有GRANT权限</span><br><span class="line">Shutdown_priv字段</span><br><span class="line">表示是否拥有停止MySQL服务的权限</span><br><span class="line">Super_priv字段</span><br><span class="line">表示是否拥有超级权限</span><br><span class="line">Execute_priv字段</span><br><span class="line">表示是否拥有EXECUTE权限。拥有EXECUTE权限，可以执行存储过程和函数。</span><br><span class="line">Select_priv , Insert_priv等</span><br><span class="line">为该用户所拥有的权限。</span><br></pre></td></tr></table></figure>

<p><strong>3. 安全列</strong> 安全列只有 6 个字段，其中两个是ssl相关的（ssl_type、ssl_cipher），用于加密；两个是x<br>相关的（x509_issuer、x509_subject），用于标识用户；另外两个Plugin字段用于验证用户身份的插件，<br>该字段不能为空。如果该字段为空，服务器就使用内建授权验证机制验证用户身份。</p>
<p><strong>4. 资源控制列</strong> 资源控制列的字段用来限制用户使用的资源，包含 4 个字段，分别为：</p>
<p>①max_questions，用户每小时允许执行的查询操作次数； ②max_updates，用户每小时允许执行的更新<br>操作次数； ③max_connections，用户每小时允许执行的连接操作次数； ④max_user_connections，用户<br>允许同时建立的连接次数。</p>
<p>查看字段：</p>
<h5 id="查看用户-以列的方式显示数据："><a href="#查看用户-以列的方式显示数据：" class="headerlink" title="查看用户, 以列的方式显示数据："></a>查看用户, 以列的方式显示数据：</h5><h5 id="查询特定字段："><a href="#查询特定字段：" class="headerlink" title="查询特定字段："></a>查询特定字段：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESC mysql.user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM mysql.user \G;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT host,user,authentication_string,select_priv,insert_priv,drop_priv</span><br><span class="line">FROM mysql.user;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-db表"><a href="#3-2-db表" class="headerlink" title="3.2 db表"></a>3.2 db表</h3><p>使用DESCRIBE查看db表的基本结构：</p>
<p><strong>1. 用户列</strong> db表用户列有 3 个字段，分别是Host、User、Db。这 3 个字段分别表示主机名、用户名和数据库<br>名。表示从某个主机连接某个用户对某个数据库的操作权限，这 3 个字段的组合构成了db表的主键。</p>
<p><strong>2. 权限列</strong></p>
<p>Create_routine_priv和Alter_routine_priv这两个字段决定用户是否具有创建和修改存储过程的权限。</p>
<h3 id="3-3-tables-priv表和columns-priv表"><a href="#3-3-tables-priv表和columns-priv表" class="headerlink" title="3.3 tables_priv表和columns_priv表"></a>3.3 tables_priv表和columns_priv表</h3><p>tables_priv表用来对表设置操作权限，columns_priv表用来对表的某一列设置权限。tables_priv表和<br>columns_priv表的结构分别如图：</p>
<p>tables_priv表有 8 个字段，分别是Host、Db、User、Table_name、Grantor、Timestamp、Table_priv和<br>Column_priv，各个字段说明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host、Db、User和Table_name四个字段分别表示主机名、数据库名、用户名和表名。</span><br><span class="line">Grantor表示修改该记录的用户。</span><br><span class="line">Timestamp表示修改该记录的时间。</span><br><span class="line">Table_priv表示对象的操作权限。包括Select、Insert、Update、Delete、Create、Drop、Grant、</span><br><span class="line">References、Index和Alter。</span><br><span class="line">Column_priv字段表示对表中的列的操作权限，包括Select、Insert、Update和References。</span><br></pre></td></tr></table></figure>

<h3 id="3-4-procs-priv表"><a href="#3-4-procs-priv表" class="headerlink" title="3.4 procs_priv表"></a>3.4 procs_priv表</h3><p>procs_priv表可以对存储过程和存储函数设置操作权限，表结构如图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DESCRIBE mysql.db;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc mysql.tables_priv;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc mysql.columns_priv;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc mysql.procs_priv;</span><br></pre></td></tr></table></figure>

<h2 id="4-访问控制-了解"><a href="#4-访问控制-了解" class="headerlink" title="4. 访问控制(了解)"></a>4. 访问控制(了解)</h2><h3 id="4-1-连接核实阶段"><a href="#4-1-连接核实阶段" class="headerlink" title="4. 1 连接核实阶段"></a>4. 1 连接核实阶段</h3><p>当用户试图连接MySQL服务器时，服务器基于用户的身份以及用户是否能提供正确的密码验证身份来确<br>定接受或者拒绝连接。即客户端用户会在连接请求中提供用户名、主机地址、用户密码，MySQL服务器<br>接收到用户请求后，会 <strong>使用user表中的host、user和authentication_string这 3 个字段匹配客户端提供信<br>息</strong> 。</p>
<p>服务器只有在user表记录的Host和User字段匹配客户端主机名和用户名，并且提供正确的密码时才接受<br>连接。 <strong>如果连接核实没有通过，服务器就完全拒绝访问</strong> ； <strong>否则，服务器接受连接，然后进入阶段 2 等待<br>用户请求。</strong></p>
<h3 id="4-2-请求核实阶段"><a href="#4-2-请求核实阶段" class="headerlink" title="4. 2 请求核实阶段"></a>4. 2 请求核实阶段</h3><h5 id="一旦建立了连接，服务器就进入了访问控制的阶段-2-，也就是请求核实阶段。对此连接上进来的每个请"><a href="#一旦建立了连接，服务器就进入了访问控制的阶段-2-，也就是请求核实阶段。对此连接上进来的每个请" class="headerlink" title="一旦建立了连接，服务器就进入了访问控制的阶段 2 ，也就是请求核实阶段。对此连接上进来的每个请"></a>一旦建立了连接，服务器就进入了访问控制的阶段 2 ，也就是请求核实阶段。对此连接上进来的每个请</h5><h5 id="求，服务器检查该请求要执行什么操作、是否有足够的权限来执行它，这正是需要授权表中的权限列发"><a href="#求，服务器检查该请求要执行什么操作、是否有足够的权限来执行它，这正是需要授权表中的权限列发" class="headerlink" title="求，服务器检查该请求要执行什么操作、是否有足够的权限来执行它，这正是需要授权表中的权限列发"></a>求，服务器检查该请求要执行什么操作、是否有足够的权限来执行它，这正是需要授权表中的权限列发</h5><p>挥作用的地方。这些权限可以来自user、db、table_priv和column_priv表。</p>
<p>确认权限时，MySQL首先检查user表，如果指定的权限没有在user表中被授予，那么MySQL就会继续检<br>查db表，db表是下一安全层级，其中的权限限定于数据库层级，在该层级的SELECT权限允许用户查看指<br>定数据库的所有表中的数据；如果在该层级没有找到限定的权限，则MySQL继续检查tables_priv表以<br>及columns_priv表，如果所有权限表都检查完毕，但还是没有找到允许的权限操作，MySQL将返回错<br>误信息，用户请求的操作不能执行，操作失败。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提示： MySQL通过向下层级的顺序（从user表到columns_priv表）检查权限表，但并不是所有的权</span><br><span class="line">限都要执行该过程。例如，一个用户登录到MySQL服务器之后只执行对MySQL的管理操作，此时只</span><br><span class="line">涉及管理权限，因此MySQL只检查user表。另外，如果请求的权限操作不被允许，MySQL也不会继</span><br><span class="line">续检查下一层级的表。</span><br></pre></td></tr></table></figure>

<h2 id="5-角色管理"><a href="#5-角色管理" class="headerlink" title="5. 角色管理"></a>5. 角色管理</h2><h3 id="5-1-角色的理解"><a href="#5-1-角色的理解" class="headerlink" title="5. 1 角色的理解"></a>5. 1 角色的理解</h3><h5 id="引入角色的目的是方便管理拥有相同权限的用户。-恰当的权限设定，可以确保数据的安全性，这是至关"><a href="#引入角色的目的是方便管理拥有相同权限的用户。-恰当的权限设定，可以确保数据的安全性，这是至关" class="headerlink" title="引入角色的目的是方便管理拥有相同权限的用户。 恰当的权限设定，可以确保数据的安全性，这是至关"></a>引入角色的目的是方便管理拥有相同权限的用户。 恰当的权限设定，可以确保数据的安全性，这是至关</h5><h5 id="重要的-。"><a href="#重要的-。" class="headerlink" title="重要的 。"></a>重要的 。</h5><h3 id="5-2-创建角色"><a href="#5-2-创建角色" class="headerlink" title="5. 2 创建角色"></a>5. 2 创建角色</h3><h5 id="创建角色使用CREATE-ROLE语句，语法如下："><a href="#创建角色使用CREATE-ROLE语句，语法如下：" class="headerlink" title="创建角色使用CREATE ROLE语句，语法如下："></a>创建角色使用CREATE ROLE语句，语法如下：</h5><p>角色名称的命名规则和用户名类似。如果host_name省略，默认为%，role_name不可省略，不可为<br>空。</p>
<p>练习：我们现在需要创建一个经理的角色，就可以用下面的代码：</p>
<h3 id="5-3-给角色赋予权限"><a href="#5-3-给角色赋予权限" class="headerlink" title="5. 3 给角色赋予权限"></a>5. 3 给角色赋予权限</h3><h5 id="创建角色之后，默认这个角色是没有任何权限的，我们需要给角色授权。给角色授权的语法结构是："><a href="#创建角色之后，默认这个角色是没有任何权限的，我们需要给角色授权。给角色授权的语法结构是：" class="headerlink" title="创建角色之后，默认这个角色是没有任何权限的，我们需要给角色授权。给角色授权的语法结构是："></a>创建角色之后，默认这个角色是没有任何权限的，我们需要给角色授权。给角色授权的语法结构是：</h5><p>上述语句中privileges代表权限的名称，多个权限以逗号隔开。可使用SHOW语句查询权限名称，图11-<br>列出了部分权限列表。</p>
<h5 id="练习-1-：我们现在想给经理角色授予商品信息表、盘点表和应付账款表的只读权限，就可以用下面的代码"><a href="#练习-1-：我们现在想给经理角色授予商品信息表、盘点表和应付账款表的只读权限，就可以用下面的代码" class="headerlink" title="练习 1 ：我们现在想给经理角色授予商品信息表、盘点表和应付账款表的只读权限，就可以用下面的代码"></a>练习 1 ：我们现在想给经理角色授予商品信息表、盘点表和应付账款表的只读权限，就可以用下面的代码</h5><h5 id="来实现："><a href="#来实现：" class="headerlink" title="来实现："></a>来实现：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE ROLE &#x27;role_name&#x27;[@&#x27;host_name&#x27;] [,&#x27;role_name&#x27;[@&#x27;host_name&#x27;]]...</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE ROLE &#x27;manager&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT privileges ON table_name TO &#x27;role_name&#x27;[@&#x27;host_name&#x27;];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PRIVILEGES\G;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-查看角色的权限"><a href="#5-4-查看角色的权限" class="headerlink" title="5. 4 查看角色的权限"></a>5. 4 查看角色的权限</h3><h5 id="赋予角色权限之后，我们可以通过-SHOW-GRANTS-语句，来查看权限是否创建成功了："><a href="#赋予角色权限之后，我们可以通过-SHOW-GRANTS-语句，来查看权限是否创建成功了：" class="headerlink" title="赋予角色权限之后，我们可以通过 SHOW GRANTS 语句，来查看权限是否创建成功了："></a>赋予角色权限之后，我们可以通过 SHOW GRANTS 语句，来查看权限是否创建成功了：</h5><h5 id="只要你创建了一个角色，系统就会自动给你一个“USAGE”权限，意思是连接登录数据库的权限。代码的"><a href="#只要你创建了一个角色，系统就会自动给你一个“USAGE”权限，意思是连接登录数据库的权限。代码的" class="headerlink" title="只要你创建了一个角色，系统就会自动给你一个“USAGE”权限，意思是连接登录数据库的权限。代码的"></a>只要你创建了一个角色，系统就会自动给你一个“USAGE”权限，意思是连接登录数据库的权限。代码的</h5><p>最后三行代表了我们给角色“manager”赋予的权限，也就是对商品信息表、盘点表和应付账款表的只读权<br>限。</p>
<p>结果显示，库管角色拥有商品信息表的只读权限和盘点表的增删改查权限。</p>
<h3 id="5-5-回收角色的权限"><a href="#5-5-回收角色的权限" class="headerlink" title="5. 5 回收角色的权限"></a>5. 5 回收角色的权限</h3><h5 id="角色授权后，可以对角色的权限进行维护，对权限进行添加或撤销。添加权限使用GRANT语句，与角色"><a href="#角色授权后，可以对角色的权限进行维护，对权限进行添加或撤销。添加权限使用GRANT语句，与角色" class="headerlink" title="角色授权后，可以对角色的权限进行维护，对权限进行添加或撤销。添加权限使用GRANT语句，与角色"></a>角色授权后，可以对角色的权限进行维护，对权限进行添加或撤销。添加权限使用GRANT语句，与角色</h5><h5 id="授权相同。撤销角色或角色权限使用REVOKE语句。"><a href="#授权相同。撤销角色或角色权限使用REVOKE语句。" class="headerlink" title="授权相同。撤销角色或角色权限使用REVOKE语句。"></a>授权相同。撤销角色或角色权限使用REVOKE语句。</h5><h5 id="修改了角色的权限，会影响拥有该角色的账户的权限。"><a href="#修改了角色的权限，会影响拥有该角色的账户的权限。" class="headerlink" title="修改了角色的权限，会影响拥有该角色的账户的权限。"></a>修改了角色的权限，会影响拥有该角色的账户的权限。</h5><h5 id="撤销角色权限的SQL语法如下："><a href="#撤销角色权限的SQL语法如下：" class="headerlink" title="撤销角色权限的SQL语法如下："></a>撤销角色权限的SQL语法如下：</h5><p>练习 1 ：撤销school_write角色的权限。 （ 1 ）使用如下语句撤销school_write角色的权限。</p>
<p>（ 2 ）撤销后使用SHOW语句查看school_write对应的权限，语句如下。</p>
<h3 id="5-6-删除角色"><a href="#5-6-删除角色" class="headerlink" title="5. 6 删除角色"></a>5. 6 删除角色</h3><h5 id="当我们需要对业务重新整合的时候，可能就需要对之前创建的角色进行清理，删除一些不会再使用的角"><a href="#当我们需要对业务重新整合的时候，可能就需要对之前创建的角色进行清理，删除一些不会再使用的角" class="headerlink" title="当我们需要对业务重新整合的时候，可能就需要对之前创建的角色进行清理，删除一些不会再使用的角"></a>当我们需要对业务重新整合的时候，可能就需要对之前创建的角色进行清理，删除一些不会再使用的角</h5><h5 id="色。删除角色的操作很简单，你只要掌握语法结构就行了。"><a href="#色。删除角色的操作很简单，你只要掌握语法结构就行了。" class="headerlink" title="色。删除角色的操作很简单，你只要掌握语法结构就行了。"></a>色。删除角色的操作很简单，你只要掌握语法结构就行了。</h5><h5 id="注意，如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限。"><a href="#注意，如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限。" class="headerlink" title="注意，如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限。"></a>注意，如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限。</h5><p>练习：执行如下SQL删除角色school_read。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON demo.settlement TO &#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON demo.goodsmaster TO &#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT SELECT ON demo.invcount TO &#x27;manager&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW GRANTS FOR &#x27;manager&#x27;;</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">| Grants for manager@% |</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO `manager`@`%` |</span><br><span class="line">| GRANT SELECT ON `demo`.`goodsmaster` TO `manager`@`%` |</span><br><span class="line">| GRANT SELECT ON `demo`.`invcount` TO `manager`@`%` |</span><br><span class="line">| GRANT SELECT ON `demo`.`settlement` TO `manager`@`%` |</span><br><span class="line">+-------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE privileges ON tablename FROM &#x27;rolename&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE INSERT, UPDATE, DELETE ON school.* FROM &#x27;school_write&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;school_write&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP ROLE role [,role2]...</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP ROLE &#x27;school_read&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-给用户赋予角色"><a href="#5-7-给用户赋予角色" class="headerlink" title="5. 7 给用户赋予角色"></a>5. 7 给用户赋予角色</h3><h5 id="角色创建并授权后，要赋给用户并处于激活状态才能发挥作用。给用户添加角色可使用GRANT语句，语"><a href="#角色创建并授权后，要赋给用户并处于激活状态才能发挥作用。给用户添加角色可使用GRANT语句，语" class="headerlink" title="角色创建并授权后，要赋给用户并处于激活状态才能发挥作用。给用户添加角色可使用GRANT语句，语"></a>角色创建并授权后，要赋给用户并处于激活状态才能发挥作用。给用户添加角色可使用GRANT语句，语</h5><h5 id="法形式如下："><a href="#法形式如下：" class="headerlink" title="法形式如下："></a>法形式如下：</h5><p>在上述语句中，role代表角色，user代表用户。可将多个角色同时赋予多个用户，用逗号隔开即可。</p>
<p>练习：给kangshifu用户添加角色school_read权限。 （ 1 ）使用GRANT语句给kangshifu添加school_read权<br>限，SQL语句如下。</p>
<h5 id="（-2-）添加完成后使用SHOW语句查看是否添加成功，SQL语句如下。"><a href="#（-2-）添加完成后使用SHOW语句查看是否添加成功，SQL语句如下。" class="headerlink" title="（ 2 ）添加完成后使用SHOW语句查看是否添加成功，SQL语句如下。"></a>（ 2 ）添加完成后使用SHOW语句查看是否添加成功，SQL语句如下。</h5><p>（ 3 ）使用kangshifu用户登录，然后查询当前角色，如果角色未激活，结果将显示NONE。SQL语句如<br>下。</p>
<h3 id="5-8-激活角色"><a href="#5-8-激活角色" class="headerlink" title="5. 8 激活角色"></a>5. 8 激活角色</h3><p><strong>方式 1 ：使用set default role 命令激活角色</strong></p>
<p>举例：</p>
<h5 id="举例：使用SET-DEFAULT-ROLE为下面-4-个用户默认激活所有已拥有的角色如下："><a href="#举例：使用SET-DEFAULT-ROLE为下面-4-个用户默认激活所有已拥有的角色如下：" class="headerlink" title="举例：使用SET DEFAULT ROLE为下面 4 个用户默认激活所有已拥有的角色如下："></a>举例：使用SET DEFAULT ROLE为下面 4 个用户默认激活所有已拥有的角色如下：</h5><p><strong>方式 2 ：将activate_all_roles_on_login设置为ON</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认情况：</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT role [,role2,...] TO user [,user2,...];</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT &#x27;school_read&#x27; TO &#x27;kangshifu&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;kangshifu&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CURRENT_ROLE();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET DEFAULT ROLE ALL TO &#x27;kangshifu&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET DEFAULT ROLE ALL TO</span><br><span class="line">&#x27;dev1&#x27;@&#x27;localhost&#x27;,</span><br><span class="line">&#x27;read_user1&#x27;@&#x27;localhost&#x27;,</span><br><span class="line">&#x27;read_user2&#x27;@&#x27;localhost&#x27;,</span><br><span class="line">&#x27;rw_user1&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;activate_all_roles_on_login&#x27;;</span><br><span class="line">+-----------------------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+-----------------------------+-------+</span><br><span class="line">| activate_all_roles_on_login | OFF |</span><br><span class="line">+-----------------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="设置："><a href="#设置：" class="headerlink" title="设置："></a>设置：</h5><h5 id="这条-SQL-语句的意思是，对所有角色永久激活。运行这条语句之后，用户才真正拥有了赋予角色的所有"><a href="#这条-SQL-语句的意思是，对所有角色永久激活。运行这条语句之后，用户才真正拥有了赋予角色的所有" class="headerlink" title="这条 SQL 语句的意思是，对所有角色永久激活。运行这条语句之后，用户才真正拥有了赋予角色的所有"></a>这条 SQL 语句的意思是，对所有角色永久激活。运行这条语句之后，用户才真正拥有了赋予角色的所有</h5><h5 id="权限。"><a href="#权限。" class="headerlink" title="权限。"></a>权限。</h5><h3 id="5-9-撤销用户的角色"><a href="#5-9-撤销用户的角色" class="headerlink" title="5.9 撤销用户的角色"></a>5.9 撤销用户的角色</h3><h5 id="撤销用户角色的SQL语法如下："><a href="#撤销用户角色的SQL语法如下：" class="headerlink" title="撤销用户角色的SQL语法如下："></a>撤销用户角色的SQL语法如下：</h5><p>练习：撤销kangshifu用户的school_read角色。 （ 1 ）撤销的SQL语句如下</p>
<p>（ 2 ）撤销后，执行如下查询语句，查看kangshifu用户的角色信息</p>
<p>执行发现，用户kangshifu之前的school_read角色已被撤销。</p>
<h3 id="5-10-设置强制角色-mandatory-role"><a href="#5-10-设置强制角色-mandatory-role" class="headerlink" title="5.10 设置强制角色(mandatory role)"></a>5.10 设置强制角色(mandatory role)</h3><h5 id="方式-1-：服务启动前设置"><a href="#方式-1-：服务启动前设置" class="headerlink" title="方式 1 ：服务启动前设置"></a>方式 1 ：服务启动前设置</h5><h5 id="方式-2-：运行时设置"><a href="#方式-2-：运行时设置" class="headerlink" title="方式 2 ：运行时设置"></a>方式 2 ：运行时设置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL activate_all_roles_on_login=ON;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE role FROM user;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE &#x27;school_read&#x27; FROM &#x27;kangshifu&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;kangshifu&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">mandatory_roles=&#x27;role1,role2@localhost,r3@%.atguigu.com&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET PERSIST mandatory_roles = &#x27;role1,role2@localhost,r3@%.example.com&#x27;;  #系统重启后仍然</span><br><span class="line">有效</span><br><span class="line">SET GLOBAL mandatory_roles = &#x27;role1,role2@localhost,r3@%.example.com&#x27;;  #系统重启后失效</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2019/05/09/%E8%BF%90%E7%BB%B4/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="查看Linux系统信息"><a href="#查看Linux系统信息" class="headerlink" title="查看Linux系统信息"></a>查看Linux系统信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arch      #显示机器的处理器架构(1)</span><br><span class="line">uname -m  #显示机器的处理器架构(2)</span><br><span class="line">uname -r  #显示正在使用的内核版本</span><br><span class="line">dmidecode -q          #显示硬件系统部件 - (SMBIOS / DMI)</span><br><span class="line">hdparm -i /dev/hda    #罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda   #在磁盘上执行测试性读取操作</span><br><span class="line">cat /proc/cpuinfo     #显示CPU info的信息</span><br><span class="line">cat /proc/interrupts  #显示中断</span><br><span class="line">cat /proc/meminfo     #校验内存使用</span><br><span class="line">cat /proc/swaps       #显示哪些swap被使用</span><br><span class="line">cat /proc/version     #显示内核的版本</span><br><span class="line">cat /proc/net/dev     #显示网络适配器及统计</span><br><span class="line">cat /proc/mounts      #显示已加载的文件系统</span><br><span class="line">lspci -tv   #罗列PCI设备</span><br><span class="line">lsusb -tv   #显示USB设备</span><br></pre></td></tr></table></figure>

<h2 id="date-显示系统日期"><a href="#date-显示系统日期" class="headerlink" title="date 显示系统日期"></a>date 显示系统日期</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cal 2007              #显示2007年的日历表</span><br><span class="line">date 041217002007.00   #设置日期和时间 - 月日时分年.秒</span><br><span class="line">clock -w              #将时间修改保存到 BIOS</span><br></pre></td></tr></table></figure>

<h2 id="关机-关机、重启、登出"><a href="#关机-关机、重启、登出" class="headerlink" title="关机(关机、重启、登出 )"></a>关机(关机、重启、登出 )</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown -h now    #关闭系统(1)</span><br><span class="line">init 0            #关闭系统(2)</span><br><span class="line">telinit 0         #关闭系统(3)</span><br><span class="line">shutdown -h hours:minutes &amp;   #按预定时间关闭系统</span><br><span class="line">shutdown -c       #取消按预定时间关闭系统</span><br><span class="line">shutdown -r now   #重启(1)</span><br><span class="line">reboot   #重启(2)</span><br><span class="line">logout   #注销</span><br></pre></td></tr></table></figure>

<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home    #进入 &#x27;/ home&#x27; 目录&#x27;</span><br><span class="line">cd ..       #返回上一级目录</span><br><span class="line">cd ../..    #返回上两级目录</span><br><span class="line">cd          #进入个人的主目录</span><br><span class="line">cd ~user1   #进入个人的主目录</span><br><span class="line">cd -       #返回上次所在的目录</span><br><span class="line">pwd        #显示工作路径</span><br><span class="line">ls      #查看目录中的文件</span><br><span class="line">ls -F   #查看目录中的文件</span><br><span class="line">ls -l   #显示文件和目录的详细资料</span><br><span class="line">ls -a   #显示隐藏文件</span><br><span class="line">ls *[0-9]*   #显示包含数字的文件名和目录名</span><br><span class="line">tree         #显示文件和目录由根目录开始的树形结构(1)</span><br><span class="line">lstree       #显示文件和目录由根目录开始的树形结构(2)</span><br><span class="line">mkdir dir1         #创建一个叫做 &#x27;dir1&#x27; 的目录&#x27;</span><br><span class="line">mkdir dir1 dir2    #同时创建两个目录</span><br><span class="line">mkdir -p /tmp/dir1/dir2   #创建一个目录树</span><br><span class="line">rm -f file1    #删除一个叫做 &#x27;file1&#x27; 的文件&#x27;</span><br><span class="line">rmdir dir1     #删除一个叫做 &#x27;dir1&#x27; 的目录&#x27;</span><br><span class="line">rm -rf dir1    #删除一个叫做 &#x27;dir1&#x27; 的目录并同时删除其内容</span><br><span class="line">rm -rf dir1 dir2    #同时删除两个目录及它们的内容</span><br><span class="line">mv dir1 new_dir     #重命名/移动 一个目录</span><br><span class="line">cp file1 file2     #复制一个文件</span><br><span class="line">cp dir/* .         #复制一个目录下的所有文件到当前工作目录</span><br><span class="line">cp -a /tmp/dir1 .   #复制一个目录到当前工作目录</span><br><span class="line">cp -a dir1 dir2     #复制一个目录</span><br><span class="line">ln -s file1 lnk1  #创建一个指向文件或目录的软链接</span><br><span class="line">ln file1 lnk1     #创建一个指向文件或目录的物理链接</span><br><span class="line">touch -t 0712250000 file1   #修改一个文件或目录的时间戳 - (YYMMDDhhmm)</span><br><span class="line">file file1 outputs the mime type of the file as texticonv -l   #列出已知的编码</span><br><span class="line">iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.</span><br><span class="line">find . -maxdepth 1 -name *.jpg -print -exec convert &quot;&#123;&#125;&quot; -resize 80x60 &quot;thumbs/&#123;&#125;&quot; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</span><br></pre></td></tr></table></figure>

<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name file1     #从 &#x27;/&#x27; 开始进入根文件系统搜索文件和目录</span><br><span class="line">find / -user user1     #搜索属于用户 &#x27;user1&#x27; 的文件和目录</span><br><span class="line">find /home/user1 -name \*.bin        #在目录 &#x27;/ home/user1&#x27; 中搜索带有&#x27;.bin&#x27; 结尾的文件</span><br><span class="line">find /usr/bin -type f -atime +100    #搜索在过去100天内未被使用过的执行文件</span><br><span class="line">find /usr/bin -type f -mtime -10     #搜索在10天内被创建或者修改过的文件</span><br><span class="line">find / -name \*.rpm -exec chmod 755 &#x27;&#123;&#125;&#x27; \;      #搜索以 &#x27;.rpm&#x27; 结尾的文件并定义其权限</span><br><span class="line">find / -xdev -name \*.rpm        #搜索以 &#x27;.rpm&#x27; 结尾的文件，忽略光驱、捷盘等可移动设备</span><br><span class="line">locate \*.ps       #寻找以 &#x27;.ps&#x27; 结尾的文件 - 先运行 &#x27;updatedb&#x27; 命令</span><br><span class="line">whereis halt       #显示一个二进制文件、源码或man的位置</span><br><span class="line">which halt         #显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure>

<h2 id="挂载文件系统"><a href="#挂载文件系统" class="headerlink" title="挂载文件系统"></a>挂载文件系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/hda2 /mnt/hda2    #挂载一个叫做hda2的盘 - 确定目录 &#x27;/ mnt/hda2&#x27; 已经存在</span><br><span class="line">umount /dev/hda2            #卸载一个叫做hda2的盘 - 先从挂载点 &#x27;/ mnt/hda2&#x27; 退出</span><br><span class="line">fuser -km /mnt/hda2         #当设备繁忙时强制卸载</span><br><span class="line">umount -n /mnt/hda2         #运行卸载操作而不写入</span><br><span class="line">/etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</span><br><span class="line">mount /dev/fd0 /mnt/floppy        #挂载一个软盘</span><br><span class="line">mount /dev/cdrom /mnt/cdrom       #挂载一个cdrom或dvdro</span><br><span class="line">mmount /dev/hdc /mnt/cdrecorder    #挂载一个cdrw或dvdrom</span><br><span class="line">mount /dev/hdb /mnt/cdrecorder    #挂载一个cdrw或dvdrom</span><br><span class="line">mount -o loop file.iso /mnt/cdrom    #挂载一个文件或ISO镜像文件</span><br><span class="line">mount -t vfat /dev/hda5 /mnt/hda5    #挂载一个Windows FAT32文件系统</span><br><span class="line">mount /dev/sda1 /mnt/usbdisk         #挂载一个usb 捷盘或闪存设备</span><br><span class="line">mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share      #挂载一个windows网络共享</span><br></pre></td></tr></table></figure>

<h2 id="磁盘空间相关"><a href="#磁盘空间相关" class="headerlink" title="磁盘空间相关"></a>磁盘空间相关</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h           #显示已经挂载的分区列表</span><br><span class="line">ls -lSr |more    #以尺寸大小排列文件和目录</span><br><span class="line">du -sh dir1      #估算目录 &#x27;dir1&#x27; 已经使用的磁盘空间&#x27;</span><br><span class="line">du -sk * | sort -rn     #以容量大小为依据依次显示文件和目录的大小</span><br><span class="line">rpm -q -a --qf &#x27;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#x27; | sort -k1,1n #以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</span><br><span class="line">dpkg-query -W -f=&#x27;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#x27; | sort -k1,1n #以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</span><br></pre></td></tr></table></figure>

<h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd group_name   #创建一个新用户组</span><br><span class="line">groupdel group_name   #删除一个用户组</span><br><span class="line">groupmod -n new_group_name old_group_name   #重命名一个用户组</span><br><span class="line">useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1     #创建一个属于 &quot;admin&quot; 用户组的用户</span><br><span class="line">useradd user1      #创建一个新用户</span><br><span class="line">userdel -r user1   #删除一个用户 ( &#x27;-r&#x27; 排除主目录)</span><br><span class="line">usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1   #修改用户属性</span><br><span class="line">passwd         #修改口令passwd user1   #修改一个用户的口令 (只允许root执行)</span><br><span class="line">chage -E 2005-12-31 user1    #设置用户口令的失效期限</span><br><span class="line">pwck     #检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的用户</span><br><span class="line">grpck    #检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的群组</span><br><span class="line">newgrp group_name     #登陆进一个新的群组以改变新创建文件的预设群组</span><br></pre></td></tr></table></figure>

<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">使用 &quot;+&quot; 设置权限，使用 &quot;-&quot; 用于取消</span><br><span class="line">ls -lh    #显示权限ls /tmp | pr -T5 -W$COLUMNS   #将终端划分成5栏显示</span><br><span class="line">chmod ugo+rwx directory1      #设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span><br><span class="line">chmod go-rwx directory1      #删除群组(g)与其他人(o)对目录的读写执行权限</span><br><span class="line">chown user1 file1            #改变一个文件的所有人属性</span><br><span class="line">chown -R user1 directory1    #改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span><br><span class="line">chgrp group1 file1          #改变文件的群组</span><br><span class="line">chown user1:group1 file1     #改变一个文件的所有人和群组属性</span><br><span class="line">find / -perm -u+s           #罗列一个系统中所有使用了SUID控制的文件</span><br><span class="line">chmod u+s /bin/file1        #设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</span><br><span class="line">chmod u-s /bin/file1        #禁用一个二进制文件的 SUID位</span><br><span class="line">chmod g+s /home/public      #设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</span><br><span class="line">chmod g-s /home/public      #禁用一个目录的 SGID 位</span><br><span class="line">chmod o+t /home/public      #设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</span><br><span class="line">chmod o-t /home/public      #禁用一个目录的 STIKY 位</span><br></pre></td></tr></table></figure>

<h2 id="文件的特殊属性"><a href="#文件的特殊属性" class="headerlink" title="文件的特殊属性"></a>文件的特殊属性</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 使用 &quot;+&quot; 设置权限，使用 &quot;-&quot; 用于取消</span><br><span class="line">  chattr +a file1   #只允许以追加方式读写文件</span><br><span class="line">  chattr +c file1   #允许这个文件能被内核自动压缩/解压</span><br><span class="line">  chattr +d file1   #在进行文件系统备份时，dump程序将忽略这个文件</span><br><span class="line">  chattr +i file1   #设置成不可变的文件，不能被删除、修改、重命名或者链接</span><br><span class="line">  chattr +s file1   #允许一个文件被安全地删除</span><br><span class="line">  chattr +S file1   #一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</span><br><span class="line">  chattr +u file1   #若文件被删除，系统会允许你在以后恢复这个被删除的文件</span><br><span class="line">  lsattr           #显示特殊的属性</span><br></pre></td></tr></table></figure>

<h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bunzip2 file1.bz2   #解压一个叫做 &#x27;file1.bz2&#x27;的文件</span><br><span class="line">bzip2 file1         #压缩一个叫做 &#x27;file1&#x27; 的文件</span><br><span class="line">gunzip file1.gz     #解压一个叫做 &#x27;file1.gz&#x27;的文件gzip file1          #压缩一个叫做 &#x27;file1&#x27;的文件</span><br><span class="line">gzip -9 file1       #最大程度压缩</span><br><span class="line">rar a file1.rar test_file          #创建一个叫做 &#x27;file1.rar&#x27; 的包</span><br><span class="line">rar a file1.rar file1 file2 dir1   #同时压缩 &#x27;file1&#x27;, &#x27;file2&#x27; 以及目录 &#x27;dir1&#x27;</span><br><span class="line">rar x file1.rar     #解压rar包unrar x file1.rar   #解压rar包</span><br><span class="line">tar -cvf archive.tar file1   #创建一个非压缩的 tarball</span><br><span class="line">tar -cvf archive.tar file1 file2 dir1  #创建一个包含了 &#x27;file1&#x27;, &#x27;file2&#x27; 以及 &#x27;dir1&#x27;的档案文件</span><br><span class="line">tar -tf archive.tar    #显示一个包中的内容</span><br><span class="line">tar -xvf archive.tar   #释放一个包</span><br><span class="line">tar -xvf archive.tar -C /tmp     #将压缩包释放到 /tmp目录下</span><br><span class="line">tar -cvfj archive.tar.bz2 dir1   #创建一个bzip2格式的压缩包</span><br><span class="line">tar -jxvf archive.tar.bz2        #解压一个bzip2格式的压缩包</span><br><span class="line">tar -cvfz archive.tar.gz dir1    #创建一个gzip格式的压缩包</span><br><span class="line">tar -zxvf archive.tar.gz         #解压一个gzip格式的压缩包</span><br><span class="line">zip file1.zip file1    #创建一个zip格式的压缩包</span><br><span class="line">zip -r file1.zip file1 file2 dir1    #将几个文件和目录同时压缩成一个zip格式的压缩包</span><br><span class="line">unzip file1.zip    #解压一个zip格式压缩包</span><br></pre></td></tr></table></figure>

<h2 id="RPM包（Fedora-Redhat及类似系统）"><a href="#RPM包（Fedora-Redhat及类似系统）" class="headerlink" title="RPM包（Fedora, Redhat及类似系统）"></a>RPM包（Fedora, Redhat及类似系统）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh package.rpm    #安装一个rpm包</span><br><span class="line">rpm -ivh --nodeeps package.rpm   #安装一个rpm包而忽略依赖关系警告</span><br><span class="line">rpm -U package.rpm        #更新一个rpm包但不改变其配置文件</span><br><span class="line">rpm -F package.rpm        #更新一个确定已经安装的rpm包</span><br><span class="line">rpm -e package_name.rpm   #删除一个rpm包</span><br><span class="line">rpm -qa      #显示系统中所有已经安装的rpm包</span><br><span class="line">rpm -qa | grep httpd    #显示所有名称中包含 &quot;httpd&quot; 字样的rpm包</span><br><span class="line">rpm -qi package_name    #获取一个已安装包的特殊信息rpm -qg &quot;System Environment/Daemons&quot;     #显示一个组件的rpm包</span><br><span class="line">rpm -ql package_name       #显示一个已经安装的rpm包提供的文件列表</span><br><span class="line">rpm -qc package_name       #显示一个已经安装的rpm包提供的配置文件列表</span><br><span class="line">rpm -q package_name --whatrequires     #显示与一个rpm包存在依赖关系的列表</span><br><span class="line">rpm -q package_name --whatprovides    #显示一个rpm包所占的体积</span><br><span class="line">rpm -q package_name --scripts         #显示在安装/删除期间所执行的脚本</span><br><span class="line">lrpm -q package_name --changelog       #显示一个rpm包的修改历史</span><br><span class="line">rpm -qf /etc/httpd/conf/httpd.conf    #确认所给的文件由哪个rpm包所提供</span><br><span class="line">rpm -qp package.rpm -l    #显示由一个尚未安装的rpm包提供的文件列表</span><br><span class="line">rpm --import /media/cdrom/RPM-GPG-KEY    #导入公钥数字证书</span><br><span class="line">rpm --checksig package.rpm      #确认一个rpm包的完整性</span><br><span class="line">rpm -qa gpg-pubkey      #确认已安装的所有rpm包的完整性</span><br><span class="line">rpm -V package_name     #检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</span><br><span class="line">rpm -Va                 #检查系统中所有已安装的rpm包- 小心使用</span><br><span class="line">rpm -Vp package.rpm     #确认一个rpm包还未安装</span><br><span class="line">rpm2cpio package.rpm | cpio --extract --make-directories *bin*   #从一个rpm包运行可执行文件</span><br><span class="line">rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm    #从一个rpm源码安装一个构建好的包</span><br><span class="line">rpmbuild --rebuild package_name.src.rpm       #从一个rpm源码构建一个 rpm 包</span><br></pre></td></tr></table></figure>

<h2 id="YUM（Fedora-RedHat及类似系统）"><a href="#YUM（Fedora-RedHat及类似系统）" class="headerlink" title="YUM（Fedora, RedHat及类似系统）"></a>YUM（Fedora, RedHat及类似系统）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install package_name             #下载并安装一个rpm包</span><br><span class="line">yum localinstall package_name.rpm    #将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</span><br><span class="line">yum update package_name.rpm    #更新当前系统中所有安装的rpm包</span><br><span class="line">yum update package_name        #更新一个rpm包</span><br><span class="line">yum remove package_name        #删除一个rpm包</span><br><span class="line">yum list                   #列出当前系统中安装的所有包</span><br><span class="line">yum search package_name     #在rpm仓库中搜寻软件包</span><br><span class="line">yum clean packages          #清理rpm缓存删除下载的包</span><br><span class="line">yum clean headers           #删除所有头文件</span><br><span class="line">yum clean all                #删除所有缓存的包和头文件</span><br></pre></td></tr></table></figure>

<h2 id="DEB包-Debian-Ubuntu及类似系统"><a href="#DEB包-Debian-Ubuntu及类似系统" class="headerlink" title="DEB包 (Debian, Ubuntu及类似系统)"></a>DEB包 (Debian, Ubuntu及类似系统)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -i package.deb     #安装/更新一个 deb 包</span><br><span class="line">dpkg -r package_name    #从系统删除一个 deb 包</span><br><span class="line">dpkg -l                 #显示系统中所有已经安装的 deb 包</span><br><span class="line">dpkg -l | grep httpd    #显示所有名称中包含 &quot;httpd&quot; 字样的deb包</span><br><span class="line">dpkg -s package_name    #获得已经安装在系统中一个特殊包的信息</span><br><span class="line">dpkg -L package_name    #显示系统中已经安装的一个deb包所提供的文件列表</span><br><span class="line">dpkg --contents package.deb    #显示尚未安装的一个包所提供的文件列表</span><br><span class="line">dpkg -S /bin/ping              #确认所给的文件由哪个deb包提供</span><br></pre></td></tr></table></figure>

<h2 id="APT软件工具-Debian-Ubuntu及类似系统"><a href="#APT软件工具-Debian-Ubuntu及类似系统" class="headerlink" title="APT软件工具 (Debian, Ubuntu及类似系统)"></a>APT软件工具 (Debian, Ubuntu及类似系统)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install package_name      #安装/更新一个 deb 包</span><br><span class="line">apt-cdrom install package_name    #从光盘安装/更新一个 deb 包</span><br><span class="line">apt-get update      #升级列表中的软件包</span><br><span class="line">apt-get upgrade     #升级所有已安装的软件</span><br><span class="line">apt-get remove package_name     #从系统删除一个deb包</span><br><span class="line">apt-get check     #确认依赖的软件仓库正确</span><br><span class="line">apt-get clean     #从下载的软件包中清理缓存</span><br><span class="line">apt-cache search searched-package    #返回包含所要搜索字符串的软件包名称</span><br></pre></td></tr></table></figure>

<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file1      #从第一个字节开始正向查看文件的内容</span><br><span class="line">tac file1      #从最后一行开始反向查看一个文件的内容</span><br><span class="line">more file1     #查看一个长文件的内容</span><br><span class="line">less file1     #类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作</span><br><span class="line">head -2 file1    #查看一个文件的前两行</span><br><span class="line">tail -2 file1    #查看一个文件的最后两行</span><br><span class="line">tail -f /var/log/messages     #实时查看被添加到一个文件中的内容</span><br></pre></td></tr></table></figure>

<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT</span><br><span class="line">cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt #合并一个文件的详细说明文本，并将简介写入一个新文件中</span><br><span class="line">cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt #合并一个文件的详细说明文本，并将简介写入一个已有的文件中</span><br><span class="line">grep Aug /var/log/messages     #在文件 &#x27;/var/log/messages&#x27;中查找关键词&quot;Aug&quot;</span><br><span class="line">grep ^Aug /var/log/messages    #在文件 &#x27;/var/log/messages&#x27;中查找以&quot;Aug&quot;开始的词汇</span><br><span class="line">grep [0-9] /var/log/messages   #选择 &#x27;/var/log/messages&#x27; 文件中所有包含数字的行</span><br><span class="line">grep Aug -R /var/log/*         #在目录 &#x27;/var/log&#x27; 及随后的目录中搜索字符串&quot;Aug&quot;</span><br><span class="line">sed &#x27;s/stringa1/stringa2/g&#x27; example.txt #将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;</span><br><span class="line">sed &#x27;/^$/d&#x27; example.txt           #从example.txt文件中删除所有空白行</span><br><span class="line">sed &#x27;/ *#/d; /^$/d&#x27; example.txt   #从example.txt文件中删除所有注释和空白行</span><br><span class="line">echo &#x27;esempio&#x27; | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;    #合并上下单元格内容</span><br><span class="line">sed -e &#x27;1d&#x27; result.txt          #从文件example.txt 中排除第一行</span><br><span class="line">sed -n &#x27;/stringa1/p&#x27;            #查看只包含词汇 &quot;string1&quot;的行</span><br><span class="line">sed -e &#x27;s/ *$//&#x27; example.txt    #删除每一行最后的空白字符</span><br><span class="line">sed -e &#x27;s/stringa1//g&#x27; example.txt  #从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部</span><br><span class="line">sed -n &#x27;1,5p;5q&#x27; example.txt     #查看从第一行到第5行内容</span><br><span class="line">sed -n &#x27;5p;5q&#x27; example.txt       #查看第5行</span><br><span class="line">sed -e &#x27;s/00*/0/g&#x27; example.txt   #用单个零替换多个零</span><br><span class="line">cat -n file1       #标示文件的行数</span><br><span class="line">cat example.txt | awk &#x27;NR%2==1&#x27;      #删除example.txt文件中的所有偶数行</span><br><span class="line">echo a b c | awk &#x27;&#123;print $1&#125;&#x27;        #查看一行第一栏</span><br><span class="line">echo a b c | awk &#x27;&#123;print $1,$3&#125;&#x27;     #查看一行的第一和第三栏</span><br><span class="line">paste file1 file2           #合并两个文件或两栏的内容</span><br><span class="line">paste -d &#x27;+&#x27; file1 file2    #合并两个文件或两栏的内容，中间用&quot;+&quot;区分</span><br><span class="line">sort file1 file2              #排序两个文件的内容</span><br><span class="line">sort file1 file2 | uniq       #取出两个文件的并集(重复的行只保留一份)</span><br><span class="line">sort file1 file2 | uniq -u    #删除交集，留下其他的行</span><br><span class="line">sort file1 file2 | uniq -d    #取出两个文件的交集(只留下同时存在于两个文件中的文件)</span><br><span class="line">comm -1 file1 file2    #比较两个文件的内容只删除 &#x27;file1&#x27; 所包含的内容</span><br><span class="line">comm -2 file1 file2    #比较两个文件的内容只删除 &#x27;file2&#x27; 所包含的内容</span><br><span class="line">comm -3 file1 file2    #比较两个文件的内容只删除两个文件共有的部分</span><br></pre></td></tr></table></figure>

<h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dos2unix filedos.txt fileunix.txt      #将一个文本文件的格式从MSDOS转换成UNIX</span><br><span class="line">unix2dos fileunix.txt filedos.txt      #将一个文本文件的格式从UNIX转换成MSDOS</span><br><span class="line">recode ..HTML &lt; page.txt &gt; page.html   #将一个文本文件转换成html</span><br><span class="line">recode -l | more                       #显示所有允许的转换格式</span><br></pre></td></tr></table></figure>

<h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">badblocks -v /dev/hda1    #检查磁盘hda1上的坏磁块</span><br><span class="line">fsck /dev/hda1            #修复/检查hda1磁盘上linux文件系统的完整性</span><br><span class="line">fsck.ext2 /dev/hda1       #修复/检查hda1磁盘上ext2文件系统的完整性</span><br><span class="line">e2fsck /dev/hda1          #修复/检查hda1磁盘上ext2文件系统的完整性</span><br><span class="line">e2fsck -j /dev/hda1       #修复/检查hda1磁盘上ext3文件系统的完整性</span><br><span class="line">fsck.ext3 /dev/hda1       #修复/检查hda1磁盘上ext3文件系统的完整性</span><br><span class="line">fsck.vfat /dev/hda1       #修复/检查hda1磁盘上fat文件系统的完整性</span><br><span class="line">fsck.msdos /dev/hda1      #修复/检查hda1磁盘上dos文件系统的完整性</span><br><span class="line">dosfsck /dev/hda1         #修复/检查hda1磁盘上dos文件系统的完整性</span><br></pre></td></tr></table></figure>

<h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs /dev/hda1        #在hda1分区创建一个文件系统</span><br><span class="line">mke2fs /dev/hda1      #在hda1分区创建一个linux ext2的文件系统</span><br><span class="line">mke2fs -j /dev/hda1   #在hda1分区创建一个linux ext3(日志型)的文件系统</span><br><span class="line">mkfs -t vfat 32 -F /dev/hda1   #创建一个 FAT32 文件系统</span><br><span class="line">fdformat -n /dev/fd0           #格式化一个软盘</span><br><span class="line">mkswap /dev/hda3               #创建一个swap文件系统  </span><br></pre></td></tr></table></figure>

<h2 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a>SWAP文件系统</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkswap /dev/hda3             #创建一个swap文件系统</span><br><span class="line">swapon /dev/hda3             #启用一个新的swap文件系统</span><br><span class="line">swapon /dev/hda2 /dev/hdb3   #启用两个swap分区</span><br></pre></td></tr></table></figure>

<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dump -0aj -f /tmp/home0.bak /home    #制作一个 &#x27;/home&#x27; 目录的完整备份</span><br><span class="line">dump -1aj -f /tmp/home0.bak /home    #制作一个 &#x27;/home&#x27; 目录的交互式备份</span><br><span class="line">restore -if /tmp/home0.bak          #还原一个交互式备份</span><br><span class="line">rsync -rogpav --delete /home /tmp    #同步两边的目录</span><br><span class="line">rsync -rogpav -e ssh --delete /home ip_address:/tmp           #通过SSH通道rsync</span><br><span class="line">rsync -az -e ssh --delete ip_addr:/home/public /home/local    #通过ssh和压缩将一个远程目录同步到本地目录</span><br><span class="line">rsync -az -e ssh --delete /home/local ip_addr:/home/public    #通过ssh和压缩将本地目录同步到远程目录</span><br><span class="line">dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &#x27;dd of=hda.gz&#x27;  #通过ssh在远程主机上执行一次备份本地磁盘的操作</span><br><span class="line">dd if=/dev/sda of=/tmp/file1 #备份磁盘内容到一个文件</span><br><span class="line">tar -Puf backup.tar /home/user 执行一次对 &#x27;/home/user&#x27; #目录的交互式备份操作</span><br><span class="line">( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &#x27;cd /home/share/ &amp;&amp; tar x -p&#x27; #通过ssh在远程目录中复制一个目录内容</span><br><span class="line">( tar c /home ) | ssh -C user@ip_addr &#x27;cd /home/backup-home &amp;&amp; tar x -p&#x27; #通过ssh在远程目录中复制一个本地目录</span><br><span class="line">tar cf - . | (cd /tmp/backup ; tar xf - ) #本地将一个目录复制到另一个地方，保留原有权限及链接</span><br><span class="line">find /home/user1 -name &#x27;*.txt&#x27; | xargs cp -av --target-directory=/home/backup/ --parents #从一个目录查找并复制所有以 &#x27;.txt&#x27; 结尾的文件到另一个目录</span><br><span class="line">find /var/log -name &#x27;*.log&#x27; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 #查找所有以 &#x27;.log&#x27; 结尾的文件并做成一个bzip包</span><br><span class="line">dd if=/dev/hda of=/dev/fd0 bs=512 count=1 #做一个将 MBR (Master Boot Record)内容复制到软盘的动作</span><br><span class="line">dd if=/dev/fd0 of=/dev/hda bs=512 count=1 #从已经保存到软盘的备份中恢复MBR内容  </span><br></pre></td></tr></table></figure>

<h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force #清空一个可复写的光盘内容</span><br><span class="line">mkisofs /dev/cdrom &gt; cd.iso             #在磁盘上创建一个光盘的iso镜像文件</span><br><span class="line">mkisofs /dev/cdrom | gzip &gt; cd_iso.gz    #在磁盘上创建一个压缩了的光盘iso镜像文件</span><br><span class="line">mkisofs -J -allow-leading-dots -R -V &quot;Label CD&quot; -iso-level 4 -o ./cd.iso data_cd #创建一个目录的iso镜像文件</span><br><span class="line">cdrecord -v dev=/dev/cdrom cd.iso               #刻录一个ISO镜像文件</span><br><span class="line">gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom -  #刻录一个压缩了的ISO镜像文件</span><br><span class="line">mount -o loop cd.iso /mnt/iso                  #挂载一个ISO镜像文件</span><br><span class="line">cd-paranoia -B             #从一个CD光盘转录音轨到 wav 文件中</span><br><span class="line">cd-paranoia -- &quot;-3&quot;        #从一个CD光盘转录音轨到 wav 文件中（参数-3）</span><br><span class="line">cdrecord --scanbus         #扫描总线以识别scsi通道</span><br><span class="line">dd if=/dev/hdc | md5sum    #校验一个设备的md5sum编码，例如一张 CD</span><br></pre></td></tr></table></figure>

<h2 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0    #显示一个以太网卡的配置</span><br><span class="line">ifup eth0        #启用一个 &#x27;eth0&#x27; 网络设备</span><br><span class="line">ifdown eth0      #禁用一个 &#x27;eth0&#x27; 网络设备</span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0     #控制IP地址</span><br><span class="line">ifconfig eth0 promisc     #设置 &#x27;eth0&#x27; 成混杂模式以嗅探数据包 (sniffing)</span><br><span class="line">dhclient eth0            #以dhcp模式启用 &#x27;eth0&#x27;</span><br><span class="line">route -n    #查看路由表</span><br><span class="line">route add -net 0/0 gw IP_Gateway    #配置默认网关</span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 #配置静态路由到达网络&#x27;192.168.0.0/16&#x27;</span><br><span class="line">route del 0/0 gw IP_gateway        #删除静态路由hostname #查看机器名</span><br><span class="line">host www.example.com       #把一个主机名解析到一个网际地址或把一个网际地址解析到一个主机名。</span><br><span class="line">nslookup www.example.com   #用于查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题。</span><br><span class="line">ip link show            #查看网卡信息</span><br><span class="line">mii-tool                #用于查看、管理介质的网络接口的状态</span><br><span class="line">ethtool                 #用于查询和设置网卡配置</span><br><span class="line">netstat -tupl           #用于显示TCP/UDP的状态信息</span><br><span class="line">tcpdump tcp port 80     #显示所有http协议的流量</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>vim常用技巧</title>
    <url>/2020/11/09/%E8%BF%90%E7%BB%B4/vim%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><img src="/2020/11/09/%E8%BF%90%E7%BB%B4/vim%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/vim.png" alt="vi/vim键盘图"></p>
<h1 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h1><p>&#x2F; string  光标处向后查找<br>? string  光标处向前查找</p>
<p>n 重复上一条检索命令<br>N 以相反的方向查找上次查找的字符串</p>
<h1 id="指令模式"><a href="#指令模式" class="headerlink" title="指令模式"></a>指令模式</h1><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>方向键</td>
<td>移动光标</td>
</tr>
<tr>
<td>x</td>
<td>删除某个字符</td>
</tr>
<tr>
<td>dd</td>
<td>删除（剪切）某行</td>
</tr>
<tr>
<td>ndd</td>
<td>删除（剪切）当前行开始的n行</td>
</tr>
<tr>
<td>%d</td>
<td>删除所有行</td>
</tr>
<tr>
<td>yy</td>
<td>复制游标所在行</td>
</tr>
<tr>
<td>nyy</td>
<td>复制当前开始的n行</td>
</tr>
<tr>
<td>p</td>
<td>在当前行的下一行粘贴剪切板内容</td>
</tr>
<tr>
<td>P</td>
<td>在当前行的上一行粘贴剪切板内容</td>
</tr>
<tr>
<td>u</td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td>U</td>
<td>撤销所有在前一个编辑行上的操作</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>恢复（上面两个命令的）撤销操作</td>
</tr>
</tbody></table>
<h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><ul>
<li>按下i、I、o、O、a、A任何一个按键之后可进入编辑模式</li>
<li>按下ESC键退出编辑模式，进入指令模式<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>在当前字符前插入</td>
</tr>
<tr>
<td>I</td>
<td>在光标所在行的行首插入</td>
</tr>
<tr>
<td>a</td>
<td>在当前字符后插入</td>
</tr>
<tr>
<td>A</td>
<td>在光标所在行的行尾插入</td>
</tr>
<tr>
<td>o</td>
<td>在当前行的下一行插入新的一行</td>
</tr>
<tr>
<td>O</td>
<td>在当前行的上一行插入新的 一行</td>
</tr>
</tbody></table>
</li>
</ul>
<h1 id="命令模式（末行模式）"><a href="#命令模式（末行模式）" class="headerlink" title="命令模式（末行模式）"></a>命令模式（末行模式）</h1><p>在指令模式下输入  : &#x2F; ? 三个中的任何一个，都可以进入命令行模式，也就是将光标转移到vi编辑器最底下一行。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode算法笔记</title>
    <url>/2020/05/26/%E7%AE%97%E6%B3%95/LeetCode%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="LeetCode算法笔记"><a href="#LeetCode算法笔记" class="headerlink" title="LeetCode算法笔记"></a>LeetCode算法笔记</h1><ol>
<li>两数之和</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">complement</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>爬楼梯</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/climbing-stairs/">https://leetcode-cn.com/problems/climbing-stairs/</a></p>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>翻转二叉树</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/invert-binary-tree/">https://leetcode-cn.com/problems/invert-binary-tree/</a></p>
<p>翻转一棵二叉树。</p>
<p>示例：</p>
<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> invertTree(root.right);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> invertTree(root.left);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>反转链表</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a></p>
<p>反转一个单链表。</p>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">nextTemp</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        curr.next = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = nextTemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>LRU缓存机制</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/lru-cache/">https://leetcode-cn.com/problems/lru-cache/</a></p>
<p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p>
<p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p>
<p>进阶:</p>
<p>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       // 返回  1</span><br><span class="line">cache.put(3, 3);    // 该操作会使得密钥 2 作废</span><br><span class="line">cache.get(2);       // 返回 -1 (未找到)</span><br><span class="line">cache.put(4, 4);    // 该操作会使得密钥 1 作废</span><br><span class="line">cache.get(1);       // 返回 -1 (未找到)</span><br><span class="line">cache.get(3);       // 返回  3</span><br><span class="line">cache.get(4);       // 返回  4</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer, Integer&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; capacity; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LRUCache 对象会以如下语句构造和调用:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>最长回文子串</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p>
<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>
<p>示例 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> expandAroundCenter(s, i, i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Math.max(len1, len2);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expandAroundCenter</span><span class="params">(String s, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> left, R = right;</span><br><span class="line">    <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">        L--;</span><br><span class="line">        R++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>有效的括号</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses/">https://leetcode-cn.com/problems/valid-parentheses/</a></p>
<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：<br>    1. 左括号必须用相同类型的右括号闭合。<br>    2. 左括号必须以正确的顺序闭合。</p>
<p>注意空字符串可被认为是有效字符串。</p>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>示例 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p>示例 4:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>

<p>示例 5:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hash table that takes care of the mappings.</span></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Character, Character&gt; mappings;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize hash map with mappings. This simply makes the code easier to read.</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mappings = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;();</span><br><span class="line">    <span class="built_in">this</span>.mappings.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.mappings.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.mappings.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize a stack to be used in the algorithm.</span></span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Character&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">      <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If the current character is a closing bracket.</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.mappings.containsKey(c)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the top element of the stack. If the stack is empty, set a dummy value of &#x27;#&#x27;</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">topElement</span> <span class="operator">=</span> stack.empty() ? <span class="string">&#x27;#&#x27;</span> : stack.pop();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the mapping for this bracket doesn&#x27;t match the stack&#x27;s top element, return false.</span></span><br><span class="line">        <span class="keyword">if</span> (topElement != <span class="built_in">this</span>.mappings.get(c)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// If it was an opening bracket, push to the stack.</span></span><br><span class="line">        stack.push(c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the stack still contains elements, then it is an invalid expression.</span></span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>数组中的第K个最大元素</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">https://leetcode-cn.com/problems/kth-largest-element-in-an-array/</a></p>
<p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4] 和 k = 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<p>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p>
<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="type">int</span> [] nums;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="built_in">this</span>.nums[a];</span><br><span class="line">    <span class="built_in">this</span>.nums[a] = <span class="built_in">this</span>.nums[b];</span><br><span class="line">    <span class="built_in">this</span>.nums[b] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> pivot_index)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> <span class="built_in">this</span>.nums[pivot_index];</span><br><span class="line">    <span class="comment">// 1. move pivot to end</span></span><br><span class="line">    swap(pivot_index, right);</span><br><span class="line">    <span class="type">int</span> <span class="variable">store_index</span> <span class="operator">=</span> left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. move all smaller elements to the left</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.nums[i] &lt; pivot) &#123;</span><br><span class="line">        swap(store_index, i);</span><br><span class="line">        store_index++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. move pivot to its final place</span></span><br><span class="line">    swap(store_index, right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store_index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">quickselect</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> k_smallest)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Returns the k-th smallest element of list within left..right.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left == right) <span class="comment">// If the list contains only one element,</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.nums[left];  <span class="comment">// return that element</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// select a random pivot_index</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">random_num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot_index</span> <span class="operator">=</span> left + random_num.nextInt(right - left); </span><br><span class="line"></span><br><span class="line">    pivot_index = partition(left, right, pivot_index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the pivot is on (N - k)th smallest position</span></span><br><span class="line">    <span class="keyword">if</span> (k_smallest == pivot_index)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.nums[k_smallest];</span><br><span class="line">    <span class="comment">// go left side</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k_smallest &lt; pivot_index)</span><br><span class="line">      <span class="keyword">return</span> quickselect(left, pivot_index - <span class="number">1</span>, k_smallest);</span><br><span class="line">    <span class="comment">// go right side</span></span><br><span class="line">    <span class="keyword">return</span> quickselect(pivot_index + <span class="number">1</span>, right, k_smallest);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nums = nums;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// kth largest is (N - k)th smallest</span></span><br><span class="line">    <span class="keyword">return</span> quickselect(<span class="number">0</span>, size - <span class="number">1</span>, size - k);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>实现 Trie (前缀树)</li>
</ol>
<p>实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。</p>
<p>示例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Trie trie = new Trie();</span><br><span class="line"></span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   // 返回 true</span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 false</span><br><span class="line">trie.startsWith(&quot;app&quot;); // 返回 true</span><br><span class="line">trie.insert(&quot;app&quot;);   </span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 true</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>你可以假设所有的输入都是由小写字母 a-z 构成的。</li>
<li>保证所有输入均为非空字符串。</li>
</ul>
<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inserts a word into the trie.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">currentChar</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!node.containsKey(currentChar)) &#123;</span><br><span class="line">                node.put(currentChar, <span class="keyword">new</span> <span class="title class_">TrieNode</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.get(currentChar);</span><br><span class="line">        &#125;</span><br><span class="line">        node.setEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// search a prefix or whole key in trie and</span></span><br><span class="line">    <span class="comment">// returns the node where search ends</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode <span class="title function_">searchPrefix</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">           <span class="type">char</span> <span class="variable">curLetter</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">           <span class="keyword">if</span> (node.containsKey(curLetter)) &#123;</span><br><span class="line">               node = node.get(curLetter);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns if the word is in the trie.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">       <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> searchPrefix(word);</span><br><span class="line">       <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.isEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>编辑距离</li>
</ol>
<p>链接：<a href="https://leetcode-cn.com/problems/edit-distance/">https://leetcode-cn.com/problems/edit-distance/</a></p>
<p>给定两个单词 word1 和 word2，计算出将 word1 转换成 word2 所使用的最少操作数 。</p>
<p>你可以对一个单词进行如下三种操作：<br>    1. 插入一个字符<br>    2. 删除一个字符<br>    3. 替换一个字符</p>
<p>示例 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: </span><br><span class="line">horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (删除 &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (删除 &#x27;e&#x27;)</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出: 5</span><br><span class="line">解释: </span><br><span class="line">intention -&gt; inention (删除 &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (将 &#x27;i&#x27; 替换为 &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (将 &#x27;n&#x27; 替换为 &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (将 &#x27;n&#x27; 替换为 &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (插入 &#x27;u&#x27;)</span><br></pre></td></tr></table></figure>

<p>题解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word2.length();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if one of the strings is empty</span></span><br><span class="line">    <span class="keyword">if</span> (n * m == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> n + m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// array to store the convertion history</span></span><br><span class="line">    <span class="type">int</span> [][] d = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init boundaries</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">      d[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">      d[<span class="number">0</span>][j] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DP compute </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> d[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">down</span> <span class="operator">=</span> d[i][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left_down</span> <span class="operator">=</span> d[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) != word2.charAt(j - <span class="number">1</span>))</span><br><span class="line">          left_down += <span class="number">1</span>;</span><br><span class="line">        d[i][j] = Math.min(left, Math.min(down, left_down));</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d[n][m];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
